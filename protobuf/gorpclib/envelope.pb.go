// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.5
// source: envelope.proto

package gorpclib

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Headers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the provider
	Provider Provider `protobuf:"varint,1,opt,name=provider,proto3,enum=com.sts.rpclib.Provider" json:"provider,omitempty"`
	// the sport
	Sport   Sport  `protobuf:"varint,2,opt,name=sport,proto3,enum=com.sts.rpclib.Sport" json:"sport,omitempty"`
	MatchId string `protobuf:"bytes,3,opt,name=matchId,proto3" json:"matchId,omitempty"`
	StageId string `protobuf:"bytes,4,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Season  string `protobuf:"bytes,5,opt,name=season,proto3" json:"season,omitempty"`
	// timestamp of when the message was created
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// the type of message the body of the envelope contains
	MessageType MessageType `protobuf:"varint,7,opt,name=message_type,json=messageType,proto3,enum=com.sts.rpclib.MessageType" json:"message_type,omitempty"`
}

func (x *Headers) Reset() {
	*x = Headers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envelope_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headers) ProtoMessage() {}

func (x *Headers) ProtoReflect() protoreflect.Message {
	mi := &file_envelope_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headers.ProtoReflect.Descriptor instead.
func (*Headers) Descriptor() ([]byte, []int) {
	return file_envelope_proto_rawDescGZIP(), []int{0}
}

func (x *Headers) GetProvider() Provider {
	if x != nil {
		return x.Provider
	}
	return Provider_UNKNOWN_PROVIDER
}

func (x *Headers) GetSport() Sport {
	if x != nil {
		return x.Sport
	}
	return Sport_UNKNOWN_SPORT
}

func (x *Headers) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Headers) GetStageId() string {
	if x != nil {
		return x.StageId
	}
	return ""
}

func (x *Headers) GetSeason() string {
	if x != nil {
		return x.Season
	}
	return ""
}

func (x *Headers) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Headers) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_UNKNOWN_MESSAGE
}

type ResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          RpcResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=com.sts.rpclib.RpcResponseStatus" json:"status,omitempty"`
	Description     string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Header          *Headers          `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	ServerStartedTs int64             `protobuf:"varint,4,opt,name=serverStartedTs,proto3" json:"serverStartedTs,omitempty"`
}

func (x *ResponseMessage) Reset() {
	*x = ResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envelope_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMessage) ProtoMessage() {}

func (x *ResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_envelope_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMessage.ProtoReflect.Descriptor instead.
func (*ResponseMessage) Descriptor() ([]byte, []int) {
	return file_envelope_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseMessage) GetStatus() RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return RpcResponseStatus_SUCCESS
}

func (x *ResponseMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResponseMessage) GetHeader() *Headers {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ResponseMessage) GetServerStartedTs() int64 {
	if x != nil {
		return x.ServerStartedTs
	}
	return 0
}

type HeartbeatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderId      int32 `protobuf:"varint,1,opt,name=providerId,proto3" json:"providerId,omitempty"`
	ServerStartedTs int64 `protobuf:"varint,2,opt,name=serverStartedTs,proto3" json:"serverStartedTs,omitempty"`
}

func (x *HeartbeatMessage) Reset() {
	*x = HeartbeatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envelope_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatMessage) ProtoMessage() {}

func (x *HeartbeatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_envelope_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatMessage.ProtoReflect.Descriptor instead.
func (*HeartbeatMessage) Descriptor() ([]byte, []int) {
	return file_envelope_proto_rawDescGZIP(), []int{2}
}

func (x *HeartbeatMessage) GetProviderId() int32 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

func (x *HeartbeatMessage) GetServerStartedTs() int64 {
	if x != nil {
		return x.ServerStartedTs
	}
	return 0
}

type CommandRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderId int32 `protobuf:"varint,1,opt,name=providerId,proto3" json:"providerId,omitempty"`
	Counter    int64 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (x *CommandRequestMessage) Reset() {
	*x = CommandRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envelope_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequestMessage) ProtoMessage() {}

func (x *CommandRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_envelope_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequestMessage.ProtoReflect.Descriptor instead.
func (*CommandRequestMessage) Descriptor() ([]byte, []int) {
	return file_envelope_proto_rawDescGZIP(), []int{3}
}

func (x *CommandRequestMessage) GetProviderId() int32 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

func (x *CommandRequestMessage) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

// The event coming from the providers
type EventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers *Headers `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	// Types that are assignable to Body:
	//
	//	*EventMessage_Stage
	//	*EventMessage_Commentary
	//	*EventMessage_MatchCommentaryAdd
	//	*EventMessage_ProviderStatus
	//	*EventMessage_LeagueTable
	//	*EventMessage_TopScorer
	//	*EventMessage_ScoutConnection
	//	*EventMessage_WidgetEvent
	//	*EventMessage_VarStatus
	//	*EventMessage_VarReason
	//	*EventMessage_FullMatchData
	//	*EventMessage_MatchDeleted
	//	*EventMessage_Incident
	//	*EventMessage_MatchStatusChange
	//	*EventMessage_MatchScoreChange
	//	*EventMessage_MatchIncidentChange
	//	*EventMessage_MatchWinnerChange
	//	*EventMessage_MatchParticipantsChange
	//	*EventMessage_MatchLineupChange
	//	*EventMessage_MatchStatsMessage
	//	*EventMessage_DeletedIncidentMessage
	//	*EventMessage_ResponseMessage
	//	*EventMessage_HeartbeatMessage
	//	*EventMessage_LeagueTableMessageFull
	//	*EventMessage_TopScorerFullMessage
	//	*EventMessage_H2HMatchesMessage
	//	*EventMessage_Base64Image
	//	*EventMessage_ImageFullMessage
	//	*EventMessage_StageParticipantsStatisticsFullMessage
	//	*EventMessage_MatchOddsFullMessage
	//	*EventMessage_TeamPageMessage
	//	*EventMessage_TeamPageFullMessage
	//	*EventMessage_DrawFullMessage
	//	*EventMessage_RankingsMessage
	//	*EventMessage_RankingsFullMessage
	Body isEventMessage_Body `protobuf_oneof:"body"`
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envelope_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_envelope_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_envelope_proto_rawDescGZIP(), []int{4}
}

func (x *EventMessage) GetHeaders() *Headers {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (m *EventMessage) GetBody() isEventMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *EventMessage) GetStage() *StageMessage {
	if x, ok := x.GetBody().(*EventMessage_Stage); ok {
		return x.Stage
	}
	return nil
}

func (x *EventMessage) GetCommentary() *CommentaryMessage {
	if x, ok := x.GetBody().(*EventMessage_Commentary); ok {
		return x.Commentary
	}
	return nil
}

func (x *EventMessage) GetMatchCommentaryAdd() *AddCommentaryMessage {
	if x, ok := x.GetBody().(*EventMessage_MatchCommentaryAdd); ok {
		return x.MatchCommentaryAdd
	}
	return nil
}

func (x *EventMessage) GetProviderStatus() *ProviderStatusMessage {
	if x, ok := x.GetBody().(*EventMessage_ProviderStatus); ok {
		return x.ProviderStatus
	}
	return nil
}

func (x *EventMessage) GetLeagueTable() *LeagueTableMessage {
	if x, ok := x.GetBody().(*EventMessage_LeagueTable); ok {
		return x.LeagueTable
	}
	return nil
}

func (x *EventMessage) GetTopScorer() *TopScorerMessage {
	if x, ok := x.GetBody().(*EventMessage_TopScorer); ok {
		return x.TopScorer
	}
	return nil
}

func (x *EventMessage) GetScoutConnection() *ScoutConnectionMessage {
	if x, ok := x.GetBody().(*EventMessage_ScoutConnection); ok {
		return x.ScoutConnection
	}
	return nil
}

func (x *EventMessage) GetWidgetEvent() *WidgetEventMessage {
	if x, ok := x.GetBody().(*EventMessage_WidgetEvent); ok {
		return x.WidgetEvent
	}
	return nil
}

func (x *EventMessage) GetVarStatus() *VarStatusMessage {
	if x, ok := x.GetBody().(*EventMessage_VarStatus); ok {
		return x.VarStatus
	}
	return nil
}

func (x *EventMessage) GetVarReason() *VarReasonMessage {
	if x, ok := x.GetBody().(*EventMessage_VarReason); ok {
		return x.VarReason
	}
	return nil
}

func (x *EventMessage) GetFullMatchData() *FullMatchDataMessage {
	if x, ok := x.GetBody().(*EventMessage_FullMatchData); ok {
		return x.FullMatchData
	}
	return nil
}

func (x *EventMessage) GetMatchDeleted() *MatchDeletedMessage {
	if x, ok := x.GetBody().(*EventMessage_MatchDeleted); ok {
		return x.MatchDeleted
	}
	return nil
}

func (x *EventMessage) GetIncident() *IncidentMessage {
	if x, ok := x.GetBody().(*EventMessage_Incident); ok {
		return x.Incident
	}
	return nil
}

func (x *EventMessage) GetMatchStatusChange() *MatchStatusChangeMessage {
	if x, ok := x.GetBody().(*EventMessage_MatchStatusChange); ok {
		return x.MatchStatusChange
	}
	return nil
}

func (x *EventMessage) GetMatchScoreChange() *MatchScoreChangeMessage {
	if x, ok := x.GetBody().(*EventMessage_MatchScoreChange); ok {
		return x.MatchScoreChange
	}
	return nil
}

func (x *EventMessage) GetMatchIncidentChange() *MatchIncidentChangeMessage {
	if x, ok := x.GetBody().(*EventMessage_MatchIncidentChange); ok {
		return x.MatchIncidentChange
	}
	return nil
}

func (x *EventMessage) GetMatchWinnerChange() *MatchWinnerChangeMessage {
	if x, ok := x.GetBody().(*EventMessage_MatchWinnerChange); ok {
		return x.MatchWinnerChange
	}
	return nil
}

func (x *EventMessage) GetMatchParticipantsChange() *MatchParticipantsChangeMessage {
	if x, ok := x.GetBody().(*EventMessage_MatchParticipantsChange); ok {
		return x.MatchParticipantsChange
	}
	return nil
}

func (x *EventMessage) GetMatchLineupChange() *MatchLineupChangeMessage {
	if x, ok := x.GetBody().(*EventMessage_MatchLineupChange); ok {
		return x.MatchLineupChange
	}
	return nil
}

func (x *EventMessage) GetMatchStatsMessage() *MatchStatsChangeMessage {
	if x, ok := x.GetBody().(*EventMessage_MatchStatsMessage); ok {
		return x.MatchStatsMessage
	}
	return nil
}

func (x *EventMessage) GetDeletedIncidentMessage() *DeleteIncidentMessage {
	if x, ok := x.GetBody().(*EventMessage_DeletedIncidentMessage); ok {
		return x.DeletedIncidentMessage
	}
	return nil
}

func (x *EventMessage) GetResponseMessage() *ResponseMessage {
	if x, ok := x.GetBody().(*EventMessage_ResponseMessage); ok {
		return x.ResponseMessage
	}
	return nil
}

func (x *EventMessage) GetHeartbeatMessage() *HeartbeatMessage {
	if x, ok := x.GetBody().(*EventMessage_HeartbeatMessage); ok {
		return x.HeartbeatMessage
	}
	return nil
}

func (x *EventMessage) GetLeagueTableMessageFull() *LeagueTableFullMessage {
	if x, ok := x.GetBody().(*EventMessage_LeagueTableMessageFull); ok {
		return x.LeagueTableMessageFull
	}
	return nil
}

func (x *EventMessage) GetTopScorerFullMessage() *TopScorerFullMessage {
	if x, ok := x.GetBody().(*EventMessage_TopScorerFullMessage); ok {
		return x.TopScorerFullMessage
	}
	return nil
}

func (x *EventMessage) GetH2HMatchesMessage() *H2HMatchesMessage {
	if x, ok := x.GetBody().(*EventMessage_H2HMatchesMessage); ok {
		return x.H2HMatchesMessage
	}
	return nil
}

func (x *EventMessage) GetBase64Image() *Base64ImageMessage {
	if x, ok := x.GetBody().(*EventMessage_Base64Image); ok {
		return x.Base64Image
	}
	return nil
}

func (x *EventMessage) GetImageFullMessage() *ImageFullMessage {
	if x, ok := x.GetBody().(*EventMessage_ImageFullMessage); ok {
		return x.ImageFullMessage
	}
	return nil
}

func (x *EventMessage) GetStageParticipantsStatisticsFullMessage() *StageParticipantsStatisticsFullMessage {
	if x, ok := x.GetBody().(*EventMessage_StageParticipantsStatisticsFullMessage); ok {
		return x.StageParticipantsStatisticsFullMessage
	}
	return nil
}

func (x *EventMessage) GetMatchOddsFullMessage() *MatchOddsFullMessage {
	if x, ok := x.GetBody().(*EventMessage_MatchOddsFullMessage); ok {
		return x.MatchOddsFullMessage
	}
	return nil
}

func (x *EventMessage) GetTeamPageMessage() *TeamPageMessage {
	if x, ok := x.GetBody().(*EventMessage_TeamPageMessage); ok {
		return x.TeamPageMessage
	}
	return nil
}

func (x *EventMessage) GetTeamPageFullMessage() *TeamPageFullMessage {
	if x, ok := x.GetBody().(*EventMessage_TeamPageFullMessage); ok {
		return x.TeamPageFullMessage
	}
	return nil
}

func (x *EventMessage) GetDrawFullMessage() *DrawFullMessage {
	if x, ok := x.GetBody().(*EventMessage_DrawFullMessage); ok {
		return x.DrawFullMessage
	}
	return nil
}

func (x *EventMessage) GetRankingsMessage() *RankingsMessage {
	if x, ok := x.GetBody().(*EventMessage_RankingsMessage); ok {
		return x.RankingsMessage
	}
	return nil
}

func (x *EventMessage) GetRankingsFullMessage() *RankingsFullMessage {
	if x, ok := x.GetBody().(*EventMessage_RankingsFullMessage); ok {
		return x.RankingsFullMessage
	}
	return nil
}

type isEventMessage_Body interface {
	isEventMessage_Body()
}

type EventMessage_Stage struct {
	// BASIC INFO
	Stage *StageMessage `protobuf:"bytes,2,opt,name=stage,proto3,oneof"`
}

type EventMessage_Commentary struct {
	Commentary *CommentaryMessage `protobuf:"bytes,3,opt,name=commentary,proto3,oneof"`
}

type EventMessage_MatchCommentaryAdd struct {
	MatchCommentaryAdd *AddCommentaryMessage `protobuf:"bytes,4,opt,name=matchCommentaryAdd,proto3,oneof"`
}

type EventMessage_ProviderStatus struct {
	ProviderStatus *ProviderStatusMessage `protobuf:"bytes,5,opt,name=providerStatus,proto3,oneof"`
}

type EventMessage_LeagueTable struct {
	// League table
	LeagueTable *LeagueTableMessage `protobuf:"bytes,6,opt,name=leagueTable,proto3,oneof"`
}

type EventMessage_TopScorer struct {
	// Top Scorer
	TopScorer *TopScorerMessage `protobuf:"bytes,7,opt,name=topScorer,proto3,oneof"`
}

type EventMessage_ScoutConnection struct {
	ScoutConnection *ScoutConnectionMessage `protobuf:"bytes,8,opt,name=scoutConnection,proto3,oneof"`
}

type EventMessage_WidgetEvent struct {
	WidgetEvent *WidgetEventMessage `protobuf:"bytes,9,opt,name=widgetEvent,proto3,oneof"`
}

type EventMessage_VarStatus struct {
	VarStatus *VarStatusMessage `protobuf:"bytes,10,opt,name=varStatus,proto3,oneof"`
}

type EventMessage_VarReason struct {
	VarReason *VarReasonMessage `protobuf:"bytes,11,opt,name=varReason,proto3,oneof"`
}

type EventMessage_FullMatchData struct {
	// API
	FullMatchData *FullMatchDataMessage `protobuf:"bytes,12,opt,name=fullMatchData,proto3,oneof"`
}

type EventMessage_MatchDeleted struct {
	MatchDeleted *MatchDeletedMessage `protobuf:"bytes,13,opt,name=matchDeleted,proto3,oneof"`
}

type EventMessage_Incident struct {
	Incident *IncidentMessage `protobuf:"bytes,14,opt,name=incident,proto3,oneof"`
}

type EventMessage_MatchStatusChange struct {
	MatchStatusChange *MatchStatusChangeMessage `protobuf:"bytes,15,opt,name=matchStatusChange,proto3,oneof"`
}

type EventMessage_MatchScoreChange struct {
	MatchScoreChange *MatchScoreChangeMessage `protobuf:"bytes,16,opt,name=matchScoreChange,proto3,oneof"`
}

type EventMessage_MatchIncidentChange struct {
	MatchIncidentChange *MatchIncidentChangeMessage `protobuf:"bytes,17,opt,name=matchIncidentChange,proto3,oneof"`
}

type EventMessage_MatchWinnerChange struct {
	MatchWinnerChange *MatchWinnerChangeMessage `protobuf:"bytes,18,opt,name=matchWinnerChange,proto3,oneof"`
}

type EventMessage_MatchParticipantsChange struct {
	MatchParticipantsChange *MatchParticipantsChangeMessage `protobuf:"bytes,19,opt,name=matchParticipantsChange,proto3,oneof"`
}

type EventMessage_MatchLineupChange struct {
	MatchLineupChange *MatchLineupChangeMessage `protobuf:"bytes,20,opt,name=matchLineupChange,proto3,oneof"`
}

type EventMessage_MatchStatsMessage struct {
	MatchStatsMessage *MatchStatsChangeMessage `protobuf:"bytes,21,opt,name=matchStatsMessage,proto3,oneof"`
}

type EventMessage_DeletedIncidentMessage struct {
	DeletedIncidentMessage *DeleteIncidentMessage `protobuf:"bytes,22,opt,name=deletedIncidentMessage,proto3,oneof"`
}

type EventMessage_ResponseMessage struct {
	ResponseMessage *ResponseMessage `protobuf:"bytes,23,opt,name=responseMessage,proto3,oneof"`
}

type EventMessage_HeartbeatMessage struct {
	HeartbeatMessage *HeartbeatMessage `protobuf:"bytes,24,opt,name=heartbeatMessage,proto3,oneof"`
}

type EventMessage_LeagueTableMessageFull struct {
	LeagueTableMessageFull *LeagueTableFullMessage `protobuf:"bytes,25,opt,name=leagueTableMessageFull,proto3,oneof"`
}

type EventMessage_TopScorerFullMessage struct {
	TopScorerFullMessage *TopScorerFullMessage `protobuf:"bytes,26,opt,name=topScorerFullMessage,proto3,oneof"`
}

type EventMessage_H2HMatchesMessage struct {
	H2HMatchesMessage *H2HMatchesMessage `protobuf:"bytes,27,opt,name=H2HMatchesMessage,proto3,oneof"`
}

type EventMessage_Base64Image struct {
	Base64Image *Base64ImageMessage `protobuf:"bytes,28,opt,name=base64image,proto3,oneof"`
}

type EventMessage_ImageFullMessage struct {
	ImageFullMessage *ImageFullMessage `protobuf:"bytes,29,opt,name=imageFullMessage,proto3,oneof"`
}

type EventMessage_StageParticipantsStatisticsFullMessage struct {
	StageParticipantsStatisticsFullMessage *StageParticipantsStatisticsFullMessage `protobuf:"bytes,30,opt,name=stageParticipantsStatisticsFullMessage,proto3,oneof"`
}

type EventMessage_MatchOddsFullMessage struct {
	MatchOddsFullMessage *MatchOddsFullMessage `protobuf:"bytes,31,opt,name=matchOddsFullMessage,proto3,oneof"`
}

type EventMessage_TeamPageMessage struct {
	TeamPageMessage *TeamPageMessage `protobuf:"bytes,32,opt,name=teamPageMessage,proto3,oneof"`
}

type EventMessage_TeamPageFullMessage struct {
	TeamPageFullMessage *TeamPageFullMessage `protobuf:"bytes,33,opt,name=teamPageFullMessage,proto3,oneof"`
}

type EventMessage_DrawFullMessage struct {
	DrawFullMessage *DrawFullMessage `protobuf:"bytes,34,opt,name=drawFullMessage,proto3,oneof"`
}

type EventMessage_RankingsMessage struct {
	RankingsMessage *RankingsMessage `protobuf:"bytes,35,opt,name=rankingsMessage,proto3,oneof"`
}

type EventMessage_RankingsFullMessage struct {
	RankingsFullMessage *RankingsFullMessage `protobuf:"bytes,36,opt,name=rankingsFullMessage,proto3,oneof"`
}

func (*EventMessage_Stage) isEventMessage_Body() {}

func (*EventMessage_Commentary) isEventMessage_Body() {}

func (*EventMessage_MatchCommentaryAdd) isEventMessage_Body() {}

func (*EventMessage_ProviderStatus) isEventMessage_Body() {}

func (*EventMessage_LeagueTable) isEventMessage_Body() {}

func (*EventMessage_TopScorer) isEventMessage_Body() {}

func (*EventMessage_ScoutConnection) isEventMessage_Body() {}

func (*EventMessage_WidgetEvent) isEventMessage_Body() {}

func (*EventMessage_VarStatus) isEventMessage_Body() {}

func (*EventMessage_VarReason) isEventMessage_Body() {}

func (*EventMessage_FullMatchData) isEventMessage_Body() {}

func (*EventMessage_MatchDeleted) isEventMessage_Body() {}

func (*EventMessage_Incident) isEventMessage_Body() {}

func (*EventMessage_MatchStatusChange) isEventMessage_Body() {}

func (*EventMessage_MatchScoreChange) isEventMessage_Body() {}

func (*EventMessage_MatchIncidentChange) isEventMessage_Body() {}

func (*EventMessage_MatchWinnerChange) isEventMessage_Body() {}

func (*EventMessage_MatchParticipantsChange) isEventMessage_Body() {}

func (*EventMessage_MatchLineupChange) isEventMessage_Body() {}

func (*EventMessage_MatchStatsMessage) isEventMessage_Body() {}

func (*EventMessage_DeletedIncidentMessage) isEventMessage_Body() {}

func (*EventMessage_ResponseMessage) isEventMessage_Body() {}

func (*EventMessage_HeartbeatMessage) isEventMessage_Body() {}

func (*EventMessage_LeagueTableMessageFull) isEventMessage_Body() {}

func (*EventMessage_TopScorerFullMessage) isEventMessage_Body() {}

func (*EventMessage_H2HMatchesMessage) isEventMessage_Body() {}

func (*EventMessage_Base64Image) isEventMessage_Body() {}

func (*EventMessage_ImageFullMessage) isEventMessage_Body() {}

func (*EventMessage_StageParticipantsStatisticsFullMessage) isEventMessage_Body() {}

func (*EventMessage_MatchOddsFullMessage) isEventMessage_Body() {}

func (*EventMessage_TeamPageMessage) isEventMessage_Body() {}

func (*EventMessage_TeamPageFullMessage) isEventMessage_Body() {}

func (*EventMessage_DrawFullMessage) isEventMessage_Body() {}

func (*EventMessage_RankingsMessage) isEventMessage_Body() {}

func (*EventMessage_RankingsFullMessage) isEventMessage_Body() {}

var File_envelope_proto protoreflect.FileDescriptor

var file_envelope_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x09, 0x76, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x68,
	0x32, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0a, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96,
	0x02, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x52, 0x70, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x54, 0x73, 0x22, 0x5c, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54,
	0x73, 0x22, 0x51, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0xa8, 0x17, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x12, 0x4f, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x6c, 0x69, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0b,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c,
	0x69, 0x62, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x6f, 0x70,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x2e, 0x53, 0x63, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x66, 0x75, 0x6c, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x3d, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c,
	0x69, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x58,
	0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x5e, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x58, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69,
	0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x57, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x6c, 0x69, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69,
	0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x16, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x16, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x14, 0x74, 0x6f, 0x70, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x72, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14,
	0x74, 0x6f, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x48, 0x32, 0x48, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x2e, 0x48, 0x32, 0x48, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x48, 0x32, 0x48, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x4e, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x26, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x75, 0x6c,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x26, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x64, 0x64, 0x73, 0x46,
	0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69,
	0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x64, 0x64, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x64, 0x64, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b,
	0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d,
	0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x74,
	0x65, 0x61, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61,
	0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6c, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x44,
	0x72, 0x61, 0x77, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57,
	0x0a, 0x13, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x75, 0x6c, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42,
	0x2f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envelope_proto_rawDescOnce sync.Once
	file_envelope_proto_rawDescData = file_envelope_proto_rawDesc
)

func file_envelope_proto_rawDescGZIP() []byte {
	file_envelope_proto_rawDescOnce.Do(func() {
		file_envelope_proto_rawDescData = protoimpl.X.CompressGZIP(file_envelope_proto_rawDescData)
	})
	return file_envelope_proto_rawDescData
}

var file_envelope_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_envelope_proto_goTypes = []interface{}{
	(*Headers)(nil),                                // 0: com.sts.rpclib.Headers
	(*ResponseMessage)(nil),                        // 1: com.sts.rpclib.ResponseMessage
	(*HeartbeatMessage)(nil),                       // 2: com.sts.rpclib.HeartbeatMessage
	(*CommandRequestMessage)(nil),                  // 3: com.sts.rpclib.CommandRequestMessage
	(*EventMessage)(nil),                           // 4: com.sts.rpclib.EventMessage
	(Provider)(0),                                  // 5: com.sts.rpclib.Provider
	(Sport)(0),                                     // 6: com.sts.rpclib.Sport
	(MessageType)(0),                               // 7: com.sts.rpclib.MessageType
	(RpcResponseStatus)(0),                         // 8: com.sts.rpclib.RpcResponseStatus
	(*StageMessage)(nil),                           // 9: com.sts.rpclib.StageMessage
	(*CommentaryMessage)(nil),                      // 10: com.sts.rpclib.CommentaryMessage
	(*AddCommentaryMessage)(nil),                   // 11: com.sts.rpclib.AddCommentaryMessage
	(*ProviderStatusMessage)(nil),                  // 12: com.sts.rpclib.ProviderStatusMessage
	(*LeagueTableMessage)(nil),                     // 13: com.sts.rpclib.LeagueTableMessage
	(*TopScorerMessage)(nil),                       // 14: com.sts.rpclib.TopScorerMessage
	(*ScoutConnectionMessage)(nil),                 // 15: com.sts.rpclib.ScoutConnectionMessage
	(*WidgetEventMessage)(nil),                     // 16: com.sts.rpclib.WidgetEventMessage
	(*VarStatusMessage)(nil),                       // 17: com.sts.rpclib.VarStatusMessage
	(*VarReasonMessage)(nil),                       // 18: com.sts.rpclib.VarReasonMessage
	(*FullMatchDataMessage)(nil),                   // 19: com.sts.rpclib.FullMatchDataMessage
	(*MatchDeletedMessage)(nil),                    // 20: com.sts.rpclib.MatchDeletedMessage
	(*IncidentMessage)(nil),                        // 21: com.sts.rpclib.IncidentMessage
	(*MatchStatusChangeMessage)(nil),               // 22: com.sts.rpclib.MatchStatusChangeMessage
	(*MatchScoreChangeMessage)(nil),                // 23: com.sts.rpclib.MatchScoreChangeMessage
	(*MatchIncidentChangeMessage)(nil),             // 24: com.sts.rpclib.MatchIncidentChangeMessage
	(*MatchWinnerChangeMessage)(nil),               // 25: com.sts.rpclib.MatchWinnerChangeMessage
	(*MatchParticipantsChangeMessage)(nil),         // 26: com.sts.rpclib.MatchParticipantsChangeMessage
	(*MatchLineupChangeMessage)(nil),               // 27: com.sts.rpclib.MatchLineupChangeMessage
	(*MatchStatsChangeMessage)(nil),                // 28: com.sts.rpclib.MatchStatsChangeMessage
	(*DeleteIncidentMessage)(nil),                  // 29: com.sts.rpclib.DeleteIncidentMessage
	(*LeagueTableFullMessage)(nil),                 // 30: com.sts.rpclib.LeagueTableFullMessage
	(*TopScorerFullMessage)(nil),                   // 31: com.sts.rpclib.TopScorerFullMessage
	(*H2HMatchesMessage)(nil),                      // 32: com.sts.rpclib.H2HMatchesMessage
	(*Base64ImageMessage)(nil),                     // 33: com.sts.rpclib.Base64ImageMessage
	(*ImageFullMessage)(nil),                       // 34: com.sts.rpclib.ImageFullMessage
	(*StageParticipantsStatisticsFullMessage)(nil), // 35: com.sts.rpclib.StageParticipantsStatisticsFullMessage
	(*MatchOddsFullMessage)(nil),                   // 36: com.sts.rpclib.MatchOddsFullMessage
	(*TeamPageMessage)(nil),                        // 37: com.sts.rpclib.TeamPageMessage
	(*TeamPageFullMessage)(nil),                    // 38: com.sts.rpclib.TeamPageFullMessage
	(*DrawFullMessage)(nil),                        // 39: com.sts.rpclib.DrawFullMessage
	(*RankingsMessage)(nil),                        // 40: com.sts.rpclib.RankingsMessage
	(*RankingsFullMessage)(nil),                    // 41: com.sts.rpclib.RankingsFullMessage
}
var file_envelope_proto_depIdxs = []int32{
	5,  // 0: com.sts.rpclib.Headers.provider:type_name -> com.sts.rpclib.Provider
	6,  // 1: com.sts.rpclib.Headers.sport:type_name -> com.sts.rpclib.Sport
	7,  // 2: com.sts.rpclib.Headers.message_type:type_name -> com.sts.rpclib.MessageType
	8,  // 3: com.sts.rpclib.ResponseMessage.status:type_name -> com.sts.rpclib.RpcResponseStatus
	0,  // 4: com.sts.rpclib.ResponseMessage.header:type_name -> com.sts.rpclib.Headers
	0,  // 5: com.sts.rpclib.EventMessage.headers:type_name -> com.sts.rpclib.Headers
	9,  // 6: com.sts.rpclib.EventMessage.stage:type_name -> com.sts.rpclib.StageMessage
	10, // 7: com.sts.rpclib.EventMessage.commentary:type_name -> com.sts.rpclib.CommentaryMessage
	11, // 8: com.sts.rpclib.EventMessage.matchCommentaryAdd:type_name -> com.sts.rpclib.AddCommentaryMessage
	12, // 9: com.sts.rpclib.EventMessage.providerStatus:type_name -> com.sts.rpclib.ProviderStatusMessage
	13, // 10: com.sts.rpclib.EventMessage.leagueTable:type_name -> com.sts.rpclib.LeagueTableMessage
	14, // 11: com.sts.rpclib.EventMessage.topScorer:type_name -> com.sts.rpclib.TopScorerMessage
	15, // 12: com.sts.rpclib.EventMessage.scoutConnection:type_name -> com.sts.rpclib.ScoutConnectionMessage
	16, // 13: com.sts.rpclib.EventMessage.widgetEvent:type_name -> com.sts.rpclib.WidgetEventMessage
	17, // 14: com.sts.rpclib.EventMessage.varStatus:type_name -> com.sts.rpclib.VarStatusMessage
	18, // 15: com.sts.rpclib.EventMessage.varReason:type_name -> com.sts.rpclib.VarReasonMessage
	19, // 16: com.sts.rpclib.EventMessage.fullMatchData:type_name -> com.sts.rpclib.FullMatchDataMessage
	20, // 17: com.sts.rpclib.EventMessage.matchDeleted:type_name -> com.sts.rpclib.MatchDeletedMessage
	21, // 18: com.sts.rpclib.EventMessage.incident:type_name -> com.sts.rpclib.IncidentMessage
	22, // 19: com.sts.rpclib.EventMessage.matchStatusChange:type_name -> com.sts.rpclib.MatchStatusChangeMessage
	23, // 20: com.sts.rpclib.EventMessage.matchScoreChange:type_name -> com.sts.rpclib.MatchScoreChangeMessage
	24, // 21: com.sts.rpclib.EventMessage.matchIncidentChange:type_name -> com.sts.rpclib.MatchIncidentChangeMessage
	25, // 22: com.sts.rpclib.EventMessage.matchWinnerChange:type_name -> com.sts.rpclib.MatchWinnerChangeMessage
	26, // 23: com.sts.rpclib.EventMessage.matchParticipantsChange:type_name -> com.sts.rpclib.MatchParticipantsChangeMessage
	27, // 24: com.sts.rpclib.EventMessage.matchLineupChange:type_name -> com.sts.rpclib.MatchLineupChangeMessage
	28, // 25: com.sts.rpclib.EventMessage.matchStatsMessage:type_name -> com.sts.rpclib.MatchStatsChangeMessage
	29, // 26: com.sts.rpclib.EventMessage.deletedIncidentMessage:type_name -> com.sts.rpclib.DeleteIncidentMessage
	1,  // 27: com.sts.rpclib.EventMessage.responseMessage:type_name -> com.sts.rpclib.ResponseMessage
	2,  // 28: com.sts.rpclib.EventMessage.heartbeatMessage:type_name -> com.sts.rpclib.HeartbeatMessage
	30, // 29: com.sts.rpclib.EventMessage.leagueTableMessageFull:type_name -> com.sts.rpclib.LeagueTableFullMessage
	31, // 30: com.sts.rpclib.EventMessage.topScorerFullMessage:type_name -> com.sts.rpclib.TopScorerFullMessage
	32, // 31: com.sts.rpclib.EventMessage.H2HMatchesMessage:type_name -> com.sts.rpclib.H2HMatchesMessage
	33, // 32: com.sts.rpclib.EventMessage.base64image:type_name -> com.sts.rpclib.Base64ImageMessage
	34, // 33: com.sts.rpclib.EventMessage.imageFullMessage:type_name -> com.sts.rpclib.ImageFullMessage
	35, // 34: com.sts.rpclib.EventMessage.stageParticipantsStatisticsFullMessage:type_name -> com.sts.rpclib.StageParticipantsStatisticsFullMessage
	36, // 35: com.sts.rpclib.EventMessage.matchOddsFullMessage:type_name -> com.sts.rpclib.MatchOddsFullMessage
	37, // 36: com.sts.rpclib.EventMessage.teamPageMessage:type_name -> com.sts.rpclib.TeamPageMessage
	38, // 37: com.sts.rpclib.EventMessage.teamPageFullMessage:type_name -> com.sts.rpclib.TeamPageFullMessage
	39, // 38: com.sts.rpclib.EventMessage.drawFullMessage:type_name -> com.sts.rpclib.DrawFullMessage
	40, // 39: com.sts.rpclib.EventMessage.rankingsMessage:type_name -> com.sts.rpclib.RankingsMessage
	41, // 40: com.sts.rpclib.EventMessage.rankingsFullMessage:type_name -> com.sts.rpclib.RankingsFullMessage
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_envelope_proto_init() }
func file_envelope_proto_init() {
	if File_envelope_proto != nil {
		return
	}
	file_enums_proto_init()
	file_sports_proto_init()
	file_match_proto_init()
	file_incident_proto_init()
	file_providers_proto_init()
	file_stages_proto_init()
	file_top_scorer_proto_init()
	file_league_tables_proto_init()
	file_rankings_proto_init()
	file_widget_event_proto_init()
	file_var_proto_init()
	file_h2h_proto_init()
	file_image_proto_init()
	file_odds_proto_init()
	file_team_page_proto_init()
	file_draw_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_envelope_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envelope_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envelope_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envelope_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envelope_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_envelope_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*EventMessage_Stage)(nil),
		(*EventMessage_Commentary)(nil),
		(*EventMessage_MatchCommentaryAdd)(nil),
		(*EventMessage_ProviderStatus)(nil),
		(*EventMessage_LeagueTable)(nil),
		(*EventMessage_TopScorer)(nil),
		(*EventMessage_ScoutConnection)(nil),
		(*EventMessage_WidgetEvent)(nil),
		(*EventMessage_VarStatus)(nil),
		(*EventMessage_VarReason)(nil),
		(*EventMessage_FullMatchData)(nil),
		(*EventMessage_MatchDeleted)(nil),
		(*EventMessage_Incident)(nil),
		(*EventMessage_MatchStatusChange)(nil),
		(*EventMessage_MatchScoreChange)(nil),
		(*EventMessage_MatchIncidentChange)(nil),
		(*EventMessage_MatchWinnerChange)(nil),
		(*EventMessage_MatchParticipantsChange)(nil),
		(*EventMessage_MatchLineupChange)(nil),
		(*EventMessage_MatchStatsMessage)(nil),
		(*EventMessage_DeletedIncidentMessage)(nil),
		(*EventMessage_ResponseMessage)(nil),
		(*EventMessage_HeartbeatMessage)(nil),
		(*EventMessage_LeagueTableMessageFull)(nil),
		(*EventMessage_TopScorerFullMessage)(nil),
		(*EventMessage_H2HMatchesMessage)(nil),
		(*EventMessage_Base64Image)(nil),
		(*EventMessage_ImageFullMessage)(nil),
		(*EventMessage_StageParticipantsStatisticsFullMessage)(nil),
		(*EventMessage_MatchOddsFullMessage)(nil),
		(*EventMessage_TeamPageMessage)(nil),
		(*EventMessage_TeamPageFullMessage)(nil),
		(*EventMessage_DrawFullMessage)(nil),
		(*EventMessage_RankingsMessage)(nil),
		(*EventMessage_RankingsFullMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envelope_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envelope_proto_goTypes,
		DependencyIndexes: file_envelope_proto_depIdxs,
		MessageInfos:      file_envelope_proto_msgTypes,
	}.Build()
	File_envelope_proto = out.File
	file_envelope_proto_rawDesc = nil
	file_envelope_proto_goTypes = nil
	file_envelope_proto_depIdxs = nil
}
