// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

package com.sts.rpclib;

/**
 * Protobuf enum {@code com.sts.rpclib.StatsType}
 */
public enum StatsType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN_STAT = 0;</code>
   */
  UNKNOWN_STAT(0),
  /**
   * <code>FOUL_STAT = 1;</code>
   */
  FOUL_STAT(1),
  /**
   * <code>THROW_IN_STAT = 2;</code>
   */
  THROW_IN_STAT(2),
  /**
   * <code>OFFSIDE_STAT = 3;</code>
   */
  OFFSIDE_STAT(3),
  /**
   * <code>POSSESSION_STAT = 4;</code>
   */
  POSSESSION_STAT(4),
  /**
   * <code>CROSS_STAT = 5;</code>
   */
  CROSS_STAT(5),
  /**
   * <code>CORNER_STAT = 6;</code>
   */
  CORNER_STAT(6),
  /**
   * <code>YELLOW_CARD_STAT = 7;</code>
   */
  YELLOW_CARD_STAT(7),
  /**
   * <code>RED_CARD_STAT = 8;</code>
   */
  RED_CARD_STAT(8),
  /**
   * <code>YELLOW_RED_CARD_STAT = 9;</code>
   */
  YELLOW_RED_CARD_STAT(9),
  /**
   * <code>SHOT_ON_STAT = 10;</code>
   */
  SHOT_ON_STAT(10),
  /**
   * <code>SHOT_OFF_STAT = 11;</code>
   */
  SHOT_OFF_STAT(11),
  /**
   * <code>SHOT_WOOD_STAT = 12;</code>
   */
  SHOT_WOOD_STAT(12),
  /**
   * <code>BLOCKED_SHOT_STAT = 13;</code>
   */
  BLOCKED_SHOT_STAT(13),
  /**
   * <code>COUNTER_ATTACK_STAT = 14;</code>
   */
  COUNTER_ATTACK_STAT(14),
  /**
   * <code>GOALKEEPER_SAVE_STAT = 15;</code>
   */
  GOALKEEPER_SAVE_STAT(15),
  /**
   * <code>GOAL_KICK_STAT = 16;</code>
   */
  GOAL_KICK_STAT(16),
  /**
   * <code>FREE_KICK_STAT = 17;</code>
   */
  FREE_KICK_STAT(17),
  /**
   * <code>TREATMENT_STAT = 18;</code>
   */
  TREATMENT_STAT(18),
  /**
   * <code>ATTACK_STAT = 19;</code>
   */
  ATTACK_STAT(19),
  /**
   * <code>DANGEROUS_FREE_KICK_STAT = 20;</code>
   */
  DANGEROUS_FREE_KICK_STAT(20),
  /**
   * <code>DANGEROUS_ATTACK_STAT = 21;</code>
   */
  DANGEROUS_ATTACK_STAT(21),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN_STAT = 0;</code>
   */
  public static final int UNKNOWN_STAT_VALUE = 0;
  /**
   * <code>FOUL_STAT = 1;</code>
   */
  public static final int FOUL_STAT_VALUE = 1;
  /**
   * <code>THROW_IN_STAT = 2;</code>
   */
  public static final int THROW_IN_STAT_VALUE = 2;
  /**
   * <code>OFFSIDE_STAT = 3;</code>
   */
  public static final int OFFSIDE_STAT_VALUE = 3;
  /**
   * <code>POSSESSION_STAT = 4;</code>
   */
  public static final int POSSESSION_STAT_VALUE = 4;
  /**
   * <code>CROSS_STAT = 5;</code>
   */
  public static final int CROSS_STAT_VALUE = 5;
  /**
   * <code>CORNER_STAT = 6;</code>
   */
  public static final int CORNER_STAT_VALUE = 6;
  /**
   * <code>YELLOW_CARD_STAT = 7;</code>
   */
  public static final int YELLOW_CARD_STAT_VALUE = 7;
  /**
   * <code>RED_CARD_STAT = 8;</code>
   */
  public static final int RED_CARD_STAT_VALUE = 8;
  /**
   * <code>YELLOW_RED_CARD_STAT = 9;</code>
   */
  public static final int YELLOW_RED_CARD_STAT_VALUE = 9;
  /**
   * <code>SHOT_ON_STAT = 10;</code>
   */
  public static final int SHOT_ON_STAT_VALUE = 10;
  /**
   * <code>SHOT_OFF_STAT = 11;</code>
   */
  public static final int SHOT_OFF_STAT_VALUE = 11;
  /**
   * <code>SHOT_WOOD_STAT = 12;</code>
   */
  public static final int SHOT_WOOD_STAT_VALUE = 12;
  /**
   * <code>BLOCKED_SHOT_STAT = 13;</code>
   */
  public static final int BLOCKED_SHOT_STAT_VALUE = 13;
  /**
   * <code>COUNTER_ATTACK_STAT = 14;</code>
   */
  public static final int COUNTER_ATTACK_STAT_VALUE = 14;
  /**
   * <code>GOALKEEPER_SAVE_STAT = 15;</code>
   */
  public static final int GOALKEEPER_SAVE_STAT_VALUE = 15;
  /**
   * <code>GOAL_KICK_STAT = 16;</code>
   */
  public static final int GOAL_KICK_STAT_VALUE = 16;
  /**
   * <code>FREE_KICK_STAT = 17;</code>
   */
  public static final int FREE_KICK_STAT_VALUE = 17;
  /**
   * <code>TREATMENT_STAT = 18;</code>
   */
  public static final int TREATMENT_STAT_VALUE = 18;
  /**
   * <code>ATTACK_STAT = 19;</code>
   */
  public static final int ATTACK_STAT_VALUE = 19;
  /**
   * <code>DANGEROUS_FREE_KICK_STAT = 20;</code>
   */
  public static final int DANGEROUS_FREE_KICK_STAT_VALUE = 20;
  /**
   * <code>DANGEROUS_ATTACK_STAT = 21;</code>
   */
  public static final int DANGEROUS_ATTACK_STAT_VALUE = 21;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static StatsType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static StatsType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_STAT;
      case 1: return FOUL_STAT;
      case 2: return THROW_IN_STAT;
      case 3: return OFFSIDE_STAT;
      case 4: return POSSESSION_STAT;
      case 5: return CROSS_STAT;
      case 6: return CORNER_STAT;
      case 7: return YELLOW_CARD_STAT;
      case 8: return RED_CARD_STAT;
      case 9: return YELLOW_RED_CARD_STAT;
      case 10: return SHOT_ON_STAT;
      case 11: return SHOT_OFF_STAT;
      case 12: return SHOT_WOOD_STAT;
      case 13: return BLOCKED_SHOT_STAT;
      case 14: return COUNTER_ATTACK_STAT;
      case 15: return GOALKEEPER_SAVE_STAT;
      case 16: return GOAL_KICK_STAT;
      case 17: return FREE_KICK_STAT;
      case 18: return TREATMENT_STAT;
      case 19: return ATTACK_STAT;
      case 20: return DANGEROUS_FREE_KICK_STAT;
      case 21: return DANGEROUS_ATTACK_STAT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<StatsType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      StatsType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<StatsType>() {
          public StatsType findValueByNumber(int number) {
            return StatsType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.sts.rpclib.Enums.getDescriptor().getEnumTypes().get(5);
  }

  private static final StatsType[] VALUES = values();

  public static StatsType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private StatsType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.sts.rpclib.StatsType)
}

