// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

package com.sts.rpclib;

/**
 * Protobuf enum {@code com.sts.rpclib.IncidentType}
 */
public enum IncidentType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN_INCIDENT = 0;</code>
   */
  UNKNOWN_INCIDENT(0),
  /**
   * <code>SUBSTITUTION = 1;</code>
   */
  SUBSTITUTION(1),
  /**
   * <code>SUBSTITUTION_OUT = 2;</code>
   */
  SUBSTITUTION_OUT(2),
  /**
   * <code>SUBSTITUTION_IN = 3;</code>
   */
  SUBSTITUTION_IN(3),
  /**
   * <code>REGULAR_GOAL = 4;</code>
   */
  REGULAR_GOAL(4),
  /**
   * <code>PENALTY = 5;</code>
   */
  PENALTY(5),
  /**
   * <code>MISSED_PENALTY = 6;</code>
   */
  MISSED_PENALTY(6),
  /**
   * <code>OWN_GOAL = 7;</code>
   */
  OWN_GOAL(7),
  /**
   * <code>SHOOTOUT_MISSED_PENALTY = 8;</code>
   */
  SHOOTOUT_MISSED_PENALTY(8),
  /**
   * <code>SHOOTOUT_PENALTY = 9;</code>
   */
  SHOOTOUT_PENALTY(9),
  /**
   * <code>YELLOW_CARD = 10;</code>
   */
  YELLOW_CARD(10),
  /**
   * <code>SECOND_YELLOW_CARD = 11;</code>
   */
  SECOND_YELLOW_CARD(11),
  /**
   * <code>RED_CARD = 12;</code>
   */
  RED_CARD(12),
  /**
   * <code>EXTRA_TIME_GOAL = 13;</code>
   */
  EXTRA_TIME_GOAL(13),
  /**
   * <code>EXTRA_TIME_OWN_GOAL = 14;</code>
   */
  EXTRA_TIME_OWN_GOAL(14),
  /**
   * <code>CANCELED_GOAL = 15;</code>
   */
  CANCELED_GOAL(15),
  /**
   * <code>ASSIST = 16;</code>
   */
  ASSIST(16),
  /**
   * <code>SECOND_ASSIST = 17;</code>
   */
  SECOND_ASSIST(17),
  /**
   * <code>CANCELED_PENALTY = 18;</code>
   */
  CANCELED_PENALTY(18),
  /**
   * <code>CANCELED_RED_CARD = 19;</code>
   */
  CANCELED_RED_CARD(19),
  /**
   * <code>CANCELED_YELLOW_CARD = 20;</code>
   */
  CANCELED_YELLOW_CARD(20),
  /**
   * <code>CANCELED_SECOND_YELLOW_CARD = 21;</code>
   */
  CANCELED_SECOND_YELLOW_CARD(21),
  /**
   * <code>VAR = 22;</code>
   */
  VAR(22),
  /**
   * <code>PENALTY_AWARDED = 23;</code>
   */
  PENALTY_AWARDED(23),
  /**
   * <code>CORNER_KICK = 24;</code>
   */
  CORNER_KICK(24),
  /**
   * <pre>
   * this is common with RBALL
   * </pre>
   *
   * <code>INCIDENT_CONFIRMED = 25;</code>
   */
  INCIDENT_CONFIRMED(25),
  /**
   * <code>VAR_CANCELLED_GOAL = 26;</code>
   */
  VAR_CANCELLED_GOAL(26),
  /**
   * <code>VAR_CANCELLED_PENALTY_GOAL = 28;</code>
   */
  VAR_CANCELLED_PENALTY_GOAL(28),
  /**
   * <code>TWO_MINUTES_SUSPENSION = 29;</code>
   */
  TWO_MINUTES_SUSPENSION(29),
  /**
   * <code>FIVE_MINUTES_SUSPENSION = 30;</code>
   */
  FIVE_MINUTES_SUSPENSION(30),
  /**
   * <code>TEN_MINUTES_SUSPENSION = 31;</code>
   */
  TEN_MINUTES_SUSPENSION(31),
  /**
   * <code>SHORT_HANDED_GOAL = 32;</code>
   */
  SHORT_HANDED_GOAL(32),
  /**
   * <code>POWER_PLAY_GOAL = 33;</code>
   */
  POWER_PLAY_GOAL(33),
  /**
   * <pre>
   * RUGBY
   * </pre>
   *
   * <code>TRY_GOAL = 34;</code>
   */
  TRY_GOAL(34),
  /**
   * <code>CONVERSION_GOAL = 35;</code>
   */
  CONVERSION_GOAL(35),
  /**
   * <code>DROPKICK_GOAL = 36;</code>
   */
  DROPKICK_GOAL(36),
  /**
   * <code>PENALTY_TRY_GOAL = 37;</code>
   */
  PENALTY_TRY_GOAL(37),
  /**
   * <code>PENALTY_TRY_CONVERSION_GOAL = 38;</code>
   */
  PENALTY_TRY_CONVERSION_GOAL(38),
  /**
   * <code>TWENTY_MINUTES_SUSPENSION = 39;</code>
   */
  TWENTY_MINUTES_SUSPENSION(39),
  /**
   * <code>GOLDEN_POINT_TRY_GOAL = 40;</code>
   */
  GOLDEN_POINT_TRY_GOAL(40),
  /**
   * <code>GOLDEN_POINT_PENALTY_GOAL = 41;</code>
   */
  GOLDEN_POINT_PENALTY_GOAL(41),
  /**
   * <code>GOLDEN_POINT_DROPKICK_GOAL = 42;</code>
   */
  GOLDEN_POINT_DROPKICK_GOAL(42),
  /**
   * <code>TWENTY_FIVE_MINUTES_SUSPENSION = 43;</code>
   */
  TWENTY_FIVE_MINUTES_SUSPENSION(43),
  /**
   * <code>TWO_MINUTES_BENCH_SUSPENSION = 44;</code>
   */
  TWO_MINUTES_BENCH_SUSPENSION(44),
  /**
   * <code>SINGLE_POINT_GOAL = 45;</code>
   */
  SINGLE_POINT_GOAL(45),
  /**
   * <code>EXTRA_TIME_TRY_GOAL = 46;</code>
   */
  EXTRA_TIME_TRY_GOAL(46),
  /**
   * <code>EXTRA_TIME_PENALTY_GOAL = 47;</code>
   */
  EXTRA_TIME_PENALTY_GOAL(47),
  /**
   * <code>EXTRA_TIME_CONVERSION_GOAL = 48;</code>
   */
  EXTRA_TIME_CONVERSION_GOAL(48),
  /**
   * <code>EXTRA_TIME_PENALTY_TRY_GOAL = 49;</code>
   */
  EXTRA_TIME_PENALTY_TRY_GOAL(49),
  /**
   * <code>EXTRA_TIME_DROPKICK_GOAL = 50;</code>
   */
  EXTRA_TIME_DROPKICK_GOAL(50),
  /**
   * <code>DEFENSIVE_TWO_POINT_CONVERSION_GOAL = 51;</code>
   */
  DEFENSIVE_TWO_POINT_CONVERSION_GOAL(51),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN_INCIDENT = 0;</code>
   */
  public static final int UNKNOWN_INCIDENT_VALUE = 0;
  /**
   * <code>SUBSTITUTION = 1;</code>
   */
  public static final int SUBSTITUTION_VALUE = 1;
  /**
   * <code>SUBSTITUTION_OUT = 2;</code>
   */
  public static final int SUBSTITUTION_OUT_VALUE = 2;
  /**
   * <code>SUBSTITUTION_IN = 3;</code>
   */
  public static final int SUBSTITUTION_IN_VALUE = 3;
  /**
   * <code>REGULAR_GOAL = 4;</code>
   */
  public static final int REGULAR_GOAL_VALUE = 4;
  /**
   * <code>PENALTY = 5;</code>
   */
  public static final int PENALTY_VALUE = 5;
  /**
   * <code>MISSED_PENALTY = 6;</code>
   */
  public static final int MISSED_PENALTY_VALUE = 6;
  /**
   * <code>OWN_GOAL = 7;</code>
   */
  public static final int OWN_GOAL_VALUE = 7;
  /**
   * <code>SHOOTOUT_MISSED_PENALTY = 8;</code>
   */
  public static final int SHOOTOUT_MISSED_PENALTY_VALUE = 8;
  /**
   * <code>SHOOTOUT_PENALTY = 9;</code>
   */
  public static final int SHOOTOUT_PENALTY_VALUE = 9;
  /**
   * <code>YELLOW_CARD = 10;</code>
   */
  public static final int YELLOW_CARD_VALUE = 10;
  /**
   * <code>SECOND_YELLOW_CARD = 11;</code>
   */
  public static final int SECOND_YELLOW_CARD_VALUE = 11;
  /**
   * <code>RED_CARD = 12;</code>
   */
  public static final int RED_CARD_VALUE = 12;
  /**
   * <code>EXTRA_TIME_GOAL = 13;</code>
   */
  public static final int EXTRA_TIME_GOAL_VALUE = 13;
  /**
   * <code>EXTRA_TIME_OWN_GOAL = 14;</code>
   */
  public static final int EXTRA_TIME_OWN_GOAL_VALUE = 14;
  /**
   * <code>CANCELED_GOAL = 15;</code>
   */
  public static final int CANCELED_GOAL_VALUE = 15;
  /**
   * <code>ASSIST = 16;</code>
   */
  public static final int ASSIST_VALUE = 16;
  /**
   * <code>SECOND_ASSIST = 17;</code>
   */
  public static final int SECOND_ASSIST_VALUE = 17;
  /**
   * <code>CANCELED_PENALTY = 18;</code>
   */
  public static final int CANCELED_PENALTY_VALUE = 18;
  /**
   * <code>CANCELED_RED_CARD = 19;</code>
   */
  public static final int CANCELED_RED_CARD_VALUE = 19;
  /**
   * <code>CANCELED_YELLOW_CARD = 20;</code>
   */
  public static final int CANCELED_YELLOW_CARD_VALUE = 20;
  /**
   * <code>CANCELED_SECOND_YELLOW_CARD = 21;</code>
   */
  public static final int CANCELED_SECOND_YELLOW_CARD_VALUE = 21;
  /**
   * <code>VAR = 22;</code>
   */
  public static final int VAR_VALUE = 22;
  /**
   * <code>PENALTY_AWARDED = 23;</code>
   */
  public static final int PENALTY_AWARDED_VALUE = 23;
  /**
   * <code>CORNER_KICK = 24;</code>
   */
  public static final int CORNER_KICK_VALUE = 24;
  /**
   * <pre>
   * this is common with RBALL
   * </pre>
   *
   * <code>INCIDENT_CONFIRMED = 25;</code>
   */
  public static final int INCIDENT_CONFIRMED_VALUE = 25;
  /**
   * <code>VAR_CANCELLED_GOAL = 26;</code>
   */
  public static final int VAR_CANCELLED_GOAL_VALUE = 26;
  /**
   * <code>VAR_CANCELLED_PENALTY_GOAL = 28;</code>
   */
  public static final int VAR_CANCELLED_PENALTY_GOAL_VALUE = 28;
  /**
   * <code>TWO_MINUTES_SUSPENSION = 29;</code>
   */
  public static final int TWO_MINUTES_SUSPENSION_VALUE = 29;
  /**
   * <code>FIVE_MINUTES_SUSPENSION = 30;</code>
   */
  public static final int FIVE_MINUTES_SUSPENSION_VALUE = 30;
  /**
   * <code>TEN_MINUTES_SUSPENSION = 31;</code>
   */
  public static final int TEN_MINUTES_SUSPENSION_VALUE = 31;
  /**
   * <code>SHORT_HANDED_GOAL = 32;</code>
   */
  public static final int SHORT_HANDED_GOAL_VALUE = 32;
  /**
   * <code>POWER_PLAY_GOAL = 33;</code>
   */
  public static final int POWER_PLAY_GOAL_VALUE = 33;
  /**
   * <pre>
   * RUGBY
   * </pre>
   *
   * <code>TRY_GOAL = 34;</code>
   */
  public static final int TRY_GOAL_VALUE = 34;
  /**
   * <code>CONVERSION_GOAL = 35;</code>
   */
  public static final int CONVERSION_GOAL_VALUE = 35;
  /**
   * <code>DROPKICK_GOAL = 36;</code>
   */
  public static final int DROPKICK_GOAL_VALUE = 36;
  /**
   * <code>PENALTY_TRY_GOAL = 37;</code>
   */
  public static final int PENALTY_TRY_GOAL_VALUE = 37;
  /**
   * <code>PENALTY_TRY_CONVERSION_GOAL = 38;</code>
   */
  public static final int PENALTY_TRY_CONVERSION_GOAL_VALUE = 38;
  /**
   * <code>TWENTY_MINUTES_SUSPENSION = 39;</code>
   */
  public static final int TWENTY_MINUTES_SUSPENSION_VALUE = 39;
  /**
   * <code>GOLDEN_POINT_TRY_GOAL = 40;</code>
   */
  public static final int GOLDEN_POINT_TRY_GOAL_VALUE = 40;
  /**
   * <code>GOLDEN_POINT_PENALTY_GOAL = 41;</code>
   */
  public static final int GOLDEN_POINT_PENALTY_GOAL_VALUE = 41;
  /**
   * <code>GOLDEN_POINT_DROPKICK_GOAL = 42;</code>
   */
  public static final int GOLDEN_POINT_DROPKICK_GOAL_VALUE = 42;
  /**
   * <code>TWENTY_FIVE_MINUTES_SUSPENSION = 43;</code>
   */
  public static final int TWENTY_FIVE_MINUTES_SUSPENSION_VALUE = 43;
  /**
   * <code>TWO_MINUTES_BENCH_SUSPENSION = 44;</code>
   */
  public static final int TWO_MINUTES_BENCH_SUSPENSION_VALUE = 44;
  /**
   * <code>SINGLE_POINT_GOAL = 45;</code>
   */
  public static final int SINGLE_POINT_GOAL_VALUE = 45;
  /**
   * <code>EXTRA_TIME_TRY_GOAL = 46;</code>
   */
  public static final int EXTRA_TIME_TRY_GOAL_VALUE = 46;
  /**
   * <code>EXTRA_TIME_PENALTY_GOAL = 47;</code>
   */
  public static final int EXTRA_TIME_PENALTY_GOAL_VALUE = 47;
  /**
   * <code>EXTRA_TIME_CONVERSION_GOAL = 48;</code>
   */
  public static final int EXTRA_TIME_CONVERSION_GOAL_VALUE = 48;
  /**
   * <code>EXTRA_TIME_PENALTY_TRY_GOAL = 49;</code>
   */
  public static final int EXTRA_TIME_PENALTY_TRY_GOAL_VALUE = 49;
  /**
   * <code>EXTRA_TIME_DROPKICK_GOAL = 50;</code>
   */
  public static final int EXTRA_TIME_DROPKICK_GOAL_VALUE = 50;
  /**
   * <code>DEFENSIVE_TWO_POINT_CONVERSION_GOAL = 51;</code>
   */
  public static final int DEFENSIVE_TWO_POINT_CONVERSION_GOAL_VALUE = 51;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static IncidentType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static IncidentType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_INCIDENT;
      case 1: return SUBSTITUTION;
      case 2: return SUBSTITUTION_OUT;
      case 3: return SUBSTITUTION_IN;
      case 4: return REGULAR_GOAL;
      case 5: return PENALTY;
      case 6: return MISSED_PENALTY;
      case 7: return OWN_GOAL;
      case 8: return SHOOTOUT_MISSED_PENALTY;
      case 9: return SHOOTOUT_PENALTY;
      case 10: return YELLOW_CARD;
      case 11: return SECOND_YELLOW_CARD;
      case 12: return RED_CARD;
      case 13: return EXTRA_TIME_GOAL;
      case 14: return EXTRA_TIME_OWN_GOAL;
      case 15: return CANCELED_GOAL;
      case 16: return ASSIST;
      case 17: return SECOND_ASSIST;
      case 18: return CANCELED_PENALTY;
      case 19: return CANCELED_RED_CARD;
      case 20: return CANCELED_YELLOW_CARD;
      case 21: return CANCELED_SECOND_YELLOW_CARD;
      case 22: return VAR;
      case 23: return PENALTY_AWARDED;
      case 24: return CORNER_KICK;
      case 25: return INCIDENT_CONFIRMED;
      case 26: return VAR_CANCELLED_GOAL;
      case 28: return VAR_CANCELLED_PENALTY_GOAL;
      case 29: return TWO_MINUTES_SUSPENSION;
      case 30: return FIVE_MINUTES_SUSPENSION;
      case 31: return TEN_MINUTES_SUSPENSION;
      case 32: return SHORT_HANDED_GOAL;
      case 33: return POWER_PLAY_GOAL;
      case 34: return TRY_GOAL;
      case 35: return CONVERSION_GOAL;
      case 36: return DROPKICK_GOAL;
      case 37: return PENALTY_TRY_GOAL;
      case 38: return PENALTY_TRY_CONVERSION_GOAL;
      case 39: return TWENTY_MINUTES_SUSPENSION;
      case 40: return GOLDEN_POINT_TRY_GOAL;
      case 41: return GOLDEN_POINT_PENALTY_GOAL;
      case 42: return GOLDEN_POINT_DROPKICK_GOAL;
      case 43: return TWENTY_FIVE_MINUTES_SUSPENSION;
      case 44: return TWO_MINUTES_BENCH_SUSPENSION;
      case 45: return SINGLE_POINT_GOAL;
      case 46: return EXTRA_TIME_TRY_GOAL;
      case 47: return EXTRA_TIME_PENALTY_GOAL;
      case 48: return EXTRA_TIME_CONVERSION_GOAL;
      case 49: return EXTRA_TIME_PENALTY_TRY_GOAL;
      case 50: return EXTRA_TIME_DROPKICK_GOAL;
      case 51: return DEFENSIVE_TWO_POINT_CONVERSION_GOAL;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<IncidentType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      IncidentType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<IncidentType>() {
          public IncidentType findValueByNumber(int number) {
            return IncidentType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.sts.rpclib.Enums.getDescriptor().getEnumTypes().get(16);
  }

  private static final IncidentType[] VALUES = values();

  public static IncidentType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private IncidentType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.sts.rpclib.IncidentType)
}

