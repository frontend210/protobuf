// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.5
// source: match.proto

package gorpclib

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FullMatchDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FullMatchDataMessage) Reset() {
	*x = FullMatchDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullMatchDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullMatchDataMessage) ProtoMessage() {}

func (x *FullMatchDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullMatchDataMessage.ProtoReflect.Descriptor instead.
func (*FullMatchDataMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

func (x *FullMatchDataMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type MatchCommentaryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentaryId string         `protobuf:"bytes,1,opt,name=commentaryId,proto3" json:"commentaryId,omitempty"`
	Language     Language       `protobuf:"varint,2,opt,name=language,proto3,enum=com.sts.rpclib.Language" json:"language,omitempty"`
	Elapsed      int32          `protobuf:"varint,3,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	Injury       int32          `protobuf:"varint,4,opt,name=injury,proto3" json:"injury,omitempty"`
	Commentary   *LocalizedName `protobuf:"bytes,5,opt,name=commentary,proto3" json:"commentary,omitempty"`
	Type         CommentaryType `protobuf:"varint,6,opt,name=type,proto3,enum=com.sts.rpclib.CommentaryType" json:"type,omitempty"` // repeated CommentaryValue text = 7;
}

func (x *MatchCommentaryEntry) Reset() {
	*x = MatchCommentaryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCommentaryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCommentaryEntry) ProtoMessage() {}

func (x *MatchCommentaryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCommentaryEntry.ProtoReflect.Descriptor instead.
func (*MatchCommentaryEntry) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

func (x *MatchCommentaryEntry) GetCommentaryId() string {
	if x != nil {
		return x.CommentaryId
	}
	return ""
}

func (x *MatchCommentaryEntry) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_UNKNOWN_LANGUAGE
}

func (x *MatchCommentaryEntry) GetElapsed() int32 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *MatchCommentaryEntry) GetInjury() int32 {
	if x != nil {
		return x.Injury
	}
	return 0
}

func (x *MatchCommentaryEntry) GetCommentary() *LocalizedName {
	if x != nil {
		return x.Commentary
	}
	return nil
}

func (x *MatchCommentaryEntry) GetType() CommentaryType {
	if x != nil {
		return x.Type
	}
	return CommentaryType_UNKNOWN_COMMENTARY_TYPE
}

type CommentaryMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commentaries []*MatchCommentaryEntry `protobuf:"bytes,2,rep,name=commentaries,proto3" json:"commentaries,omitempty"`
}

func (x *CommentaryMessage) Reset() {
	*x = CommentaryMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentaryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentaryMessage) ProtoMessage() {}

func (x *CommentaryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentaryMessage.ProtoReflect.Descriptor instead.
func (*CommentaryMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{2}
}

func (x *CommentaryMessage) GetCommentaries() []*MatchCommentaryEntry {
	if x != nil {
		return x.Commentaries
	}
	return nil
}

type AddCommentaryMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language   Language              `protobuf:"varint,1,opt,name=language,proto3,enum=com.sts.rpclib.Language" json:"language,omitempty"`
	Commentary *MatchCommentaryEntry `protobuf:"bytes,2,opt,name=commentary,proto3" json:"commentary,omitempty"`
}

func (x *AddCommentaryMessage) Reset() {
	*x = AddCommentaryMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentaryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentaryMessage) ProtoMessage() {}

func (x *AddCommentaryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentaryMessage.ProtoReflect.Descriptor instead.
func (*AddCommentaryMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{3}
}

func (x *AddCommentaryMessage) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_UNKNOWN_LANGUAGE
}

func (x *AddCommentaryMessage) GetCommentary() *MatchCommentaryEntry {
	if x != nil {
		return x.Commentary
	}
	return nil
}

type MatchDeletedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId string `protobuf:"bytes,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	MatchId string `protobuf:"bytes,2,opt,name=matchId,proto3" json:"matchId,omitempty"`
}

func (x *MatchDeletedMessage) Reset() {
	*x = MatchDeletedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDeletedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDeletedMessage) ProtoMessage() {}

func (x *MatchDeletedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDeletedMessage.ProtoReflect.Descriptor instead.
func (*MatchDeletedMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{4}
}

func (x *MatchDeletedMessage) GetStageId() string {
	if x != nil {
		return x.StageId
	}
	return ""
}

func (x *MatchDeletedMessage) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type ScoutConnectionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection ScoutConnection `protobuf:"varint,1,opt,name=connection,proto3,enum=com.sts.rpclib.ScoutConnection" json:"connection,omitempty"`
}

func (x *ScoutConnectionMessage) Reset() {
	*x = ScoutConnectionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoutConnectionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoutConnectionMessage) ProtoMessage() {}

func (x *ScoutConnectionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoutConnectionMessage.ProtoReflect.Descriptor instead.
func (*ScoutConnectionMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{5}
}

func (x *ScoutConnectionMessage) GetConnection() ScoutConnection {
	if x != nil {
		return x.Connection
	}
	return ScoutConnection_UNKNOWN_SCOUT_CONNECTION
}

// -
type MatchStatusChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            MatchStatus        `protobuf:"varint,1,opt,name=status,proto3,enum=com.sts.rpclib.MatchStatus" json:"status,omitempty"`
	Overall           MatchOverallStatus `protobuf:"varint,2,opt,name=overall,proto3,enum=com.sts.rpclib.MatchOverallStatus" json:"overall,omitempty"`
	StartTime         int64              `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	ProvidedEndTime   int64              `protobuf:"varint,4,opt,name=providedEndTime,proto3" json:"providedEndTime,omitempty"`
	ScheduledEndTime  int64              `protobuf:"varint,5,opt,name=scheduledEndTime,proto3" json:"scheduledEndTime,omitempty"`
	InjuryTime        map[int32]int32    `protobuf:"bytes,6,rep,name=injuryTime,proto3" json:"injuryTime,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PlayTime          int32              `protobuf:"varint,7,opt,name=playTime,proto3" json:"playTime,omitempty"` // some providers offer the current second
	Elapsed           int32              `protobuf:"varint,8,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	ElapsedInjuryTime int32              `protobuf:"varint,9,opt,name=elapsedInjuryTime,proto3" json:"elapsedInjuryTime,omitempty"`
	ElapsedType       ElapsedType        `protobuf:"varint,10,opt,name=elapsedType,proto3,enum=com.sts.rpclib.ElapsedType" json:"elapsedType,omitempty"`
	Description       string             `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MatchStatusChangeMessage) Reset() {
	*x = MatchStatusChangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStatusChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStatusChangeMessage) ProtoMessage() {}

func (x *MatchStatusChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStatusChangeMessage.ProtoReflect.Descriptor instead.
func (*MatchStatusChangeMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{6}
}

func (x *MatchStatusChangeMessage) GetStatus() MatchStatus {
	if x != nil {
		return x.Status
	}
	return MatchStatus_UNKNOWN_STATUS
}

func (x *MatchStatusChangeMessage) GetOverall() MatchOverallStatus {
	if x != nil {
		return x.Overall
	}
	return MatchOverallStatus_NOT_STARTED
}

func (x *MatchStatusChangeMessage) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MatchStatusChangeMessage) GetProvidedEndTime() int64 {
	if x != nil {
		return x.ProvidedEndTime
	}
	return 0
}

func (x *MatchStatusChangeMessage) GetScheduledEndTime() int64 {
	if x != nil {
		return x.ScheduledEndTime
	}
	return 0
}

func (x *MatchStatusChangeMessage) GetInjuryTime() map[int32]int32 {
	if x != nil {
		return x.InjuryTime
	}
	return nil
}

func (x *MatchStatusChangeMessage) GetPlayTime() int32 {
	if x != nil {
		return x.PlayTime
	}
	return 0
}

func (x *MatchStatusChangeMessage) GetElapsed() int32 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *MatchStatusChangeMessage) GetElapsedInjuryTime() int32 {
	if x != nil {
		return x.ElapsedInjuryTime
	}
	return 0
}

func (x *MatchStatusChangeMessage) GetElapsedType() ElapsedType {
	if x != nil {
		return x.ElapsedType
	}
	return ElapsedType_UNKNOWN_ELAPSED
}

func (x *MatchStatusChangeMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// -
type MatchScoreChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           MatchStatus       `protobuf:"varint,1,opt,name=status,proto3,enum=com.sts.rpclib.MatchStatus" json:"status,omitempty"`
	IsSum            bool              `protobuf:"varint,2,opt,name=isSum,proto3" json:"isSum,omitempty"` // signals whether the provider sums up all the scores
	ScoreType        ScoreType         `protobuf:"varint,3,opt,name=scoreType,proto3,enum=com.sts.rpclib.ScoreType" json:"scoreType,omitempty"`
	ScoreValues      map[int32]int32   `protobuf:"bytes,4,rep,name=scoreValues,proto3" json:"scoreValues,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ScoreValuesFloat map[int32]float32 `protobuf:"bytes,5,rep,name=scoreValuesFloat,proto3" json:"scoreValuesFloat,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Sport            Sport             `protobuf:"varint,6,opt,name=sport,proto3,enum=com.sts.rpclib.Sport" json:"sport,omitempty"`
}

func (x *MatchScoreChangeMessage) Reset() {
	*x = MatchScoreChangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchScoreChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchScoreChangeMessage) ProtoMessage() {}

func (x *MatchScoreChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchScoreChangeMessage.ProtoReflect.Descriptor instead.
func (*MatchScoreChangeMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{7}
}

func (x *MatchScoreChangeMessage) GetStatus() MatchStatus {
	if x != nil {
		return x.Status
	}
	return MatchStatus_UNKNOWN_STATUS
}

func (x *MatchScoreChangeMessage) GetIsSum() bool {
	if x != nil {
		return x.IsSum
	}
	return false
}

func (x *MatchScoreChangeMessage) GetScoreType() ScoreType {
	if x != nil {
		return x.ScoreType
	}
	return ScoreType_UNKNOWN_SCORE
}

func (x *MatchScoreChangeMessage) GetScoreValues() map[int32]int32 {
	if x != nil {
		return x.ScoreValues
	}
	return nil
}

func (x *MatchScoreChangeMessage) GetScoreValuesFloat() map[int32]float32 {
	if x != nil {
		return x.ScoreValuesFloat
	}
	return nil
}

func (x *MatchScoreChangeMessage) GetSport() Sport {
	if x != nil {
		return x.Sport
	}
	return Sport_UNKNOWN_SPORT
}

// -
type MatchIncidentChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minute             int32  `protobuf:"varint,1,opt,name=minute,proto3" json:"minute,omitempty"`
	Second             int32  `protobuf:"varint,2,opt,name=second,proto3" json:"second,omitempty"`
	TeamNumber         int32  `protobuf:"varint,3,opt,name=teamNumber,proto3" json:"teamNumber,omitempty"`
	PlayerId           string `protobuf:"bytes,4,opt,name=playerId,proto3" json:"playerId,omitempty"`
	PlayerNum          int32  `protobuf:"varint,5,opt,name=playerNum,proto3" json:"playerNum,omitempty"`
	PlayerName         string `protobuf:"bytes,6,opt,name=playerName,proto3" json:"playerName,omitempty"`
	PlayerShortName    string `protobuf:"bytes,7,opt,name=playerShortName,proto3" json:"playerShortName,omitempty"`
	PlayerIdOut        string `protobuf:"bytes,8,opt,name=playerIdOut,proto3" json:"playerIdOut,omitempty"`
	PlayerNumOut       int32  `protobuf:"varint,9,opt,name=playerNumOut,proto3" json:"playerNumOut,omitempty"`
	PlayerNameOut      string `protobuf:"bytes,10,opt,name=playerNameOut,proto3" json:"playerNameOut,omitempty"`
	PlayerShortNameOut string `protobuf:"bytes,11,opt,name=playerShortNameOut,proto3" json:"playerShortNameOut,omitempty"`
	RefIncidentId      string `protobuf:"bytes,12,opt,name=refIncidentId,proto3" json:"refIncidentId,omitempty"`
	// type of incident
	Type                  int32            `protobuf:"varint,13,opt,name=type,proto3" json:"type,omitempty"`
	Id                    string           `protobuf:"bytes,14,opt,name=id,proto3" json:"id,omitempty"`
	Score                 map[int32]int32  `protobuf:"bytes,15,rep,name=score,proto3" json:"score,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ScoreFloat            map[int32]int64  `protobuf:"bytes,16,rep,name=scoreFloat,proto3" json:"scoreFloat,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ExtraInfo             string           `protobuf:"bytes,17,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`
	SortOrder             int32            `protobuf:"varint,18,opt,name=sortOrder,proto3" json:"sortOrder,omitempty"`
	Period                Period           `protobuf:"varint,19,opt,name=period,proto3,enum=com.sts.rpclib.Period" json:"period,omitempty"`
	IsPlayerDataConfirmed bool             `protobuf:"varint,20,opt,name=isPlayerDataConfirmed,proto3" json:"isPlayerDataConfirmed,omitempty"`
	Assists               []*AssistMessage `protobuf:"bytes,21,rep,name=assists,proto3" json:"assists,omitempty"`
	IsPeriodCalculated    bool             `protobuf:"varint,22,opt,name=isPeriodCalculated,proto3" json:"isPeriodCalculated,omitempty"`
	Confirmed             bool             `protobuf:"varint,23,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	MinutePlus            int32            `protobuf:"varint,24,opt,name=minutePlus,proto3" json:"minutePlus,omitempty"`
}

func (x *MatchIncidentChangeMessage) Reset() {
	*x = MatchIncidentChangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchIncidentChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchIncidentChangeMessage) ProtoMessage() {}

func (x *MatchIncidentChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchIncidentChangeMessage.ProtoReflect.Descriptor instead.
func (*MatchIncidentChangeMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{8}
}

func (x *MatchIncidentChangeMessage) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *MatchIncidentChangeMessage) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *MatchIncidentChangeMessage) GetTeamNumber() int32 {
	if x != nil {
		return x.TeamNumber
	}
	return 0
}

func (x *MatchIncidentChangeMessage) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *MatchIncidentChangeMessage) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *MatchIncidentChangeMessage) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *MatchIncidentChangeMessage) GetPlayerShortName() string {
	if x != nil {
		return x.PlayerShortName
	}
	return ""
}

func (x *MatchIncidentChangeMessage) GetPlayerIdOut() string {
	if x != nil {
		return x.PlayerIdOut
	}
	return ""
}

func (x *MatchIncidentChangeMessage) GetPlayerNumOut() int32 {
	if x != nil {
		return x.PlayerNumOut
	}
	return 0
}

func (x *MatchIncidentChangeMessage) GetPlayerNameOut() string {
	if x != nil {
		return x.PlayerNameOut
	}
	return ""
}

func (x *MatchIncidentChangeMessage) GetPlayerShortNameOut() string {
	if x != nil {
		return x.PlayerShortNameOut
	}
	return ""
}

func (x *MatchIncidentChangeMessage) GetRefIncidentId() string {
	if x != nil {
		return x.RefIncidentId
	}
	return ""
}

func (x *MatchIncidentChangeMessage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MatchIncidentChangeMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MatchIncidentChangeMessage) GetScore() map[int32]int32 {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *MatchIncidentChangeMessage) GetScoreFloat() map[int32]int64 {
	if x != nil {
		return x.ScoreFloat
	}
	return nil
}

func (x *MatchIncidentChangeMessage) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *MatchIncidentChangeMessage) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *MatchIncidentChangeMessage) GetPeriod() Period {
	if x != nil {
		return x.Period
	}
	return Period_UNKNOWN_PERIOD
}

func (x *MatchIncidentChangeMessage) GetIsPlayerDataConfirmed() bool {
	if x != nil {
		return x.IsPlayerDataConfirmed
	}
	return false
}

func (x *MatchIncidentChangeMessage) GetAssists() []*AssistMessage {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *MatchIncidentChangeMessage) GetIsPeriodCalculated() bool {
	if x != nil {
		return x.IsPeriodCalculated
	}
	return false
}

func (x *MatchIncidentChangeMessage) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *MatchIncidentChangeMessage) GetMinutePlus() int32 {
	if x != nil {
		return x.MinutePlus
	}
	return 0
}

// -
type MatchWinnerChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamPosition int32 `protobuf:"varint,1,opt,name=teamPosition,proto3" json:"teamPosition,omitempty"`
}

func (x *MatchWinnerChangeMessage) Reset() {
	*x = MatchWinnerChangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchWinnerChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchWinnerChangeMessage) ProtoMessage() {}

func (x *MatchWinnerChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchWinnerChangeMessage.ProtoReflect.Descriptor instead.
func (*MatchWinnerChangeMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{9}
}

func (x *MatchWinnerChangeMessage) GetTeamPosition() int32 {
	if x != nil {
		return x.TeamPosition
	}
	return 0
}

// -
type MatchParticipantsChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participants []*ParticipantMessage `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *MatchParticipantsChangeMessage) Reset() {
	*x = MatchParticipantsChangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchParticipantsChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchParticipantsChangeMessage) ProtoMessage() {}

func (x *MatchParticipantsChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchParticipantsChangeMessage.ProtoReflect.Descriptor instead.
func (*MatchParticipantsChangeMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{10}
}

func (x *MatchParticipantsChangeMessage) GetParticipants() []*ParticipantMessage {
	if x != nil {
		return x.Participants
	}
	return nil
}

type MatchParticipantStatsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goals                                int32   `protobuf:"varint,1,opt,name=goals,proto3" json:"goals,omitempty"`
	OwnGoals                             int32   `protobuf:"varint,2,opt,name=ownGoals,proto3" json:"ownGoals,omitempty"`
	YellowCards                          int32   `protobuf:"varint,3,opt,name=yellowCards,proto3" json:"yellowCards,omitempty"`
	SecondYellowCards                    int32   `protobuf:"varint,4,opt,name=secondYellowCards,proto3" json:"secondYellowCards,omitempty"`
	RedCards                             int32   `protobuf:"varint,5,opt,name=redCards,proto3" json:"redCards,omitempty"`
	Assists                              int32   `protobuf:"varint,6,opt,name=assists,proto3" json:"assists,omitempty"`
	TeamPosition                         int32   `protobuf:"varint,7,opt,name=teamPosition,proto3" json:"teamPosition,omitempty"`
	TotalGames                           int32   `protobuf:"varint,8,opt,name=totalGames,proto3" json:"totalGames,omitempty"`
	TotalGoals                           int32   `protobuf:"varint,9,opt,name=totalGoals,proto3" json:"totalGoals,omitempty"`
	TotalCleanSheets                     int32   `protobuf:"varint,10,opt,name=totalCleanSheets,proto3" json:"totalCleanSheets,omitempty"`
	TotalGamesWithoutGoal                int32   `protobuf:"varint,11,opt,name=totalGamesWithoutGoal,proto3" json:"totalGamesWithoutGoal,omitempty"`
	WonFirstHalf                         int32   `protobuf:"varint,12,opt,name=wonFirstHalf,proto3" json:"wonFirstHalf,omitempty"`
	WonSecondHalf                        int32   `protobuf:"varint,13,opt,name=wonSecondHalf,proto3" json:"wonSecondHalf,omitempty"`
	WonFirstHalfPercentage               int32   `protobuf:"varint,14,opt,name=wonFirstHalfPercentage,proto3" json:"wonFirstHalfPercentage,omitempty"`
	WonSecondHalfPercentage              int32   `protobuf:"varint,15,opt,name=wonSecondHalfPercentage,proto3" json:"wonSecondHalfPercentage,omitempty"`
	MatchesWonHomePercentage             int32   `protobuf:"varint,16,opt,name=matchesWonHomePercentage,proto3" json:"matchesWonHomePercentage,omitempty"`
	MatchesWonAwayPercentage             int32   `protobuf:"varint,17,opt,name=matchesWonAwayPercentage,proto3" json:"matchesWonAwayPercentage,omitempty"`
	BoreDraws                            int32   `protobuf:"varint,18,opt,name=boreDraws,proto3" json:"boreDraws,omitempty"`
	BoreDrawsPercentage                  int32   `protobuf:"varint,19,opt,name=boreDrawsPercentage,proto3" json:"boreDrawsPercentage,omitempty"`
	GoalsRatio                           float64 `protobuf:"fixed64,20,opt,name=goalsRatio,proto3" json:"goalsRatio,omitempty"`
	YellowCardsPerGame                   float64 `protobuf:"fixed64,21,opt,name=yellowCardsPerGame,proto3" json:"yellowCardsPerGame,omitempty"`
	PenaltyGoals                         int32   `protobuf:"varint,22,opt,name=penaltyGoals,proto3" json:"penaltyGoals,omitempty"`
	TotalGoalsFirstHalf                  int32   `protobuf:"varint,23,opt,name=totalGoalsFirstHalf,proto3" json:"totalGoalsFirstHalf,omitempty"`
	TotalGoalsSecondHalf                 int32   `protobuf:"varint,24,opt,name=totalGoalsSecondHalf,proto3" json:"totalGoalsSecondHalf,omitempty"`
	TotalGoalsFirstHalfPercentage        int32   `protobuf:"varint,25,opt,name=totalGoalsFirstHalfPercentage,proto3" json:"totalGoalsFirstHalfPercentage,omitempty"`
	TotalGoalsSecondHalfPercentage       int32   `protobuf:"varint,26,opt,name=totalGoalsSecondHalfPercentage,proto3" json:"totalGoalsSecondHalfPercentage,omitempty"`
	FirstGoal                            int32   `protobuf:"varint,27,opt,name=firstGoal,proto3" json:"firstGoal,omitempty"`
	LastGoal                             int32   `protobuf:"varint,28,opt,name=lastGoal,proto3" json:"lastGoal,omitempty"`
	FirstGoalPercentage                  int32   `protobuf:"varint,29,opt,name=firstGoalPercentage,proto3" json:"firstGoalPercentage,omitempty"`
	LastGoalPercentage                   int32   `protobuf:"varint,30,opt,name=lastGoalPercentage,proto3" json:"lastGoalPercentage,omitempty"`
	GoalRatioMinute1X15                  int32   `protobuf:"varint,31,opt,name=goalRatioMinute1x15,proto3" json:"goalRatioMinute1x15,omitempty"`
	GoalRatioMinute16X30                 int32   `protobuf:"varint,32,opt,name=goalRatioMinute16x30,proto3" json:"goalRatioMinute16x30,omitempty"`
	GoalRatioMinute31X45                 int32   `protobuf:"varint,33,opt,name=goalRatioMinute31x45,proto3" json:"goalRatioMinute31x45,omitempty"`
	GoalRatioMinute46X60                 int32   `protobuf:"varint,34,opt,name=goalRatioMinute46x60,proto3" json:"goalRatioMinute46x60,omitempty"`
	GoalRatioMinute61X75                 int32   `protobuf:"varint,35,opt,name=goalRatioMinute61x75,proto3" json:"goalRatioMinute61x75,omitempty"`
	GoalRatioMinute76X90                 int32   `protobuf:"varint,36,opt,name=goalRatioMinute76x90,proto3" json:"goalRatioMinute76x90,omitempty"`
	GoalInBothHalves                     int32   `protobuf:"varint,37,opt,name=goalInBothHalves,proto3" json:"goalInBothHalves,omitempty"`
	GoalInBothHalvesPercentage           int32   `protobuf:"varint,38,opt,name=goalInBothHalvesPercentage,proto3" json:"goalInBothHalvesPercentage,omitempty"`
	ConcededOneOrMoreGoals               int32   `protobuf:"varint,39,opt,name=concededOneOrMoreGoals,proto3" json:"concededOneOrMoreGoals,omitempty"`
	ConcededOneOrMoreGoalsPercentage     int32   `protobuf:"varint,40,opt,name=concededOneOrMoreGoalsPercentage,proto3" json:"concededOneOrMoreGoalsPercentage,omitempty"`
	WonToNil                             int32   `protobuf:"varint,41,opt,name=wonToNil,proto3" json:"wonToNil,omitempty"`
	WonToNilPercentage                   int32   `protobuf:"varint,42,opt,name=wonToNilPercentage,proto3" json:"wonToNilPercentage,omitempty"`
	TimeBetweenGoalsScored               int32   `protobuf:"varint,43,opt,name=timeBetweenGoalsScored,proto3" json:"timeBetweenGoalsScored,omitempty"`
	TimeBetweenGoalsScoredConceded       int32   `protobuf:"varint,44,opt,name=timeBetweenGoalsScoredConceded,proto3" json:"timeBetweenGoalsScoredConceded,omitempty"`
	Conceded                             int32   `protobuf:"varint,45,opt,name=conceded,proto3" json:"conceded,omitempty"`
	WonWhen1X0Up                         int32   `protobuf:"varint,46,opt,name=wonWhen1x0Up,proto3" json:"wonWhen1x0Up,omitempty"`
	WonWhen1X0Down                       int32   `protobuf:"varint,47,opt,name=wonWhen1x0Down,proto3" json:"wonWhen1x0Down,omitempty"`
	WonWhen2X0Up                         int32   `protobuf:"varint,48,opt,name=wonWhen2x0Up,proto3" json:"wonWhen2x0Up,omitempty"`
	WonWhen1X0UpPercentage               int32   `protobuf:"varint,49,opt,name=wonWhen1x0UpPercentage,proto3" json:"wonWhen1x0UpPercentage,omitempty"`
	WonWhen1X0DownPercentage             int32   `protobuf:"varint,50,opt,name=wonWhen1x0DownPercentage,proto3" json:"wonWhen1x0DownPercentage,omitempty"`
	WonWhen2X0UpPercentage               int32   `protobuf:"varint,51,opt,name=wonWhen2x0UpPercentage,proto3" json:"wonWhen2x0UpPercentage,omitempty"`
	When1X0UpPoints                      int32   `protobuf:"varint,52,opt,name=when1x0UpPoints,proto3" json:"when1x0UpPoints,omitempty"`
	When2X0UpPoints                      int32   `protobuf:"varint,53,opt,name=when2x0UpPoints,proto3" json:"when2x0UpPoints,omitempty"`
	When1X0DownPoints                    int32   `protobuf:"varint,54,opt,name=when1x0DownPoints,proto3" json:"when1x0DownPoints,omitempty"`
	When2X0DownPoints                    int32   `protobuf:"varint,55,opt,name=when2x0DownPoints,proto3" json:"when2x0DownPoints,omitempty"`
	When1X0UpPointsPercentage            int32   `protobuf:"varint,56,opt,name=when1x0UpPointsPercentage,proto3" json:"when1x0UpPointsPercentage,omitempty"`
	When2X0UpPointsPercentage            int32   `protobuf:"varint,57,opt,name=when2x0UpPointsPercentage,proto3" json:"when2x0UpPointsPercentage,omitempty"`
	When1X0DownPointsPercentage          int32   `protobuf:"varint,58,opt,name=when1x0DownPointsPercentage,proto3" json:"when1x0DownPointsPercentage,omitempty"`
	When2X0DownPointsPercentage          int32   `protobuf:"varint,59,opt,name=when2x0DownPointsPercentage,proto3" json:"when2x0DownPointsPercentage,omitempty"`
	EarlyGoalsTeam                       int32   `protobuf:"varint,60,opt,name=earlyGoalsTeam,proto3" json:"earlyGoalsTeam,omitempty"`
	LastGaspGoalsTeam                    int32   `protobuf:"varint,61,opt,name=lastGaspGoalsTeam,proto3" json:"lastGaspGoalsTeam,omitempty"`
	TotalGoalsStartingPlayers            int32   `protobuf:"varint,62,opt,name=totalGoalsStartingPlayers,proto3" json:"totalGoalsStartingPlayers,omitempty"`
	TotalGoalsSubbedPlayers              int32   `protobuf:"varint,63,opt,name=totalGoalsSubbedPlayers,proto3" json:"totalGoalsSubbedPlayers,omitempty"`
	TotalGoalsStartingPlayersPercentage  int32   `protobuf:"varint,64,opt,name=totalGoalsStartingPlayersPercentage,proto3" json:"totalGoalsStartingPlayersPercentage,omitempty"`
	TotalGoalsSubbedPlayersPercentage    int32   `protobuf:"varint,65,opt,name=totalGoalsSubbedPlayersPercentage,proto3" json:"totalGoalsSubbedPlayersPercentage,omitempty"`
	EqualiserGoals                       int32   `protobuf:"varint,66,opt,name=equaliserGoals,proto3" json:"equaliserGoals,omitempty"`
	BothToScore                          int32   `protobuf:"varint,67,opt,name=bothToScore,proto3" json:"bothToScore,omitempty"`
	BothToScorePercentage                int32   `protobuf:"varint,68,opt,name=bothToScorePercentage,proto3" json:"bothToScorePercentage,omitempty"`
	Comebacks                            int32   `protobuf:"varint,69,opt,name=comebacks,proto3" json:"comebacks,omitempty"`
	LostLeadToLose                       int32   `protobuf:"varint,70,opt,name=lostLeadToLose,proto3" json:"lostLeadToLose,omitempty"`
	LostInRow                            int32   `protobuf:"varint,71,opt,name=lostInRow,proto3" json:"lostInRow,omitempty"`
	GamesWithoutGoals                    int32   `protobuf:"varint,72,opt,name=gamesWithoutGoals,proto3" json:"gamesWithoutGoals,omitempty"`
	WonAtHome                            int32   `protobuf:"varint,73,opt,name=wonAtHome,proto3" json:"wonAtHome,omitempty"`
	WonAtAway                            int32   `protobuf:"varint,74,opt,name=wonAtAway,proto3" json:"wonAtAway,omitempty"`
	AwayWithoutWin                       int32   `protobuf:"varint,75,opt,name=awayWithoutWin,proto3" json:"awayWithoutWin,omitempty"`
	TotalCardsYellowRed                  int32   `protobuf:"varint,76,opt,name=totalCardsYellowRed,proto3" json:"totalCardsYellowRed,omitempty"`
	TotalCardsYellowRedPerGamePercentage float64 `protobuf:"fixed64,77,opt,name=totalCardsYellowRedPerGamePercentage,proto3" json:"totalCardsYellowRedPerGamePercentage,omitempty"`
	// statistics type 5
	HeadGoal                 int32   `protobuf:"varint,78,opt,name=headGoal,proto3" json:"headGoal,omitempty"`
	StrikeGoal               int32   `protobuf:"varint,79,opt,name=strikeGoal,proto3" json:"strikeGoal,omitempty"`
	HeadGoalPercentage       int32   `protobuf:"varint,80,opt,name=headGoalPercentage,proto3" json:"headGoalPercentage,omitempty"`
	StrikeGoalPercentage     int32   `protobuf:"varint,81,opt,name=strikeGoalPercentage,proto3" json:"strikeGoalPercentage,omitempty"`
	FoulCommit               int32   `protobuf:"varint,82,opt,name=foulCommit,proto3" json:"foulCommit,omitempty"`
	FoulCommitPerGame        float64 `protobuf:"fixed64,83,opt,name=foulCommitPerGame,proto3" json:"foulCommitPerGame,omitempty"`
	Shoton                   int32   `protobuf:"varint,84,opt,name=shoton,proto3" json:"shoton,omitempty"`
	ShotonPerGame            float64 `protobuf:"fixed64,85,opt,name=shotonPerGame,proto3" json:"shotonPerGame,omitempty"`
	Shotoff                  int32   `protobuf:"varint,86,opt,name=shotoff,proto3" json:"shotoff,omitempty"`
	ShotoffPerGame           float64 `protobuf:"fixed64,87,opt,name=shotoffPerGame,proto3" json:"shotoffPerGame,omitempty"`
	ShotsonPerGoal           float64 `protobuf:"fixed64,88,opt,name=shotsonPerGoal,proto3" json:"shotsonPerGoal,omitempty"`
	Offside                  int32   `protobuf:"varint,89,opt,name=offside,proto3" json:"offside,omitempty"`
	OffsidePerGame           float64 `protobuf:"fixed64,90,opt,name=offsidePerGame,proto3" json:"offsidePerGame,omitempty"`
	CornerTaken              int32   `protobuf:"varint,91,opt,name=cornerTaken,proto3" json:"cornerTaken,omitempty"`
	CornerTakenPerGame       float64 `protobuf:"fixed64,92,opt,name=cornerTakenPerGame,proto3" json:"cornerTakenPerGame,omitempty"`
	PenaltyMissed            int32   `protobuf:"varint,93,opt,name=penaltyMissed,proto3" json:"penaltyMissed,omitempty"`
	PenaltyMissedPercentage  int32   `protobuf:"varint,94,opt,name=penaltyMissedPercentage,proto3" json:"penaltyMissedPercentage,omitempty"`
	ElapsedPlusPerGame       float64 `protobuf:"fixed64,95,opt,name=elapsedPlusPerGame,proto3" json:"elapsedPlusPerGame,omitempty"`
	Woodwork                 int32   `protobuf:"varint,96,opt,name=woodwork,proto3" json:"woodwork,omitempty"`
	PenaltyCommit            int32   `protobuf:"varint,97,opt,name=penaltyCommit,proto3" json:"penaltyCommit,omitempty"`
	PenaltyCommitPercentage  int32   `protobuf:"varint,98,opt,name=penaltyCommitPercentage,proto3" json:"penaltyCommitPercentage,omitempty"`
	Foulsuffered             int32   `protobuf:"varint,99,opt,name=foulsuffered,proto3" json:"foulsuffered,omitempty"`
	TotalShots               int32   `protobuf:"varint,100,opt,name=totalShots,proto3" json:"totalShots,omitempty"`
	PenaltySaves             int32   `protobuf:"varint,101,opt,name=penaltySaves,proto3" json:"penaltySaves,omitempty"`
	DefensiveError           int32   `protobuf:"varint,102,opt,name=defensiveError,proto3" json:"defensiveError,omitempty"`
	AveragePossession        int32   `protobuf:"varint,103,opt,name=averagePossession,proto3" json:"averagePossession,omitempty"`
	PenaltiesAwarded         int32   `protobuf:"varint,104,opt,name=penaltiesAwarded,proto3" json:"penaltiesAwarded,omitempty"`
	GoalOutsideBox           int32   `protobuf:"varint,105,opt,name=goalOutsideBox,proto3" json:"goalOutsideBox,omitempty"`
	GoalOutsideBoxPercentage int32   `protobuf:"varint,106,opt,name=goalOutsideBoxPercentage,proto3" json:"goalOutsideBoxPercentage,omitempty"`
	DirectFreekick           int32   `protobuf:"varint,107,opt,name=directFreekick,proto3" json:"directFreekick,omitempty"`
	DirectFreekickPercentage int32   `protobuf:"varint,108,opt,name=directFreekickPercentage,proto3" json:"directFreekickPercentage,omitempty"`
	// statistics type 3 other
	ScoredInRow        int32 `protobuf:"varint,109,opt,name=scoredInRow,proto3" json:"scoredInRow,omitempty"`
	WonInRow           int32 `protobuf:"varint,110,opt,name=wonInRow,proto3" json:"wonInRow,omitempty"`
	NoconcedingInRow   int32 `protobuf:"varint,111,opt,name=noconcedingInRow,proto3" json:"noconcedingInRow,omitempty"`
	HomeWithoutWin     int32 `protobuf:"varint,112,opt,name=homeWithoutWin,proto3" json:"homeWithoutWin,omitempty"`
	Won2Down           int32 `protobuf:"varint,113,opt,name=won2Down,proto3" json:"won2Down,omitempty"`
	Won2DownPercentage int32 `protobuf:"varint,114,opt,name=won2DownPercentage,proto3" json:"won2DownPercentage,omitempty"`
	// statistics type 8 tennis
	FirstReturnPointsWon       int32   `protobuf:"varint,115,opt,name=firstReturnPointsWon,proto3" json:"firstReturnPointsWon,omitempty"`
	FirstServePercentage       float64 `protobuf:"fixed64,116,opt,name=firstServePercentage,proto3" json:"firstServePercentage,omitempty"`
	FirstServePointsWon        int32   `protobuf:"varint,117,opt,name=firstServePointsWon,proto3" json:"firstServePointsWon,omitempty"`
	SecondReturnPointsWon      int32   `protobuf:"varint,118,opt,name=secondReturnPointsWon,proto3" json:"secondReturnPointsWon,omitempty"`
	SecondServePointsWon       int32   `protobuf:"varint,119,opt,name=secondServePointsWon,proto3" json:"secondServePointsWon,omitempty"`
	Aces                       int32   `protobuf:"varint,120,opt,name=aces,proto3" json:"aces,omitempty"`
	BreakPointsSaved           int32   `protobuf:"varint,121,opt,name=breakPointsSaved,proto3" json:"breakPointsSaved,omitempty"`
	BreakPointsWon             int32   `protobuf:"varint,122,opt,name=breakPointsWon,proto3" json:"breakPointsWon,omitempty"`
	DoubleFaults               int32   `protobuf:"varint,123,opt,name=doubleFaults,proto3" json:"doubleFaults,omitempty"`
	ReturnPointsWonPercentage  float64 `protobuf:"fixed64,124,opt,name=returnPointsWonPercentage,proto3" json:"returnPointsWonPercentage,omitempty"`
	ServiceGames               int32   `protobuf:"varint,125,opt,name=serviceGames,proto3" json:"serviceGames,omitempty"`
	ServicePointsWonPercentage float64 `protobuf:"fixed64,126,opt,name=servicePointsWonPercentage,proto3" json:"servicePointsWonPercentage,omitempty"`
	FirstServePointsAll        int32   `protobuf:"varint,127,opt,name=firstServePointsAll,proto3" json:"firstServePointsAll,omitempty"`
	SecondServePointsAll       int32   `protobuf:"varint,128,opt,name=secondServePointsAll,proto3" json:"secondServePointsAll,omitempty"`
	TotalPointsWon             int32   `protobuf:"varint,129,opt,name=totalPointsWon,proto3" json:"totalPointsWon,omitempty"`
	TotalPointsWonPercentage   float64 `protobuf:"fixed64,130,opt,name=totalPointsWonPercentage,proto3" json:"totalPointsWonPercentage,omitempty"`
	UnforcedErrors             int32   `protobuf:"varint,131,opt,name=unforcedErrors,proto3" json:"unforcedErrors,omitempty"`
	Winners                    int32   `protobuf:"varint,132,opt,name=winners,proto3" json:"winners,omitempty"`
	TotalAssists               int32   `protobuf:"varint,133,opt,name=totalAssists,proto3" json:"totalAssists,omitempty"`
	TotalCrosses               int32   `protobuf:"varint,134,opt,name=totalCrosses,proto3" json:"totalCrosses,omitempty"`
	GoalsInsideBox             int32   `protobuf:"varint,135,opt,name=goalsInsideBox,proto3" json:"goalsInsideBox,omitempty"`
	TotalBlockedShots          int32   `protobuf:"varint,136,opt,name=totalBlockedShots,proto3" json:"totalBlockedShots,omitempty"`
	KeyPasses                  int32   `protobuf:"varint,137,opt,name=keyPasses,proto3" json:"keyPasses,omitempty"`
	TotalClearances            int32   `protobuf:"varint,138,opt,name=totalClearances,proto3" json:"totalClearances,omitempty"`
	TotalAirChallengesWon      int32   `protobuf:"varint,139,opt,name=totalAirChallengesWon,proto3" json:"totalAirChallengesWon,omitempty"`
	TotalAirChallengesLost     int32   `protobuf:"varint,140,opt,name=totalAirChallengesLost,proto3" json:"totalAirChallengesLost,omitempty"`
	TotalTackles               int32   `protobuf:"varint,141,opt,name=totalTackles,proto3" json:"totalTackles,omitempty"`
	TotalInterceptedCrosses    int32   `protobuf:"varint,142,opt,name=totalInterceptedCrosses,proto3" json:"totalInterceptedCrosses,omitempty"`
	TotalGoalAttempts          int32   `protobuf:"varint,143,opt,name=totalGoalAttempts,proto3" json:"totalGoalAttempts,omitempty"`
	TotalSuccessfulCrosses     int32   `protobuf:"varint,144,opt,name=totalSuccessfulCrosses,proto3" json:"totalSuccessfulCrosses,omitempty"`
}

func (x *MatchParticipantStatsMessage) Reset() {
	*x = MatchParticipantStatsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchParticipantStatsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchParticipantStatsMessage) ProtoMessage() {}

func (x *MatchParticipantStatsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchParticipantStatsMessage.ProtoReflect.Descriptor instead.
func (*MatchParticipantStatsMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{11}
}

func (x *MatchParticipantStatsMessage) GetGoals() int32 {
	if x != nil {
		return x.Goals
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetOwnGoals() int32 {
	if x != nil {
		return x.OwnGoals
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetYellowCards() int32 {
	if x != nil {
		return x.YellowCards
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetSecondYellowCards() int32 {
	if x != nil {
		return x.SecondYellowCards
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetRedCards() int32 {
	if x != nil {
		return x.RedCards
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTeamPosition() int32 {
	if x != nil {
		return x.TeamPosition
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGames() int32 {
	if x != nil {
		return x.TotalGames
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGoals() int32 {
	if x != nil {
		return x.TotalGoals
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalCleanSheets() int32 {
	if x != nil {
		return x.TotalCleanSheets
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGamesWithoutGoal() int32 {
	if x != nil {
		return x.TotalGamesWithoutGoal
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonFirstHalf() int32 {
	if x != nil {
		return x.WonFirstHalf
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonSecondHalf() int32 {
	if x != nil {
		return x.WonSecondHalf
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonFirstHalfPercentage() int32 {
	if x != nil {
		return x.WonFirstHalfPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonSecondHalfPercentage() int32 {
	if x != nil {
		return x.WonSecondHalfPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetMatchesWonHomePercentage() int32 {
	if x != nil {
		return x.MatchesWonHomePercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetMatchesWonAwayPercentage() int32 {
	if x != nil {
		return x.MatchesWonAwayPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetBoreDraws() int32 {
	if x != nil {
		return x.BoreDraws
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetBoreDrawsPercentage() int32 {
	if x != nil {
		return x.BoreDrawsPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalsRatio() float64 {
	if x != nil {
		return x.GoalsRatio
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetYellowCardsPerGame() float64 {
	if x != nil {
		return x.YellowCardsPerGame
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetPenaltyGoals() int32 {
	if x != nil {
		return x.PenaltyGoals
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGoalsFirstHalf() int32 {
	if x != nil {
		return x.TotalGoalsFirstHalf
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGoalsSecondHalf() int32 {
	if x != nil {
		return x.TotalGoalsSecondHalf
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGoalsFirstHalfPercentage() int32 {
	if x != nil {
		return x.TotalGoalsFirstHalfPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGoalsSecondHalfPercentage() int32 {
	if x != nil {
		return x.TotalGoalsSecondHalfPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetFirstGoal() int32 {
	if x != nil {
		return x.FirstGoal
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetLastGoal() int32 {
	if x != nil {
		return x.LastGoal
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetFirstGoalPercentage() int32 {
	if x != nil {
		return x.FirstGoalPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetLastGoalPercentage() int32 {
	if x != nil {
		return x.LastGoalPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalRatioMinute1X15() int32 {
	if x != nil {
		return x.GoalRatioMinute1X15
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalRatioMinute16X30() int32 {
	if x != nil {
		return x.GoalRatioMinute16X30
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalRatioMinute31X45() int32 {
	if x != nil {
		return x.GoalRatioMinute31X45
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalRatioMinute46X60() int32 {
	if x != nil {
		return x.GoalRatioMinute46X60
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalRatioMinute61X75() int32 {
	if x != nil {
		return x.GoalRatioMinute61X75
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalRatioMinute76X90() int32 {
	if x != nil {
		return x.GoalRatioMinute76X90
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalInBothHalves() int32 {
	if x != nil {
		return x.GoalInBothHalves
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalInBothHalvesPercentage() int32 {
	if x != nil {
		return x.GoalInBothHalvesPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetConcededOneOrMoreGoals() int32 {
	if x != nil {
		return x.ConcededOneOrMoreGoals
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetConcededOneOrMoreGoalsPercentage() int32 {
	if x != nil {
		return x.ConcededOneOrMoreGoalsPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonToNil() int32 {
	if x != nil {
		return x.WonToNil
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonToNilPercentage() int32 {
	if x != nil {
		return x.WonToNilPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTimeBetweenGoalsScored() int32 {
	if x != nil {
		return x.TimeBetweenGoalsScored
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTimeBetweenGoalsScoredConceded() int32 {
	if x != nil {
		return x.TimeBetweenGoalsScoredConceded
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetConceded() int32 {
	if x != nil {
		return x.Conceded
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonWhen1X0Up() int32 {
	if x != nil {
		return x.WonWhen1X0Up
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonWhen1X0Down() int32 {
	if x != nil {
		return x.WonWhen1X0Down
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonWhen2X0Up() int32 {
	if x != nil {
		return x.WonWhen2X0Up
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonWhen1X0UpPercentage() int32 {
	if x != nil {
		return x.WonWhen1X0UpPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonWhen1X0DownPercentage() int32 {
	if x != nil {
		return x.WonWhen1X0DownPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonWhen2X0UpPercentage() int32 {
	if x != nil {
		return x.WonWhen2X0UpPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWhen1X0UpPoints() int32 {
	if x != nil {
		return x.When1X0UpPoints
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWhen2X0UpPoints() int32 {
	if x != nil {
		return x.When2X0UpPoints
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWhen1X0DownPoints() int32 {
	if x != nil {
		return x.When1X0DownPoints
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWhen2X0DownPoints() int32 {
	if x != nil {
		return x.When2X0DownPoints
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWhen1X0UpPointsPercentage() int32 {
	if x != nil {
		return x.When1X0UpPointsPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWhen2X0UpPointsPercentage() int32 {
	if x != nil {
		return x.When2X0UpPointsPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWhen1X0DownPointsPercentage() int32 {
	if x != nil {
		return x.When1X0DownPointsPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWhen2X0DownPointsPercentage() int32 {
	if x != nil {
		return x.When2X0DownPointsPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetEarlyGoalsTeam() int32 {
	if x != nil {
		return x.EarlyGoalsTeam
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetLastGaspGoalsTeam() int32 {
	if x != nil {
		return x.LastGaspGoalsTeam
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGoalsStartingPlayers() int32 {
	if x != nil {
		return x.TotalGoalsStartingPlayers
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGoalsSubbedPlayers() int32 {
	if x != nil {
		return x.TotalGoalsSubbedPlayers
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGoalsStartingPlayersPercentage() int32 {
	if x != nil {
		return x.TotalGoalsStartingPlayersPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGoalsSubbedPlayersPercentage() int32 {
	if x != nil {
		return x.TotalGoalsSubbedPlayersPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetEqualiserGoals() int32 {
	if x != nil {
		return x.EqualiserGoals
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetBothToScore() int32 {
	if x != nil {
		return x.BothToScore
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetBothToScorePercentage() int32 {
	if x != nil {
		return x.BothToScorePercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetComebacks() int32 {
	if x != nil {
		return x.Comebacks
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetLostLeadToLose() int32 {
	if x != nil {
		return x.LostLeadToLose
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetLostInRow() int32 {
	if x != nil {
		return x.LostInRow
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGamesWithoutGoals() int32 {
	if x != nil {
		return x.GamesWithoutGoals
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonAtHome() int32 {
	if x != nil {
		return x.WonAtHome
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonAtAway() int32 {
	if x != nil {
		return x.WonAtAway
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetAwayWithoutWin() int32 {
	if x != nil {
		return x.AwayWithoutWin
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalCardsYellowRed() int32 {
	if x != nil {
		return x.TotalCardsYellowRed
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalCardsYellowRedPerGamePercentage() float64 {
	if x != nil {
		return x.TotalCardsYellowRedPerGamePercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetHeadGoal() int32 {
	if x != nil {
		return x.HeadGoal
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetStrikeGoal() int32 {
	if x != nil {
		return x.StrikeGoal
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetHeadGoalPercentage() int32 {
	if x != nil {
		return x.HeadGoalPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetStrikeGoalPercentage() int32 {
	if x != nil {
		return x.StrikeGoalPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetFoulCommit() int32 {
	if x != nil {
		return x.FoulCommit
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetFoulCommitPerGame() float64 {
	if x != nil {
		return x.FoulCommitPerGame
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetShoton() int32 {
	if x != nil {
		return x.Shoton
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetShotonPerGame() float64 {
	if x != nil {
		return x.ShotonPerGame
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetShotoff() int32 {
	if x != nil {
		return x.Shotoff
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetShotoffPerGame() float64 {
	if x != nil {
		return x.ShotoffPerGame
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetShotsonPerGoal() float64 {
	if x != nil {
		return x.ShotsonPerGoal
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetOffside() int32 {
	if x != nil {
		return x.Offside
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetOffsidePerGame() float64 {
	if x != nil {
		return x.OffsidePerGame
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetCornerTaken() int32 {
	if x != nil {
		return x.CornerTaken
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetCornerTakenPerGame() float64 {
	if x != nil {
		return x.CornerTakenPerGame
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetPenaltyMissed() int32 {
	if x != nil {
		return x.PenaltyMissed
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetPenaltyMissedPercentage() int32 {
	if x != nil {
		return x.PenaltyMissedPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetElapsedPlusPerGame() float64 {
	if x != nil {
		return x.ElapsedPlusPerGame
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWoodwork() int32 {
	if x != nil {
		return x.Woodwork
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetPenaltyCommit() int32 {
	if x != nil {
		return x.PenaltyCommit
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetPenaltyCommitPercentage() int32 {
	if x != nil {
		return x.PenaltyCommitPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetFoulsuffered() int32 {
	if x != nil {
		return x.Foulsuffered
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalShots() int32 {
	if x != nil {
		return x.TotalShots
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetPenaltySaves() int32 {
	if x != nil {
		return x.PenaltySaves
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetDefensiveError() int32 {
	if x != nil {
		return x.DefensiveError
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetAveragePossession() int32 {
	if x != nil {
		return x.AveragePossession
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetPenaltiesAwarded() int32 {
	if x != nil {
		return x.PenaltiesAwarded
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalOutsideBox() int32 {
	if x != nil {
		return x.GoalOutsideBox
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalOutsideBoxPercentage() int32 {
	if x != nil {
		return x.GoalOutsideBoxPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetDirectFreekick() int32 {
	if x != nil {
		return x.DirectFreekick
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetDirectFreekickPercentage() int32 {
	if x != nil {
		return x.DirectFreekickPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetScoredInRow() int32 {
	if x != nil {
		return x.ScoredInRow
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWonInRow() int32 {
	if x != nil {
		return x.WonInRow
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetNoconcedingInRow() int32 {
	if x != nil {
		return x.NoconcedingInRow
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetHomeWithoutWin() int32 {
	if x != nil {
		return x.HomeWithoutWin
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWon2Down() int32 {
	if x != nil {
		return x.Won2Down
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWon2DownPercentage() int32 {
	if x != nil {
		return x.Won2DownPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetFirstReturnPointsWon() int32 {
	if x != nil {
		return x.FirstReturnPointsWon
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetFirstServePercentage() float64 {
	if x != nil {
		return x.FirstServePercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetFirstServePointsWon() int32 {
	if x != nil {
		return x.FirstServePointsWon
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetSecondReturnPointsWon() int32 {
	if x != nil {
		return x.SecondReturnPointsWon
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetSecondServePointsWon() int32 {
	if x != nil {
		return x.SecondServePointsWon
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetAces() int32 {
	if x != nil {
		return x.Aces
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetBreakPointsSaved() int32 {
	if x != nil {
		return x.BreakPointsSaved
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetBreakPointsWon() int32 {
	if x != nil {
		return x.BreakPointsWon
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetDoubleFaults() int32 {
	if x != nil {
		return x.DoubleFaults
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetReturnPointsWonPercentage() float64 {
	if x != nil {
		return x.ReturnPointsWonPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetServiceGames() int32 {
	if x != nil {
		return x.ServiceGames
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetServicePointsWonPercentage() float64 {
	if x != nil {
		return x.ServicePointsWonPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetFirstServePointsAll() int32 {
	if x != nil {
		return x.FirstServePointsAll
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetSecondServePointsAll() int32 {
	if x != nil {
		return x.SecondServePointsAll
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalPointsWon() int32 {
	if x != nil {
		return x.TotalPointsWon
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalPointsWonPercentage() float64 {
	if x != nil {
		return x.TotalPointsWonPercentage
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetUnforcedErrors() int32 {
	if x != nil {
		return x.UnforcedErrors
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetWinners() int32 {
	if x != nil {
		return x.Winners
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalAssists() int32 {
	if x != nil {
		return x.TotalAssists
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalCrosses() int32 {
	if x != nil {
		return x.TotalCrosses
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetGoalsInsideBox() int32 {
	if x != nil {
		return x.GoalsInsideBox
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalBlockedShots() int32 {
	if x != nil {
		return x.TotalBlockedShots
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetKeyPasses() int32 {
	if x != nil {
		return x.KeyPasses
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalClearances() int32 {
	if x != nil {
		return x.TotalClearances
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalAirChallengesWon() int32 {
	if x != nil {
		return x.TotalAirChallengesWon
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalAirChallengesLost() int32 {
	if x != nil {
		return x.TotalAirChallengesLost
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalTackles() int32 {
	if x != nil {
		return x.TotalTackles
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalInterceptedCrosses() int32 {
	if x != nil {
		return x.TotalInterceptedCrosses
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalGoalAttempts() int32 {
	if x != nil {
		return x.TotalGoalAttempts
	}
	return 0
}

func (x *MatchParticipantStatsMessage) GetTotalSuccessfulCrosses() int32 {
	if x != nil {
		return x.TotalSuccessfulCrosses
	}
	return 0
}

type MatchParticipantJerseyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShirtColor1  string       `protobuf:"bytes,1,opt,name=shirtColor1,proto3" json:"shirtColor1,omitempty"`
	ShirtColor2  string       `protobuf:"bytes,2,opt,name=shirtColor2,proto3" json:"shirtColor2,omitempty"`
	PantsColor   string       `protobuf:"bytes,3,opt,name=pantsColor,proto3" json:"pantsColor,omitempty"`
	SocksColor   string       `protobuf:"bytes,4,opt,name=socksColor,proto3" json:"socksColor,omitempty"`
	JerseyDesign JerseyDesign `protobuf:"varint,5,opt,name=jerseyDesign,proto3,enum=com.sts.rpclib.JerseyDesign" json:"jerseyDesign,omitempty"`
	TeamPosition int32        `protobuf:"varint,6,opt,name=teamPosition,proto3" json:"teamPosition,omitempty"`
	JerseyNumber string       `protobuf:"bytes,7,opt,name=jerseyNumber,proto3" json:"jerseyNumber,omitempty"`
}

func (x *MatchParticipantJerseyMessage) Reset() {
	*x = MatchParticipantJerseyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchParticipantJerseyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchParticipantJerseyMessage) ProtoMessage() {}

func (x *MatchParticipantJerseyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchParticipantJerseyMessage.ProtoReflect.Descriptor instead.
func (*MatchParticipantJerseyMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{12}
}

func (x *MatchParticipantJerseyMessage) GetShirtColor1() string {
	if x != nil {
		return x.ShirtColor1
	}
	return ""
}

func (x *MatchParticipantJerseyMessage) GetShirtColor2() string {
	if x != nil {
		return x.ShirtColor2
	}
	return ""
}

func (x *MatchParticipantJerseyMessage) GetPantsColor() string {
	if x != nil {
		return x.PantsColor
	}
	return ""
}

func (x *MatchParticipantJerseyMessage) GetSocksColor() string {
	if x != nil {
		return x.SocksColor
	}
	return ""
}

func (x *MatchParticipantJerseyMessage) GetJerseyDesign() JerseyDesign {
	if x != nil {
		return x.JerseyDesign
	}
	return JerseyDesign_UNKNOWN_JERSEY_DESIGN
}

func (x *MatchParticipantJerseyMessage) GetTeamPosition() int32 {
	if x != nil {
		return x.TeamPosition
	}
	return 0
}

func (x *MatchParticipantJerseyMessage) GetJerseyNumber() string {
	if x != nil {
		return x.JerseyNumber
	}
	return ""
}

type MatchLineupChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamPosition int32                 `protobuf:"varint,1,opt,name=teamPosition,proto3" json:"teamPosition,omitempty"`
	Starting     []*LineupEntryMessage `protobuf:"bytes,2,rep,name=starting,proto3" json:"starting,omitempty"`
	Substitute   []*LineupEntryMessage `protobuf:"bytes,3,rep,name=substitute,proto3" json:"substitute,omitempty"`
	Injured      []*LineupEntryMessage `protobuf:"bytes,4,rep,name=injured,proto3" json:"injured,omitempty"`
	Suspended    []*LineupEntryMessage `protobuf:"bytes,5,rep,name=suspended,proto3" json:"suspended,omitempty"`
	Coaches      []*LineupEntryMessage `protobuf:"bytes,6,rep,name=coaches,proto3" json:"coaches,omitempty"`
	Squad        []*LineupEntryMessage `protobuf:"bytes,7,rep,name=squad,proto3" json:"squad,omitempty"`
}

func (x *MatchLineupChangeMessage) Reset() {
	*x = MatchLineupChangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchLineupChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLineupChangeMessage) ProtoMessage() {}

func (x *MatchLineupChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLineupChangeMessage.ProtoReflect.Descriptor instead.
func (*MatchLineupChangeMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{13}
}

func (x *MatchLineupChangeMessage) GetTeamPosition() int32 {
	if x != nil {
		return x.TeamPosition
	}
	return 0
}

func (x *MatchLineupChangeMessage) GetStarting() []*LineupEntryMessage {
	if x != nil {
		return x.Starting
	}
	return nil
}

func (x *MatchLineupChangeMessage) GetSubstitute() []*LineupEntryMessage {
	if x != nil {
		return x.Substitute
	}
	return nil
}

func (x *MatchLineupChangeMessage) GetInjured() []*LineupEntryMessage {
	if x != nil {
		return x.Injured
	}
	return nil
}

func (x *MatchLineupChangeMessage) GetSuspended() []*LineupEntryMessage {
	if x != nil {
		return x.Suspended
	}
	return nil
}

func (x *MatchLineupChangeMessage) GetCoaches() []*LineupEntryMessage {
	if x != nil {
		return x.Coaches
	}
	return nil
}

func (x *MatchLineupChangeMessage) GetSquad() []*LineupEntryMessage {
	if x != nil {
		return x.Squad
	}
	return nil
}

type LineupEntryMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JerseyName    string              `protobuf:"bytes,2,opt,name=jerseyName,proto3" json:"jerseyName,omitempty"`
	FirstName     string              `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName      string              `protobuf:"bytes,4,opt,name=lastName,proto3" json:"lastName,omitempty"`
	JerseyNumber  int32               `protobuf:"varint,5,opt,name=jerseyNumber,proto3" json:"jerseyNumber,omitempty"`
	Position      ParticipantPosition `protobuf:"varint,6,opt,name=position,proto3,enum=com.sts.rpclib.ParticipantPosition" json:"position,omitempty"`
	FieldPosition int32               `protobuf:"varint,7,opt,name=fieldPosition,proto3" json:"fieldPosition,omitempty"`
	ElapsedIn     int32               `protobuf:"varint,8,opt,name=elapsedIn,proto3" json:"elapsedIn,omitempty"`
	ElapsedOut    int32               `protobuf:"varint,9,opt,name=elapsedOut,proto3" json:"elapsedOut,omitempty"`
	Captain       bool                `protobuf:"varint,10,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (x *LineupEntryMessage) Reset() {
	*x = LineupEntryMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineupEntryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineupEntryMessage) ProtoMessage() {}

func (x *LineupEntryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineupEntryMessage.ProtoReflect.Descriptor instead.
func (*LineupEntryMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{14}
}

func (x *LineupEntryMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LineupEntryMessage) GetJerseyName() string {
	if x != nil {
		return x.JerseyName
	}
	return ""
}

func (x *LineupEntryMessage) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *LineupEntryMessage) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *LineupEntryMessage) GetJerseyNumber() int32 {
	if x != nil {
		return x.JerseyNumber
	}
	return 0
}

func (x *LineupEntryMessage) GetPosition() ParticipantPosition {
	if x != nil {
		return x.Position
	}
	return ParticipantPosition_UNKNOWN_PERSON_TYPE
}

func (x *LineupEntryMessage) GetFieldPosition() int32 {
	if x != nil {
		return x.FieldPosition
	}
	return 0
}

func (x *LineupEntryMessage) GetElapsedIn() int32 {
	if x != nil {
		return x.ElapsedIn
	}
	return 0
}

func (x *LineupEntryMessage) GetElapsedOut() int32 {
	if x != nil {
		return x.ElapsedOut
	}
	return 0
}

func (x *LineupEntryMessage) GetCaptain() bool {
	if x != nil {
		return x.Captain
	}
	return false
}

// -
type ParticipantMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           []*LocalizedName               `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	Id             string                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Kn             ParticipantKind                `protobuf:"varint,3,opt,name=kn,proto3,enum=com.sts.rpclib.ParticipantKind" json:"kn,omitempty"`
	Country        *CountryMessage                `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Position       int32                          `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	Gender         int32                          `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`
	Index          int32                          `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	ShortName      string                         `protobuf:"bytes,8,opt,name=shortName,proto3" json:"shortName,omitempty"`
	Stats          *MatchParticipantStatsMessage  `protobuf:"bytes,9,opt,name=stats,proto3" json:"stats,omitempty"`
	Jersey         *MatchParticipantJerseyMessage `protobuf:"bytes,10,opt,name=jersey,proto3" json:"jersey,omitempty"`
	ConferenceId   string                         `protobuf:"bytes,11,opt,name=conferenceId,proto3" json:"conferenceId,omitempty"`
	ConferenceName string                         `protobuf:"bytes,12,opt,name=conferenceName,proto3" json:"conferenceName,omitempty"`
	DivisionId     string                         `protobuf:"bytes,13,opt,name=divisionId,proto3" json:"divisionId,omitempty"`
	DivisionName   string                         `protobuf:"bytes,14,opt,name=divisionName,proto3" json:"divisionName,omitempty"`
	FirstName      string                         `protobuf:"bytes,15,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName       string                         `protobuf:"bytes,16,opt,name=lastName,proto3" json:"lastName,omitempty"`
}

func (x *ParticipantMessage) Reset() {
	*x = ParticipantMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantMessage) ProtoMessage() {}

func (x *ParticipantMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantMessage.ProtoReflect.Descriptor instead.
func (*ParticipantMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{15}
}

func (x *ParticipantMessage) GetName() []*LocalizedName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ParticipantMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ParticipantMessage) GetKn() ParticipantKind {
	if x != nil {
		return x.Kn
	}
	return ParticipantKind_UNKNOWN_KIND
}

func (x *ParticipantMessage) GetCountry() *CountryMessage {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *ParticipantMessage) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ParticipantMessage) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *ParticipantMessage) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ParticipantMessage) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *ParticipantMessage) GetStats() *MatchParticipantStatsMessage {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ParticipantMessage) GetJersey() *MatchParticipantJerseyMessage {
	if x != nil {
		return x.Jersey
	}
	return nil
}

func (x *ParticipantMessage) GetConferenceId() string {
	if x != nil {
		return x.ConferenceId
	}
	return ""
}

func (x *ParticipantMessage) GetConferenceName() string {
	if x != nil {
		return x.ConferenceName
	}
	return ""
}

func (x *ParticipantMessage) GetDivisionId() string {
	if x != nil {
		return x.DivisionId
	}
	return ""
}

func (x *ParticipantMessage) GetDivisionName() string {
	if x != nil {
		return x.DivisionName
	}
	return ""
}

func (x *ParticipantMessage) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ParticipantMessage) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

// -
type CountryMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name []*LocalizedName `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	Id   string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CountryMessage) Reset() {
	*x = CountryMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryMessage) ProtoMessage() {}

func (x *CountryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryMessage.ProtoReflect.Descriptor instead.
func (*CountryMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{16}
}

func (x *CountryMessage) GetName() []*LocalizedName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CountryMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MatchStatsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamPosition int32           `protobuf:"varint,1,opt,name=teamPosition,proto3" json:"teamPosition,omitempty"`
	Stats        map[int32]int32 `protobuf:"bytes,15,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MatchStatsMessage) Reset() {
	*x = MatchStatsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStatsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStatsMessage) ProtoMessage() {}

func (x *MatchStatsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStatsMessage.ProtoReflect.Descriptor instead.
func (*MatchStatsMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{17}
}

func (x *MatchStatsMessage) GetTeamPosition() int32 {
	if x != nil {
		return x.TeamPosition
	}
	return 0
}

func (x *MatchStatsMessage) GetStats() map[int32]int32 {
	if x != nil {
		return x.Stats
	}
	return nil
}

type MatchStatsChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statistics []*MatchStatsMessage `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *MatchStatsChangeMessage) Reset() {
	*x = MatchStatsChangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStatsChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStatsChangeMessage) ProtoMessage() {}

func (x *MatchStatsChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStatsChangeMessage.ProtoReflect.Descriptor instead.
func (*MatchStatsChangeMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{18}
}

func (x *MatchStatsChangeMessage) GetStatistics() []*MatchStatsMessage {
	if x != nil {
		return x.Statistics
	}
	return nil
}

var File_match_proto protoreflect.FileDescriptor

var file_match_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x1a, 0x0b, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x14, 0x46, 0x75, 0x6c,
	0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x02, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a,
	0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a,
	0x14, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72,
	0x79, 0x22, 0x49, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x16,
	0x53, 0x63, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x04, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0a, 0x69,
	0x6e, 0x6a, 0x75, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x6a, 0x75, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x49,
	0x6e, 0x6a, 0x75, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e,
	0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e,
	0x6a, 0x75, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x04, 0x0a, 0x17, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x53, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x53, 0x75, 0x6d,
	0x12, 0x37, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x6c, 0x69, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x2b, 0x0a, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x3e, 0x0a,
	0x10, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a,
	0x15, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc1, 0x08, 0x0a, 0x1a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x4f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x75,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x75,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x49, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x69, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x1a, 0x38, 0x0a,
	0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x57,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x1e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x22, 0x95, 0x33, 0x0a, 0x1c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x59,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x47, 0x6f,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x48,
	0x61, 0x6c, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x48, 0x61, 0x6c, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x12, 0x36, 0x0a, 0x16, 0x77, 0x6f, 0x6e,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x77, 0x6f, 0x6e, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x17, 0x77, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61,
	0x6c, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x77, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c,
	0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x57, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x57, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x57, 0x6f, 0x6e, 0x41, 0x77, 0x61, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x57, 0x6f, 0x6e, 0x41, 0x77, 0x61, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x65, 0x44, 0x72, 0x61, 0x77, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x72, 0x65, 0x44, 0x72, 0x61, 0x77,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x6f, 0x72, 0x65, 0x44, 0x72, 0x61, 0x77, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x62, 0x6f, 0x72, 0x65, 0x44, 0x72, 0x61, 0x77, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x47, 0x6f, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c,
	0x66, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x12, 0x44, 0x0a,
	0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x48, 0x61, 0x6c, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c,
	0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c,
	0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x47, 0x6f, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x47, 0x6f,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x47,
	0x6f, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x67, 0x6f, 0x61, 0x6c, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x31, 0x78, 0x31, 0x35, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x67, 0x6f, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x31, 0x78, 0x31, 0x35, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x6f, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x31, 0x36, 0x78, 0x33,
	0x30, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x67, 0x6f, 0x61, 0x6c, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x31, 0x36, 0x78, 0x33, 0x30, 0x12, 0x32, 0x0a,
	0x14, 0x67, 0x6f, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x33, 0x31, 0x78, 0x34, 0x35, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x67, 0x6f, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x33, 0x31, 0x78, 0x34,
	0x35, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x6f, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x34, 0x36, 0x78, 0x36, 0x30, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x67, 0x6f, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x34, 0x36, 0x78, 0x36, 0x30, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x6f, 0x61, 0x6c, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x36, 0x31, 0x78, 0x37, 0x35, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x67, 0x6f, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x36, 0x31, 0x78, 0x37, 0x35, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x6f, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x37, 0x36, 0x78, 0x39,
	0x30, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x67, 0x6f, 0x61, 0x6c, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x37, 0x36, 0x78, 0x39, 0x30, 0x12, 0x2a, 0x0a,
	0x10, 0x67, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x42, 0x6f, 0x74, 0x68, 0x48, 0x61, 0x6c, 0x76, 0x65,
	0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x42,
	0x6f, 0x74, 0x68, 0x48, 0x61, 0x6c, 0x76, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x67, 0x6f, 0x61,
	0x6c, 0x49, 0x6e, 0x42, 0x6f, 0x74, 0x68, 0x48, 0x61, 0x6c, 0x76, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x67,
	0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x42, 0x6f, 0x74, 0x68, 0x48, 0x61, 0x6c, 0x76, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x72, 0x4d, 0x6f, 0x72, 0x65, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x64, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x72, 0x4d, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c,
	0x73, 0x12, 0x4a, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x65,
	0x4f, 0x72, 0x4d, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x72, 0x4d, 0x6f, 0x72, 0x65, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x6f, 0x6e, 0x54, 0x6f, 0x4e, 0x69, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x77, 0x6f, 0x6e, 0x54, 0x6f, 0x4e, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x6f, 0x6e,
	0x54, 0x6f, 0x4e, 0x69, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x77, 0x6f, 0x6e, 0x54, 0x6f, 0x4e, 0x69, 0x6c, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x64, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x64, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x64, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e,
	0x31, 0x78, 0x30, 0x55, 0x70, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x6f, 0x6e,
	0x57, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x55, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x6f, 0x6e,
	0x57, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x77, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x32, 0x78, 0x30, 0x55,
	0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e,
	0x32, 0x78, 0x30, 0x55, 0x70, 0x12, 0x36, 0x0a, 0x16, 0x77, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e,
	0x31, 0x78, 0x30, 0x55, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x77, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x31, 0x78,
	0x30, 0x55, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x18, 0x77, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x44, 0x6f, 0x77, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x77, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x44, 0x6f, 0x77, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x77, 0x6f, 0x6e,
	0x57, 0x68, 0x65, 0x6e, 0x32, 0x78, 0x30, 0x55, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x77, 0x6f, 0x6e, 0x57, 0x68,
	0x65, 0x6e, 0x32, 0x78, 0x30, 0x55, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x55, 0x70, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x68, 0x65, 0x6e,
	0x31, 0x78, 0x30, 0x55, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x77,
	0x68, 0x65, 0x6e, 0x32, 0x78, 0x30, 0x55, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x68, 0x65, 0x6e, 0x32, 0x78, 0x30, 0x55, 0x70, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30,
	0x44, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x77, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x68, 0x65, 0x6e, 0x32, 0x78, 0x30, 0x44, 0x6f,
	0x77, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x77, 0x68, 0x65, 0x6e, 0x32, 0x78, 0x30, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x19, 0x77, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x55, 0x70, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x77, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x55, 0x70, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x19, 0x77, 0x68, 0x65, 0x6e, 0x32, 0x78, 0x30, 0x55, 0x70, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x19, 0x77, 0x68, 0x65, 0x6e, 0x32, 0x78, 0x30, 0x55, 0x70, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a,
	0x1b, 0x77, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x77, 0x68, 0x65, 0x6e, 0x31, 0x78, 0x30, 0x44, 0x6f, 0x77, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x40, 0x0a, 0x1b, 0x77, 0x68, 0x65, 0x6e, 0x32, 0x78, 0x30, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x77, 0x68, 0x65, 0x6e, 0x32, 0x78, 0x30, 0x44, 0x6f, 0x77,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x54,
	0x65, 0x61, 0x6d, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x79,
	0x47, 0x6f, 0x61, 0x6c, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x47, 0x61, 0x73, 0x70, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x61, 0x73, 0x70, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x62, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61,
	0x6c, 0x73, 0x53, 0x75, 0x62, 0x62, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x50, 0x0a, 0x23, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53,
	0x75, 0x62, 0x62, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x62, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x47, 0x6f, 0x61, 0x6c,
	0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x73,
	0x65, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x68, 0x54,
	0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f,
	0x74, 0x68, 0x54, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x6f, 0x74,
	0x68, 0x54, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x62, 0x6f, 0x74, 0x68, 0x54, 0x6f,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x6c, 0x6f, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x4c, 0x6f, 0x73, 0x65, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x54,
	0x6f, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x52,
	0x6f, 0x77, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x52, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x47, 0x6f, 0x61, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x6e, 0x41, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x6e, 0x41, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x6e, 0x41, 0x74, 0x41, 0x77, 0x61, 0x79, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x6e, 0x41, 0x74, 0x41, 0x77, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x77, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x57, 0x69, 0x6e, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x77, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x57, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x59, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x24, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x24, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x47, 0x6f, 0x61, 0x6c, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x47, 0x6f, 0x61, 0x6c, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x64, 0x47,
	0x6f, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x68, 0x65, 0x61, 0x64, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x47, 0x6f, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x66,
	0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x74, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x74, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x6f,
	0x66, 0x66, 0x18, 0x56, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x6f, 0x66,
	0x66, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x74, 0x6f, 0x66, 0x66, 0x50, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x74, 0x6f,
	0x66, 0x66, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x18, 0x58, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x47, 0x6f, 0x61,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x18, 0x59, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x50, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x50, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x50, 0x6c, 0x75, 0x73, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x6f, 0x64, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x60, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x6f, 0x6f, 0x64, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68,
	0x6f, 0x74, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x53, 0x61, 0x76, 0x65, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x53, 0x61, 0x76, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x69, 0x65, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x67,
	0x6f, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x78, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6f, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x42, 0x6f, 0x78, 0x12, 0x3a, 0x0a, 0x18, 0x67, 0x6f, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x42, 0x6f, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x67, 0x6f, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x42, 0x6f, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x72, 0x65, 0x65, 0x6b, 0x69, 0x63,
	0x6b, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46,
	0x72, 0x65, 0x65, 0x6b, 0x69, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x46, 0x72, 0x65, 0x65, 0x6b, 0x69, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x46, 0x72, 0x65, 0x65, 0x6b, 0x69, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x52,
	0x6f, 0x77, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64,
	0x49, 0x6e, 0x52, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x6e, 0x49, 0x6e, 0x52, 0x6f,
	0x77, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x6f, 0x6e, 0x49, 0x6e, 0x52, 0x6f,
	0x77, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x52, 0x6f, 0x77, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x6f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x52, 0x6f, 0x77, 0x12, 0x26, 0x0a,
	0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x57, 0x69, 0x6e, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x57, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x6e, 0x32, 0x44, 0x6f, 0x77,
	0x6e, 0x18, 0x71, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x6f, 0x6e, 0x32, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x6f, 0x6e, 0x32, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x77,
	0x6f, 0x6e, 0x32, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e, 0x18, 0x73, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e,
	0x18, 0x75, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x57, 0x6f, 0x6e, 0x18, 0x76, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e, 0x18, 0x77, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x63, 0x65, 0x73, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x18, 0x79, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x57, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x7c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x57, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x7d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x18, 0x80, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e, 0x18, 0x81, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x57, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x57, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x82, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0e, 0x75, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0e, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x78,
	0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x49, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x78, 0x12, 0x2d, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x88, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x57, 0x6f, 0x6e, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x4c, 0x6f, 0x73,
	0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x69, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x4c, 0x6f, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x73,
	0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61,
	0x63, 0x6b, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12,
	0x37, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x1d, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4a, 0x65, 0x72,
	0x73, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68,
	0x69, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x68, 0x69, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x31, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x68, 0x69, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x40,
	0x0a, 0x0c, 0x6a, 0x65, 0x72, 0x73, 0x65, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4a, 0x65, 0x72, 0x73, 0x65, 0x79, 0x44, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x52, 0x0c, 0x6a, 0x65, 0x72, 0x73, 0x65, 0x79, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x65, 0x72, 0x73, 0x65, 0x79, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x65, 0x72, 0x73,
	0x65, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xba, 0x03, 0x0a, 0x18, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x07, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x07, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x73,
	0x71, 0x75, 0x61, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x73, 0x71, 0x75, 0x61, 0x64, 0x22, 0xe1, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x6a, 0x65, 0x72, 0x73, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6a, 0x65, 0x72, 0x73, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x65, 0x72, 0x73, 0x65, 0x79,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6a, 0x65,
	0x72, 0x73, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x22, 0xff, 0x04, 0x0a, 0x12, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x02, 0x6b, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x02, 0x6b, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x6a, 0x65,
	0x72, 0x73, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4a, 0x65, 0x72, 0x73,
	0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x6a, 0x65, 0x72, 0x73, 0x65,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x0e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xb5, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65,
	0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x38,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x2f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_match_proto_rawDescOnce sync.Once
	file_match_proto_rawDescData = file_match_proto_rawDesc
)

func file_match_proto_rawDescGZIP() []byte {
	file_match_proto_rawDescOnce.Do(func() {
		file_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_match_proto_rawDescData)
	})
	return file_match_proto_rawDescData
}

var file_match_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_match_proto_goTypes = []interface{}{
	(*FullMatchDataMessage)(nil),           // 0: com.sts.rpclib.FullMatchDataMessage
	(*MatchCommentaryEntry)(nil),           // 1: com.sts.rpclib.MatchCommentaryEntry
	(*CommentaryMessage)(nil),              // 2: com.sts.rpclib.CommentaryMessage
	(*AddCommentaryMessage)(nil),           // 3: com.sts.rpclib.AddCommentaryMessage
	(*MatchDeletedMessage)(nil),            // 4: com.sts.rpclib.MatchDeletedMessage
	(*ScoutConnectionMessage)(nil),         // 5: com.sts.rpclib.ScoutConnectionMessage
	(*MatchStatusChangeMessage)(nil),       // 6: com.sts.rpclib.MatchStatusChangeMessage
	(*MatchScoreChangeMessage)(nil),        // 7: com.sts.rpclib.MatchScoreChangeMessage
	(*MatchIncidentChangeMessage)(nil),     // 8: com.sts.rpclib.MatchIncidentChangeMessage
	(*MatchWinnerChangeMessage)(nil),       // 9: com.sts.rpclib.MatchWinnerChangeMessage
	(*MatchParticipantsChangeMessage)(nil), // 10: com.sts.rpclib.MatchParticipantsChangeMessage
	(*MatchParticipantStatsMessage)(nil),   // 11: com.sts.rpclib.MatchParticipantStatsMessage
	(*MatchParticipantJerseyMessage)(nil),  // 12: com.sts.rpclib.MatchParticipantJerseyMessage
	(*MatchLineupChangeMessage)(nil),       // 13: com.sts.rpclib.MatchLineupChangeMessage
	(*LineupEntryMessage)(nil),             // 14: com.sts.rpclib.LineupEntryMessage
	(*ParticipantMessage)(nil),             // 15: com.sts.rpclib.ParticipantMessage
	(*CountryMessage)(nil),                 // 16: com.sts.rpclib.CountryMessage
	(*MatchStatsMessage)(nil),              // 17: com.sts.rpclib.MatchStatsMessage
	(*MatchStatsChangeMessage)(nil),        // 18: com.sts.rpclib.MatchStatsChangeMessage
	nil,                                    // 19: com.sts.rpclib.MatchStatusChangeMessage.InjuryTimeEntry
	nil,                                    // 20: com.sts.rpclib.MatchScoreChangeMessage.ScoreValuesEntry
	nil,                                    // 21: com.sts.rpclib.MatchScoreChangeMessage.ScoreValuesFloatEntry
	nil,                                    // 22: com.sts.rpclib.MatchIncidentChangeMessage.ScoreEntry
	nil,                                    // 23: com.sts.rpclib.MatchIncidentChangeMessage.ScoreFloatEntry
	nil,                                    // 24: com.sts.rpclib.MatchStatsMessage.StatsEntry
	(Language)(0),                          // 25: com.sts.rpclib.Language
	(*LocalizedName)(nil),                  // 26: com.sts.rpclib.LocalizedName
	(CommentaryType)(0),                    // 27: com.sts.rpclib.CommentaryType
	(ScoutConnection)(0),                   // 28: com.sts.rpclib.ScoutConnection
	(MatchStatus)(0),                       // 29: com.sts.rpclib.MatchStatus
	(MatchOverallStatus)(0),                // 30: com.sts.rpclib.MatchOverallStatus
	(ElapsedType)(0),                       // 31: com.sts.rpclib.ElapsedType
	(ScoreType)(0),                         // 32: com.sts.rpclib.ScoreType
	(Sport)(0),                             // 33: com.sts.rpclib.Sport
	(Period)(0),                            // 34: com.sts.rpclib.Period
	(*AssistMessage)(nil),                  // 35: com.sts.rpclib.AssistMessage
	(JerseyDesign)(0),                      // 36: com.sts.rpclib.JerseyDesign
	(ParticipantPosition)(0),               // 37: com.sts.rpclib.ParticipantPosition
	(ParticipantKind)(0),                   // 38: com.sts.rpclib.ParticipantKind
}
var file_match_proto_depIdxs = []int32{
	25, // 0: com.sts.rpclib.MatchCommentaryEntry.language:type_name -> com.sts.rpclib.Language
	26, // 1: com.sts.rpclib.MatchCommentaryEntry.commentary:type_name -> com.sts.rpclib.LocalizedName
	27, // 2: com.sts.rpclib.MatchCommentaryEntry.type:type_name -> com.sts.rpclib.CommentaryType
	1,  // 3: com.sts.rpclib.CommentaryMessage.commentaries:type_name -> com.sts.rpclib.MatchCommentaryEntry
	25, // 4: com.sts.rpclib.AddCommentaryMessage.language:type_name -> com.sts.rpclib.Language
	1,  // 5: com.sts.rpclib.AddCommentaryMessage.commentary:type_name -> com.sts.rpclib.MatchCommentaryEntry
	28, // 6: com.sts.rpclib.ScoutConnectionMessage.connection:type_name -> com.sts.rpclib.ScoutConnection
	29, // 7: com.sts.rpclib.MatchStatusChangeMessage.status:type_name -> com.sts.rpclib.MatchStatus
	30, // 8: com.sts.rpclib.MatchStatusChangeMessage.overall:type_name -> com.sts.rpclib.MatchOverallStatus
	19, // 9: com.sts.rpclib.MatchStatusChangeMessage.injuryTime:type_name -> com.sts.rpclib.MatchStatusChangeMessage.InjuryTimeEntry
	31, // 10: com.sts.rpclib.MatchStatusChangeMessage.elapsedType:type_name -> com.sts.rpclib.ElapsedType
	29, // 11: com.sts.rpclib.MatchScoreChangeMessage.status:type_name -> com.sts.rpclib.MatchStatus
	32, // 12: com.sts.rpclib.MatchScoreChangeMessage.scoreType:type_name -> com.sts.rpclib.ScoreType
	20, // 13: com.sts.rpclib.MatchScoreChangeMessage.scoreValues:type_name -> com.sts.rpclib.MatchScoreChangeMessage.ScoreValuesEntry
	21, // 14: com.sts.rpclib.MatchScoreChangeMessage.scoreValuesFloat:type_name -> com.sts.rpclib.MatchScoreChangeMessage.ScoreValuesFloatEntry
	33, // 15: com.sts.rpclib.MatchScoreChangeMessage.sport:type_name -> com.sts.rpclib.Sport
	22, // 16: com.sts.rpclib.MatchIncidentChangeMessage.score:type_name -> com.sts.rpclib.MatchIncidentChangeMessage.ScoreEntry
	23, // 17: com.sts.rpclib.MatchIncidentChangeMessage.scoreFloat:type_name -> com.sts.rpclib.MatchIncidentChangeMessage.ScoreFloatEntry
	34, // 18: com.sts.rpclib.MatchIncidentChangeMessage.period:type_name -> com.sts.rpclib.Period
	35, // 19: com.sts.rpclib.MatchIncidentChangeMessage.assists:type_name -> com.sts.rpclib.AssistMessage
	15, // 20: com.sts.rpclib.MatchParticipantsChangeMessage.participants:type_name -> com.sts.rpclib.ParticipantMessage
	36, // 21: com.sts.rpclib.MatchParticipantJerseyMessage.jerseyDesign:type_name -> com.sts.rpclib.JerseyDesign
	14, // 22: com.sts.rpclib.MatchLineupChangeMessage.starting:type_name -> com.sts.rpclib.LineupEntryMessage
	14, // 23: com.sts.rpclib.MatchLineupChangeMessage.substitute:type_name -> com.sts.rpclib.LineupEntryMessage
	14, // 24: com.sts.rpclib.MatchLineupChangeMessage.injured:type_name -> com.sts.rpclib.LineupEntryMessage
	14, // 25: com.sts.rpclib.MatchLineupChangeMessage.suspended:type_name -> com.sts.rpclib.LineupEntryMessage
	14, // 26: com.sts.rpclib.MatchLineupChangeMessage.coaches:type_name -> com.sts.rpclib.LineupEntryMessage
	14, // 27: com.sts.rpclib.MatchLineupChangeMessage.squad:type_name -> com.sts.rpclib.LineupEntryMessage
	37, // 28: com.sts.rpclib.LineupEntryMessage.position:type_name -> com.sts.rpclib.ParticipantPosition
	26, // 29: com.sts.rpclib.ParticipantMessage.name:type_name -> com.sts.rpclib.LocalizedName
	38, // 30: com.sts.rpclib.ParticipantMessage.kn:type_name -> com.sts.rpclib.ParticipantKind
	16, // 31: com.sts.rpclib.ParticipantMessage.country:type_name -> com.sts.rpclib.CountryMessage
	11, // 32: com.sts.rpclib.ParticipantMessage.stats:type_name -> com.sts.rpclib.MatchParticipantStatsMessage
	12, // 33: com.sts.rpclib.ParticipantMessage.jersey:type_name -> com.sts.rpclib.MatchParticipantJerseyMessage
	26, // 34: com.sts.rpclib.CountryMessage.name:type_name -> com.sts.rpclib.LocalizedName
	24, // 35: com.sts.rpclib.MatchStatsMessage.stats:type_name -> com.sts.rpclib.MatchStatsMessage.StatsEntry
	17, // 36: com.sts.rpclib.MatchStatsChangeMessage.statistics:type_name -> com.sts.rpclib.MatchStatsMessage
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_match_proto_init() }
func file_match_proto_init() {
	if File_match_proto != nil {
		return
	}
	file_enums_proto_init()
	file_languages_proto_init()
	file_sports_proto_init()
	file_incident_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullMatchDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCommentaryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentaryMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCommentaryMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDeletedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoutConnectionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStatusChangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchScoreChangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchIncidentChangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchWinnerChangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchParticipantsChangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchParticipantStatsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchParticipantJerseyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchLineupChangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineupEntryMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStatsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStatsChangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_match_proto_goTypes,
		DependencyIndexes: file_match_proto_depIdxs,
		MessageInfos:      file_match_proto_msgTypes,
	}.Build()
	File_match_proto = out.File
	file_match_proto_rawDesc = nil
	file_match_proto_goTypes = nil
	file_match_proto_depIdxs = nil
}
