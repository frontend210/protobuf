// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.5
// source: enums.proto

package gorpclib

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RpcResponseStatus int32

const (
	RpcResponseStatus_SUCCESS RpcResponseStatus = 0
	RpcResponseStatus_ERROR   RpcResponseStatus = 1
	RpcResponseStatus_FATAL   RpcResponseStatus = 2
)

// Enum value maps for RpcResponseStatus.
var (
	RpcResponseStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR",
		2: "FATAL",
	}
	RpcResponseStatus_value = map[string]int32{
		"SUCCESS": 0,
		"ERROR":   1,
		"FATAL":   2,
	}
)

func (x RpcResponseStatus) Enum() *RpcResponseStatus {
	p := new(RpcResponseStatus)
	*p = x
	return p
}

func (x RpcResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (RpcResponseStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x RpcResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcResponseStatus.Descriptor instead.
func (RpcResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

type Teams int32

const (
	Teams_home Teams = 0
	Teams_away Teams = 1
)

// Enum value maps for Teams.
var (
	Teams_name = map[int32]string{
		0: "home",
		1: "away",
	}
	Teams_value = map[string]int32{
		"home": 0,
		"away": 1,
	}
)

func (x Teams) Enum() *Teams {
	p := new(Teams)
	*p = x
	return p
}

func (x Teams) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Teams) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (Teams) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x Teams) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Teams.Descriptor instead.
func (Teams) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

type JerseyDesign int32

const (
	JerseyDesign_UNKNOWN_JERSEY_DESIGN            JerseyDesign = 0
	JerseyDesign_SOLID_JERSEY_DESIGN              JerseyDesign = 1
	JerseyDesign_HORIZONTAL_STRIPES_JERSEY_DESIGN JerseyDesign = 2
	JerseyDesign_VERTICAL_STRIPES_JERSEY_DESIGN   JerseyDesign = 3
)

// Enum value maps for JerseyDesign.
var (
	JerseyDesign_name = map[int32]string{
		0: "UNKNOWN_JERSEY_DESIGN",
		1: "SOLID_JERSEY_DESIGN",
		2: "HORIZONTAL_STRIPES_JERSEY_DESIGN",
		3: "VERTICAL_STRIPES_JERSEY_DESIGN",
	}
	JerseyDesign_value = map[string]int32{
		"UNKNOWN_JERSEY_DESIGN":            0,
		"SOLID_JERSEY_DESIGN":              1,
		"HORIZONTAL_STRIPES_JERSEY_DESIGN": 2,
		"VERTICAL_STRIPES_JERSEY_DESIGN":   3,
	}
)

func (x JerseyDesign) Enum() *JerseyDesign {
	p := new(JerseyDesign)
	*p = x
	return p
}

func (x JerseyDesign) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JerseyDesign) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (JerseyDesign) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x JerseyDesign) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JerseyDesign.Descriptor instead.
func (JerseyDesign) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

type ScoutConnection int32

const (
	ScoutConnection_UNKNOWN_SCOUT_CONNECTION ScoutConnection = 0
	ScoutConnection_SCOUT_CONNECTED          ScoutConnection = 1
	ScoutConnection_SCOUT_DISCONNECTED       ScoutConnection = 2
)

// Enum value maps for ScoutConnection.
var (
	ScoutConnection_name = map[int32]string{
		0: "UNKNOWN_SCOUT_CONNECTION",
		1: "SCOUT_CONNECTED",
		2: "SCOUT_DISCONNECTED",
	}
	ScoutConnection_value = map[string]int32{
		"UNKNOWN_SCOUT_CONNECTION": 0,
		"SCOUT_CONNECTED":          1,
		"SCOUT_DISCONNECTED":       2,
	}
)

func (x ScoutConnection) Enum() *ScoutConnection {
	p := new(ScoutConnection)
	*p = x
	return p
}

func (x ScoutConnection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoutConnection) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[3].Descriptor()
}

func (ScoutConnection) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[3]
}

func (x ScoutConnection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoutConnection.Descriptor instead.
func (ScoutConnection) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{3}
}

type ElapsedType int32

const (
	ElapsedType_UNKNOWN_ELAPSED ElapsedType = 0
	ElapsedType_MINUTES         ElapsedType = 1
	ElapsedType_SECONDS         ElapsedType = 2
)

// Enum value maps for ElapsedType.
var (
	ElapsedType_name = map[int32]string{
		0: "UNKNOWN_ELAPSED",
		1: "MINUTES",
		2: "SECONDS",
	}
	ElapsedType_value = map[string]int32{
		"UNKNOWN_ELAPSED": 0,
		"MINUTES":         1,
		"SECONDS":         2,
	}
)

func (x ElapsedType) Enum() *ElapsedType {
	p := new(ElapsedType)
	*p = x
	return p
}

func (x ElapsedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElapsedType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[4].Descriptor()
}

func (ElapsedType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[4]
}

func (x ElapsedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElapsedType.Descriptor instead.
func (ElapsedType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{4}
}

type StatsType int32

const (
	StatsType_UNKNOWN_STAT             StatsType = 0
	StatsType_FOUL_STAT                StatsType = 1
	StatsType_THROW_IN_STAT            StatsType = 2
	StatsType_OFFSIDE_STAT             StatsType = 3
	StatsType_POSSESSION_STAT          StatsType = 4
	StatsType_CROSS_STAT               StatsType = 5
	StatsType_CORNER_STAT              StatsType = 6
	StatsType_YELLOW_CARD_STAT         StatsType = 7
	StatsType_RED_CARD_STAT            StatsType = 8
	StatsType_YELLOW_RED_CARD_STAT     StatsType = 9
	StatsType_SHOT_ON_STAT             StatsType = 10
	StatsType_SHOT_OFF_STAT            StatsType = 11
	StatsType_SHOT_WOOD_STAT           StatsType = 12
	StatsType_BLOCKED_SHOT_STAT        StatsType = 13
	StatsType_COUNTER_ATTACK_STAT      StatsType = 14
	StatsType_GOALKEEPER_SAVE_STAT     StatsType = 15
	StatsType_GOAL_KICK_STAT           StatsType = 16
	StatsType_FREE_KICK_STAT           StatsType = 17
	StatsType_TREATMENT_STAT           StatsType = 18
	StatsType_ATTACK_STAT              StatsType = 19
	StatsType_DANGEROUS_FREE_KICK_STAT StatsType = 20
	StatsType_DANGEROUS_ATTACK_STAT    StatsType = 21
)

// Enum value maps for StatsType.
var (
	StatsType_name = map[int32]string{
		0:  "UNKNOWN_STAT",
		1:  "FOUL_STAT",
		2:  "THROW_IN_STAT",
		3:  "OFFSIDE_STAT",
		4:  "POSSESSION_STAT",
		5:  "CROSS_STAT",
		6:  "CORNER_STAT",
		7:  "YELLOW_CARD_STAT",
		8:  "RED_CARD_STAT",
		9:  "YELLOW_RED_CARD_STAT",
		10: "SHOT_ON_STAT",
		11: "SHOT_OFF_STAT",
		12: "SHOT_WOOD_STAT",
		13: "BLOCKED_SHOT_STAT",
		14: "COUNTER_ATTACK_STAT",
		15: "GOALKEEPER_SAVE_STAT",
		16: "GOAL_KICK_STAT",
		17: "FREE_KICK_STAT",
		18: "TREATMENT_STAT",
		19: "ATTACK_STAT",
		20: "DANGEROUS_FREE_KICK_STAT",
		21: "DANGEROUS_ATTACK_STAT",
	}
	StatsType_value = map[string]int32{
		"UNKNOWN_STAT":             0,
		"FOUL_STAT":                1,
		"THROW_IN_STAT":            2,
		"OFFSIDE_STAT":             3,
		"POSSESSION_STAT":          4,
		"CROSS_STAT":               5,
		"CORNER_STAT":              6,
		"YELLOW_CARD_STAT":         7,
		"RED_CARD_STAT":            8,
		"YELLOW_RED_CARD_STAT":     9,
		"SHOT_ON_STAT":             10,
		"SHOT_OFF_STAT":            11,
		"SHOT_WOOD_STAT":           12,
		"BLOCKED_SHOT_STAT":        13,
		"COUNTER_ATTACK_STAT":      14,
		"GOALKEEPER_SAVE_STAT":     15,
		"GOAL_KICK_STAT":           16,
		"FREE_KICK_STAT":           17,
		"TREATMENT_STAT":           18,
		"ATTACK_STAT":              19,
		"DANGEROUS_FREE_KICK_STAT": 20,
		"DANGEROUS_ATTACK_STAT":    21,
	}
)

func (x StatsType) Enum() *StatsType {
	p := new(StatsType)
	*p = x
	return p
}

func (x StatsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatsType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[5].Descriptor()
}

func (StatsType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[5]
}

func (x StatsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatsType.Descriptor instead.
func (StatsType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{5}
}

type PitchConditions int32

const (
	PitchConditions_UNKNOWN_PITCH_CONDITIONS PitchConditions = 0
	PitchConditions_GOOD                     PitchConditions = 1
	PitchConditions_WET                      PitchConditions = 2
	PitchConditions_SNOW                     PitchConditions = 3
	PitchConditions_EXCELLENT                PitchConditions = 4
	PitchConditions_REGULAR                  PitchConditions = 5
	PitchConditions_WET_FAST                 PitchConditions = 6
	PitchConditions_SLOW_DUE_WATER           PitchConditions = 7
	PitchConditions_UNEVEN                   PitchConditions = 8
	PitchConditions_GOALMOUTHS_AFFECTED      PitchConditions = 9
	PitchConditions_HARD_FROZEN              PitchConditions = 10
	PitchConditions_ARTIFICIAL               PitchConditions = 11
)

// Enum value maps for PitchConditions.
var (
	PitchConditions_name = map[int32]string{
		0:  "UNKNOWN_PITCH_CONDITIONS",
		1:  "GOOD",
		2:  "WET",
		3:  "SNOW",
		4:  "EXCELLENT",
		5:  "REGULAR",
		6:  "WET_FAST",
		7:  "SLOW_DUE_WATER",
		8:  "UNEVEN",
		9:  "GOALMOUTHS_AFFECTED",
		10: "HARD_FROZEN",
		11: "ARTIFICIAL",
	}
	PitchConditions_value = map[string]int32{
		"UNKNOWN_PITCH_CONDITIONS": 0,
		"GOOD":                     1,
		"WET":                      2,
		"SNOW":                     3,
		"EXCELLENT":                4,
		"REGULAR":                  5,
		"WET_FAST":                 6,
		"SLOW_DUE_WATER":           7,
		"UNEVEN":                   8,
		"GOALMOUTHS_AFFECTED":      9,
		"HARD_FROZEN":              10,
		"ARTIFICIAL":               11,
	}
)

func (x PitchConditions) Enum() *PitchConditions {
	p := new(PitchConditions)
	*p = x
	return p
}

func (x PitchConditions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PitchConditions) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[6].Descriptor()
}

func (PitchConditions) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[6]
}

func (x PitchConditions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PitchConditions.Descriptor instead.
func (PitchConditions) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{6}
}

type WeatherConditions int32

const (
	WeatherConditions_UNKNOWN_WEATHER_CONDITION WeatherConditions = 0
	WeatherConditions_GOOD_WEATHER              WeatherConditions = 1
	WeatherConditions_WINDY                     WeatherConditions = 2
	WeatherConditions_STORMY                    WeatherConditions = 3
	WeatherConditions_RAIN                      WeatherConditions = 4
	WeatherConditions_SNOWFALL                  WeatherConditions = 5
	WeatherConditions_VERY_HOT                  WeatherConditions = 6
	WeatherConditions_HEAVY_RAIN                WeatherConditions = 7
	WeatherConditions_LIGHT_RAIN                WeatherConditions = 8
	WeatherConditions_CLOUDY                    WeatherConditions = 9
	WeatherConditions_HEAVY_SNOWFALL            WeatherConditions = 10
	WeatherConditions_LIGHT_SNOWFALL            WeatherConditions = 11
	WeatherConditions_HAIL                      WeatherConditions = 12
	WeatherConditions_STRONG_WIND               WeatherConditions = 13
	WeatherConditions_LIGHT_WIND                WeatherConditions = 14
	WeatherConditions_SUN                       WeatherConditions = 15
	WeatherConditions_HOT                       WeatherConditions = 16
	WeatherConditions_MILD                      WeatherConditions = 17
	WeatherConditions_COLD                      WeatherConditions = 18
	WeatherConditions_FOG                       WeatherConditions = 19
	WeatherConditions_THUNDERSTORM              WeatherConditions = 20
	WeatherConditions_INDOOR_VENUE              WeatherConditions = 21
)

// Enum value maps for WeatherConditions.
var (
	WeatherConditions_name = map[int32]string{
		0:  "UNKNOWN_WEATHER_CONDITION",
		1:  "GOOD_WEATHER",
		2:  "WINDY",
		3:  "STORMY",
		4:  "RAIN",
		5:  "SNOWFALL",
		6:  "VERY_HOT",
		7:  "HEAVY_RAIN",
		8:  "LIGHT_RAIN",
		9:  "CLOUDY",
		10: "HEAVY_SNOWFALL",
		11: "LIGHT_SNOWFALL",
		12: "HAIL",
		13: "STRONG_WIND",
		14: "LIGHT_WIND",
		15: "SUN",
		16: "HOT",
		17: "MILD",
		18: "COLD",
		19: "FOG",
		20: "THUNDERSTORM",
		21: "INDOOR_VENUE",
	}
	WeatherConditions_value = map[string]int32{
		"UNKNOWN_WEATHER_CONDITION": 0,
		"GOOD_WEATHER":              1,
		"WINDY":                     2,
		"STORMY":                    3,
		"RAIN":                      4,
		"SNOWFALL":                  5,
		"VERY_HOT":                  6,
		"HEAVY_RAIN":                7,
		"LIGHT_RAIN":                8,
		"CLOUDY":                    9,
		"HEAVY_SNOWFALL":            10,
		"LIGHT_SNOWFALL":            11,
		"HAIL":                      12,
		"STRONG_WIND":               13,
		"LIGHT_WIND":                14,
		"SUN":                       15,
		"HOT":                       16,
		"MILD":                      17,
		"COLD":                      18,
		"FOG":                       19,
		"THUNDERSTORM":              20,
		"INDOOR_VENUE":              21,
	}
)

func (x WeatherConditions) Enum() *WeatherConditions {
	p := new(WeatherConditions)
	*p = x
	return p
}

func (x WeatherConditions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeatherConditions) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[7].Descriptor()
}

func (WeatherConditions) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[7]
}

func (x WeatherConditions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeatherConditions.Descriptor instead.
func (WeatherConditions) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{7}
}

type AttendanceConditions int32

const (
	AttendanceConditions_UNKNOWN_ATTENDANCE AttendanceConditions = 0
	AttendanceConditions_SMALL              AttendanceConditions = 1
	AttendanceConditions_MEDIUM             AttendanceConditions = 2
	AttendanceConditions_FULL               AttendanceConditions = 3
)

// Enum value maps for AttendanceConditions.
var (
	AttendanceConditions_name = map[int32]string{
		0: "UNKNOWN_ATTENDANCE",
		1: "SMALL",
		2: "MEDIUM",
		3: "FULL",
	}
	AttendanceConditions_value = map[string]int32{
		"UNKNOWN_ATTENDANCE": 0,
		"SMALL":              1,
		"MEDIUM":             2,
		"FULL":               3,
	}
)

func (x AttendanceConditions) Enum() *AttendanceConditions {
	p := new(AttendanceConditions)
	*p = x
	return p
}

func (x AttendanceConditions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttendanceConditions) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[8].Descriptor()
}

func (AttendanceConditions) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[8]
}

func (x AttendanceConditions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttendanceConditions.Descriptor instead.
func (AttendanceConditions) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{8}
}

type ScoreType int32

const (
	ScoreType_UNKNOWN_SCORE ScoreType = 0
	// SOCCER
	ScoreType_RUNNING_SCORE           ScoreType = 1
	ScoreType_FIRST_HALF_SCORE        ScoreType = 2
	ScoreType_HT_SCORE                ScoreType = 3
	ScoreType_SECOND_HALF_SCORE       ScoreType = 4
	ScoreType_FT_SCORE                ScoreType = 5
	ScoreType_FIRST_EXTRA_TIME_SCORE  ScoreType = 6
	ScoreType_SECOND_EXTRA_TIME_SCORE ScoreType = 7
	ScoreType_HT_EXTRA_TIME_SCORE     ScoreType = 8
	ScoreType_PENALTY_SHOOTOUT_SCORE  ScoreType = 9
	// ICE HOCKEY
	ScoreType_PERIOD1_SCORE ScoreType = 10
	ScoreType_PERIOD2_SCORE ScoreType = 11
	ScoreType_PERIOD3_SCORE ScoreType = 12
	// BASKET
	ScoreType_QUARTER1_SCORE ScoreType = 13
	ScoreType_QUARTER2_SCORE ScoreType = 14
	ScoreType_QUARTER3_SCORE ScoreType = 15
	ScoreType_QUARTER4_SCORE ScoreType = 16
	// ICE/BASKET
	ScoreType_OVERTIME_SCORE ScoreType = 17
	// TENNIS
	ScoreType_GAME_SCORE      ScoreType = 18
	ScoreType_SET1_SCORE      ScoreType = 19
	ScoreType_SET2_SCORE      ScoreType = 20
	ScoreType_SET3_SCORE      ScoreType = 21
	ScoreType_SET4_SCORE      ScoreType = 22
	ScoreType_SET5_SCORE      ScoreType = 23
	ScoreType_TIEBREAK1_SCORE ScoreType = 24
	ScoreType_TIEBREAK2_SCORE ScoreType = 25
	ScoreType_TIEBREAK3_SCORE ScoreType = 26
	ScoreType_TIEBREAK4_SCORE ScoreType = 27
	ScoreType_TIEBREAK5_SCORE ScoreType = 28
	// CRICKET
	ScoreType_POINTS1_SCORE   ScoreType = 29
	ScoreType_POINTS2_SCORE   ScoreType = 30
	ScoreType_OVER1_SCORE     ScoreType = 31 // Float
	ScoreType_OVER2_SCORE     ScoreType = 32 // Float
	ScoreType_WICKETS1_SCORE  ScoreType = 33
	ScoreType_WICKETS2_SCORE  ScoreType = 34
	ScoreType_DECLARED1_SCORE ScoreType = 35
	ScoreType_DECLARED2_SCORE ScoreType = 36
	// This soccer score type contains the total score value for the penalty shootout and the ordinary time score
	// this means that the ordinary time score needs to be subtracted
	ScoreType_PENALTY_SHOOTOUT_TOTAL_SCORE ScoreType = 37
	// BASEBALL
	ScoreType_INNING_SCORES      ScoreType = 38
	ScoreType_EXTRA_INNING_SCORE ScoreType = 39
	ScoreType_COMPOSITE_SCORE    ScoreType = 40 // TODO: RUGBY, HANDBALL, VOLLEY, American Football, Golf
)

// Enum value maps for ScoreType.
var (
	ScoreType_name = map[int32]string{
		0:  "UNKNOWN_SCORE",
		1:  "RUNNING_SCORE",
		2:  "FIRST_HALF_SCORE",
		3:  "HT_SCORE",
		4:  "SECOND_HALF_SCORE",
		5:  "FT_SCORE",
		6:  "FIRST_EXTRA_TIME_SCORE",
		7:  "SECOND_EXTRA_TIME_SCORE",
		8:  "HT_EXTRA_TIME_SCORE",
		9:  "PENALTY_SHOOTOUT_SCORE",
		10: "PERIOD1_SCORE",
		11: "PERIOD2_SCORE",
		12: "PERIOD3_SCORE",
		13: "QUARTER1_SCORE",
		14: "QUARTER2_SCORE",
		15: "QUARTER3_SCORE",
		16: "QUARTER4_SCORE",
		17: "OVERTIME_SCORE",
		18: "GAME_SCORE",
		19: "SET1_SCORE",
		20: "SET2_SCORE",
		21: "SET3_SCORE",
		22: "SET4_SCORE",
		23: "SET5_SCORE",
		24: "TIEBREAK1_SCORE",
		25: "TIEBREAK2_SCORE",
		26: "TIEBREAK3_SCORE",
		27: "TIEBREAK4_SCORE",
		28: "TIEBREAK5_SCORE",
		29: "POINTS1_SCORE",
		30: "POINTS2_SCORE",
		31: "OVER1_SCORE",
		32: "OVER2_SCORE",
		33: "WICKETS1_SCORE",
		34: "WICKETS2_SCORE",
		35: "DECLARED1_SCORE",
		36: "DECLARED2_SCORE",
		37: "PENALTY_SHOOTOUT_TOTAL_SCORE",
		38: "INNING_SCORES",
		39: "EXTRA_INNING_SCORE",
		40: "COMPOSITE_SCORE",
	}
	ScoreType_value = map[string]int32{
		"UNKNOWN_SCORE":                0,
		"RUNNING_SCORE":                1,
		"FIRST_HALF_SCORE":             2,
		"HT_SCORE":                     3,
		"SECOND_HALF_SCORE":            4,
		"FT_SCORE":                     5,
		"FIRST_EXTRA_TIME_SCORE":       6,
		"SECOND_EXTRA_TIME_SCORE":      7,
		"HT_EXTRA_TIME_SCORE":          8,
		"PENALTY_SHOOTOUT_SCORE":       9,
		"PERIOD1_SCORE":                10,
		"PERIOD2_SCORE":                11,
		"PERIOD3_SCORE":                12,
		"QUARTER1_SCORE":               13,
		"QUARTER2_SCORE":               14,
		"QUARTER3_SCORE":               15,
		"QUARTER4_SCORE":               16,
		"OVERTIME_SCORE":               17,
		"GAME_SCORE":                   18,
		"SET1_SCORE":                   19,
		"SET2_SCORE":                   20,
		"SET3_SCORE":                   21,
		"SET4_SCORE":                   22,
		"SET5_SCORE":                   23,
		"TIEBREAK1_SCORE":              24,
		"TIEBREAK2_SCORE":              25,
		"TIEBREAK3_SCORE":              26,
		"TIEBREAK4_SCORE":              27,
		"TIEBREAK5_SCORE":              28,
		"POINTS1_SCORE":                29,
		"POINTS2_SCORE":                30,
		"OVER1_SCORE":                  31,
		"OVER2_SCORE":                  32,
		"WICKETS1_SCORE":               33,
		"WICKETS2_SCORE":               34,
		"DECLARED1_SCORE":              35,
		"DECLARED2_SCORE":              36,
		"PENALTY_SHOOTOUT_TOTAL_SCORE": 37,
		"INNING_SCORES":                38,
		"EXTRA_INNING_SCORE":           39,
		"COMPOSITE_SCORE":              40,
	}
)

func (x ScoreType) Enum() *ScoreType {
	p := new(ScoreType)
	*p = x
	return p
}

func (x ScoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[9].Descriptor()
}

func (ScoreType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[9]
}

func (x ScoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreType.Descriptor instead.
func (ScoreType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{9}
}

type CommentaryType int32

const (
	CommentaryType_UNKNOWN_COMMENTARY_TYPE CommentaryType = 0
	CommentaryType_TIME                    CommentaryType = 1
	CommentaryType_INJURY_TIME             CommentaryType = 2
	CommentaryType_INCIDENT_TYPE           CommentaryType = 3
	CommentaryType_TIMESTAMP               CommentaryType = 4
	CommentaryType_SCORE                   CommentaryType = 5
)

// Enum value maps for CommentaryType.
var (
	CommentaryType_name = map[int32]string{
		0: "UNKNOWN_COMMENTARY_TYPE",
		1: "TIME",
		2: "INJURY_TIME",
		3: "INCIDENT_TYPE",
		4: "TIMESTAMP",
		5: "SCORE",
	}
	CommentaryType_value = map[string]int32{
		"UNKNOWN_COMMENTARY_TYPE": 0,
		"TIME":                    1,
		"INJURY_TIME":             2,
		"INCIDENT_TYPE":           3,
		"TIMESTAMP":               4,
		"SCORE":                   5,
	}
)

func (x CommentaryType) Enum() *CommentaryType {
	p := new(CommentaryType)
	*p = x
	return p
}

func (x CommentaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[10].Descriptor()
}

func (CommentaryType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[10]
}

func (x CommentaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentaryType.Descriptor instead.
func (CommentaryType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{10}
}

type MessageType int32

const (
	MessageType_UNKNOWN_MESSAGE          MessageType = 0
	MessageType_FULL_MATCH_DATA          MessageType = 1
	MessageType_STAGE                    MessageType = 2
	MessageType_MATCH_DELETED            MessageType = 3
	MessageType_COMMENTARY               MessageType = 4
	MessageType_ADD_COMMENTARY           MessageType = 5
	MessageType_LEAGUE_TABLE             MessageType = 6
	MessageType_TOP_SCORER               MessageType = 7
	MessageType_ODDS                     MessageType = 8
	MessageType_WIDGET_EVENT             MessageType = 9
	MessageType_VAR_STATUS_MESSAGE       MessageType = 10
	MessageType_VAR_REASON_MESSAGE       MessageType = 11
	MessageType_PROVIDER_CONNECTION      MessageType = 12
	MessageType_SCOUT_CONNECTION         MessageType = 13
	MessageType_MATCH_STATUS_CHANGE      MessageType = 14
	MessageType_MATCH_SCORE_CHANGE       MessageType = 15
	MessageType_MATCH_INCIDENT_CHANGE    MessageType = 16
	MessageType_MATCH_WINNER_CHANGE      MessageType = 17
	MessageType_MATCH_PARTICIPANT_CHANGE MessageType = 18
	MessageType_MATCH_LINEUP_CHANGE      MessageType = 19
	// match stats
	MessageType_MATCH_STATS_CHANGE           MessageType = 20
	MessageType_DELETED_INCIDENT             MessageType = 21
	MessageType_HEARTBEAT                    MessageType = 22
	MessageType_STATUS                       MessageType = 23
	MessageType_LEAGUE_TABLE_FULL            MessageType = 24
	MessageType_TOP_SCORER_FULL              MessageType = 25
	MessageType_H2H                          MessageType = 26
	MessageType_IMAGE_FULL                   MessageType = 27
	MessageType_PARTICIPANTS_STATISTICS_FULL MessageType = 28
	MessageType_TEAM_RESULTS_MATCHES         MessageType = 29
	MessageType_MATCH_ODDS                   MessageType = 30
	MessageType_TEAM_PAGE                    MessageType = 31
	MessageType_TEAM_PAGE_FULL               MessageType = 32
	MessageType_TEAM_FIXTURES_MATCHES        MessageType = 33
	MessageType_DRAW_FULL                    MessageType = 34
	MessageType_RANKINGS                     MessageType = 35
	MessageType_RANKINGS_FULL                MessageType = 36
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "UNKNOWN_MESSAGE",
		1:  "FULL_MATCH_DATA",
		2:  "STAGE",
		3:  "MATCH_DELETED",
		4:  "COMMENTARY",
		5:  "ADD_COMMENTARY",
		6:  "LEAGUE_TABLE",
		7:  "TOP_SCORER",
		8:  "ODDS",
		9:  "WIDGET_EVENT",
		10: "VAR_STATUS_MESSAGE",
		11: "VAR_REASON_MESSAGE",
		12: "PROVIDER_CONNECTION",
		13: "SCOUT_CONNECTION",
		14: "MATCH_STATUS_CHANGE",
		15: "MATCH_SCORE_CHANGE",
		16: "MATCH_INCIDENT_CHANGE",
		17: "MATCH_WINNER_CHANGE",
		18: "MATCH_PARTICIPANT_CHANGE",
		19: "MATCH_LINEUP_CHANGE",
		20: "MATCH_STATS_CHANGE",
		21: "DELETED_INCIDENT",
		22: "HEARTBEAT",
		23: "STATUS",
		24: "LEAGUE_TABLE_FULL",
		25: "TOP_SCORER_FULL",
		26: "H2H",
		27: "IMAGE_FULL",
		28: "PARTICIPANTS_STATISTICS_FULL",
		29: "TEAM_RESULTS_MATCHES",
		30: "MATCH_ODDS",
		31: "TEAM_PAGE",
		32: "TEAM_PAGE_FULL",
		33: "TEAM_FIXTURES_MATCHES",
		34: "DRAW_FULL",
		35: "RANKINGS",
		36: "RANKINGS_FULL",
	}
	MessageType_value = map[string]int32{
		"UNKNOWN_MESSAGE":              0,
		"FULL_MATCH_DATA":              1,
		"STAGE":                        2,
		"MATCH_DELETED":                3,
		"COMMENTARY":                   4,
		"ADD_COMMENTARY":               5,
		"LEAGUE_TABLE":                 6,
		"TOP_SCORER":                   7,
		"ODDS":                         8,
		"WIDGET_EVENT":                 9,
		"VAR_STATUS_MESSAGE":           10,
		"VAR_REASON_MESSAGE":           11,
		"PROVIDER_CONNECTION":          12,
		"SCOUT_CONNECTION":             13,
		"MATCH_STATUS_CHANGE":          14,
		"MATCH_SCORE_CHANGE":           15,
		"MATCH_INCIDENT_CHANGE":        16,
		"MATCH_WINNER_CHANGE":          17,
		"MATCH_PARTICIPANT_CHANGE":     18,
		"MATCH_LINEUP_CHANGE":          19,
		"MATCH_STATS_CHANGE":           20,
		"DELETED_INCIDENT":             21,
		"HEARTBEAT":                    22,
		"STATUS":                       23,
		"LEAGUE_TABLE_FULL":            24,
		"TOP_SCORER_FULL":              25,
		"H2H":                          26,
		"IMAGE_FULL":                   27,
		"PARTICIPANTS_STATISTICS_FULL": 28,
		"TEAM_RESULTS_MATCHES":         29,
		"MATCH_ODDS":                   30,
		"TEAM_PAGE":                    31,
		"TEAM_PAGE_FULL":               32,
		"TEAM_FIXTURES_MATCHES":        33,
		"DRAW_FULL":                    34,
		"RANKINGS":                     35,
		"RANKINGS_FULL":                36,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[11].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[11]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{11}
}

type ParticipantPosition int32

const (
	ParticipantPosition_UNKNOWN_PERSON_TYPE       ParticipantPosition = 0
	ParticipantPosition_GOALKEEPER                ParticipantPosition = 1
	ParticipantPosition_DEFENDER                  ParticipantPosition = 2
	ParticipantPosition_MIDFIELDER                ParticipantPosition = 3
	ParticipantPosition_FORWARD                   ParticipantPosition = 4
	ParticipantPosition_SUBSTITUTE_PLAYER         ParticipantPosition = 5
	ParticipantPosition_INJURED                   ParticipantPosition = 6
	ParticipantPosition_SUSPENDED_POSITION        ParticipantPosition = 7
	ParticipantPosition_UNAVAILABLE               ParticipantPosition = 8
	ParticipantPosition_COACH                     ParticipantPosition = 9
	ParticipantPosition_PITCHER                   ParticipantPosition = 10
	ParticipantPosition_BATTER                    ParticipantPosition = 11
	ParticipantPosition_DOUBTFUL                  ParticipantPosition = 12
	ParticipantPosition_STARTER                   ParticipantPosition = 13
	ParticipantPosition_LEFT_BACK                 ParticipantPosition = 14
	ParticipantPosition_LEFT_WING                 ParticipantPosition = 15
	ParticipantPosition_RIGHT_BACK                ParticipantPosition = 16
	ParticipantPosition_RIGHT_WING                ParticipantPosition = 17
	ParticipantPosition_CENTER                    ParticipantPosition = 18
	ParticipantPosition_PIVOT                     ParticipantPosition = 19
	ParticipantPosition_PLAY_MAKER                ParticipantPosition = 20
	ParticipantPosition_OFFENSIVE_LINE            ParticipantPosition = 21
	ParticipantPosition_DEFENSIVE_LINE            ParticipantPosition = 22
	ParticipantPosition_OFFENSIVE_BACK            ParticipantPosition = 23
	ParticipantPosition_DEFENSIVE_BACK            ParticipantPosition = 24
	ParticipantPosition_RUNNING_BACK              ParticipantPosition = 25
	ParticipantPosition_QUARTER_BACK              ParticipantPosition = 26
	ParticipantPosition_SLOT_BACK                 ParticipantPosition = 27
	ParticipantPosition_HALF_BACK                 ParticipantPosition = 28
	ParticipantPosition_LINE_BACKER               ParticipantPosition = 29
	ParticipantPosition_KICKER                    ParticipantPosition = 30
	ParticipantPosition_PLACE_KICKER              ParticipantPosition = 31
	ParticipantPosition_TIGHT_END                 ParticipantPosition = 32
	ParticipantPosition_SPLIT_END                 ParticipantPosition = 33
	ParticipantPosition_GUARD                     ParticipantPosition = 34
	ParticipantPosition_SHOOTING_GUARD            ParticipantPosition = 35
	ParticipantPosition_POINT_GUARD               ParticipantPosition = 36
	ParticipantPosition_SMALL_FORWARD             ParticipantPosition = 37
	ParticipantPosition_POWER_FORWARD             ParticipantPosition = 38
	ParticipantPosition_FIRST_BASE                ParticipantPosition = 39
	ParticipantPosition_SECOND_BASE               ParticipantPosition = 40
	ParticipantPosition_THIRD_BASE                ParticipantPosition = 41
	ParticipantPosition_OUTFIELD                  ParticipantPosition = 42
	ParticipantPosition_LEFT_OUTFIELD             ParticipantPosition = 43
	ParticipantPosition_CENTER_OUTFIELD           ParticipantPosition = 44
	ParticipantPosition_RIGHT_OUTFIELD            ParticipantPosition = 45
	ParticipantPosition_CATCHER                   ParticipantPosition = 46
	ParticipantPosition_PUNTER                    ParticipantPosition = 47
	ParticipantPosition_UTILITY_PLAYER            ParticipantPosition = 48
	ParticipantPosition_RELIEVER                  ParticipantPosition = 49
	ParticipantPosition_STARTER_GUY               ParticipantPosition = 50
	ParticipantPosition_SHORT_STOP                ParticipantPosition = 51
	ParticipantPosition_DESIGNATED_HITTER         ParticipantPosition = 52
	ParticipantPosition_WIDE_RECEIVER             ParticipantPosition = 53
	ParticipantPosition_COACH_MANAGER             ParticipantPosition = 54
	ParticipantPosition_COACH_ASSISTANT           ParticipantPosition = 55
	ParticipantPosition_COACH_SUSPENDED           ParticipantPosition = 56
	ParticipantPosition_NATIONAL_TEAM_DUTY        ParticipantPosition = 57
	ParticipantPosition_CAPTAIN                   ParticipantPosition = 58
	ParticipantPosition_WICKET_KEEPER             ParticipantPosition = 59
	ParticipantPosition_CAPTAIN_WICKET_KEEPER     ParticipantPosition = 60
	ParticipantPosition_RESERVE                   ParticipantPosition = 61
	ParticipantPosition_ALL_ROUNDER               ParticipantPosition = 62
	ParticipantPosition_BATSMAN                   ParticipantPosition = 63
	ParticipantPosition_BOWLER                    ParticipantPosition = 64
	ParticipantPosition_CAPTAIN_AND_WICKET_KEEPER ParticipantPosition = 65
	ParticipantPosition_CAPTAIN_AND_ALL_ROUNDER   ParticipantPosition = 66
	ParticipantPosition_CAPTAIN_AND_BATSMAN       ParticipantPosition = 67
	ParticipantPosition_CAPTAIN_AND_BOWLER        ParticipantPosition = 68
)

// Enum value maps for ParticipantPosition.
var (
	ParticipantPosition_name = map[int32]string{
		0:  "UNKNOWN_PERSON_TYPE",
		1:  "GOALKEEPER",
		2:  "DEFENDER",
		3:  "MIDFIELDER",
		4:  "FORWARD",
		5:  "SUBSTITUTE_PLAYER",
		6:  "INJURED",
		7:  "SUSPENDED_POSITION",
		8:  "UNAVAILABLE",
		9:  "COACH",
		10: "PITCHER",
		11: "BATTER",
		12: "DOUBTFUL",
		13: "STARTER",
		14: "LEFT_BACK",
		15: "LEFT_WING",
		16: "RIGHT_BACK",
		17: "RIGHT_WING",
		18: "CENTER",
		19: "PIVOT",
		20: "PLAY_MAKER",
		21: "OFFENSIVE_LINE",
		22: "DEFENSIVE_LINE",
		23: "OFFENSIVE_BACK",
		24: "DEFENSIVE_BACK",
		25: "RUNNING_BACK",
		26: "QUARTER_BACK",
		27: "SLOT_BACK",
		28: "HALF_BACK",
		29: "LINE_BACKER",
		30: "KICKER",
		31: "PLACE_KICKER",
		32: "TIGHT_END",
		33: "SPLIT_END",
		34: "GUARD",
		35: "SHOOTING_GUARD",
		36: "POINT_GUARD",
		37: "SMALL_FORWARD",
		38: "POWER_FORWARD",
		39: "FIRST_BASE",
		40: "SECOND_BASE",
		41: "THIRD_BASE",
		42: "OUTFIELD",
		43: "LEFT_OUTFIELD",
		44: "CENTER_OUTFIELD",
		45: "RIGHT_OUTFIELD",
		46: "CATCHER",
		47: "PUNTER",
		48: "UTILITY_PLAYER",
		49: "RELIEVER",
		50: "STARTER_GUY",
		51: "SHORT_STOP",
		52: "DESIGNATED_HITTER",
		53: "WIDE_RECEIVER",
		54: "COACH_MANAGER",
		55: "COACH_ASSISTANT",
		56: "COACH_SUSPENDED",
		57: "NATIONAL_TEAM_DUTY",
		58: "CAPTAIN",
		59: "WICKET_KEEPER",
		60: "CAPTAIN_WICKET_KEEPER",
		61: "RESERVE",
		62: "ALL_ROUNDER",
		63: "BATSMAN",
		64: "BOWLER",
		65: "CAPTAIN_AND_WICKET_KEEPER",
		66: "CAPTAIN_AND_ALL_ROUNDER",
		67: "CAPTAIN_AND_BATSMAN",
		68: "CAPTAIN_AND_BOWLER",
	}
	ParticipantPosition_value = map[string]int32{
		"UNKNOWN_PERSON_TYPE":       0,
		"GOALKEEPER":                1,
		"DEFENDER":                  2,
		"MIDFIELDER":                3,
		"FORWARD":                   4,
		"SUBSTITUTE_PLAYER":         5,
		"INJURED":                   6,
		"SUSPENDED_POSITION":        7,
		"UNAVAILABLE":               8,
		"COACH":                     9,
		"PITCHER":                   10,
		"BATTER":                    11,
		"DOUBTFUL":                  12,
		"STARTER":                   13,
		"LEFT_BACK":                 14,
		"LEFT_WING":                 15,
		"RIGHT_BACK":                16,
		"RIGHT_WING":                17,
		"CENTER":                    18,
		"PIVOT":                     19,
		"PLAY_MAKER":                20,
		"OFFENSIVE_LINE":            21,
		"DEFENSIVE_LINE":            22,
		"OFFENSIVE_BACK":            23,
		"DEFENSIVE_BACK":            24,
		"RUNNING_BACK":              25,
		"QUARTER_BACK":              26,
		"SLOT_BACK":                 27,
		"HALF_BACK":                 28,
		"LINE_BACKER":               29,
		"KICKER":                    30,
		"PLACE_KICKER":              31,
		"TIGHT_END":                 32,
		"SPLIT_END":                 33,
		"GUARD":                     34,
		"SHOOTING_GUARD":            35,
		"POINT_GUARD":               36,
		"SMALL_FORWARD":             37,
		"POWER_FORWARD":             38,
		"FIRST_BASE":                39,
		"SECOND_BASE":               40,
		"THIRD_BASE":                41,
		"OUTFIELD":                  42,
		"LEFT_OUTFIELD":             43,
		"CENTER_OUTFIELD":           44,
		"RIGHT_OUTFIELD":            45,
		"CATCHER":                   46,
		"PUNTER":                    47,
		"UTILITY_PLAYER":            48,
		"RELIEVER":                  49,
		"STARTER_GUY":               50,
		"SHORT_STOP":                51,
		"DESIGNATED_HITTER":         52,
		"WIDE_RECEIVER":             53,
		"COACH_MANAGER":             54,
		"COACH_ASSISTANT":           55,
		"COACH_SUSPENDED":           56,
		"NATIONAL_TEAM_DUTY":        57,
		"CAPTAIN":                   58,
		"WICKET_KEEPER":             59,
		"CAPTAIN_WICKET_KEEPER":     60,
		"RESERVE":                   61,
		"ALL_ROUNDER":               62,
		"BATSMAN":                   63,
		"BOWLER":                    64,
		"CAPTAIN_AND_WICKET_KEEPER": 65,
		"CAPTAIN_AND_ALL_ROUNDER":   66,
		"CAPTAIN_AND_BATSMAN":       67,
		"CAPTAIN_AND_BOWLER":        68,
	}
)

func (x ParticipantPosition) Enum() *ParticipantPosition {
	p := new(ParticipantPosition)
	*p = x
	return p
}

func (x ParticipantPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[12].Descriptor()
}

func (ParticipantPosition) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[12]
}

func (x ParticipantPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantPosition.Descriptor instead.
func (ParticipantPosition) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{12}
}

type Gender int32

const (
	Gender_UNKNOWN_GENDER Gender = 0
	Gender_MALE           Gender = 1
	Gender_FEMALE         Gender = 2
	Gender_MIXED          Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "UNKNOWN_GENDER",
		1: "MALE",
		2: "FEMALE",
		3: "MIXED",
	}
	Gender_value = map[string]int32{
		"UNKNOWN_GENDER": 0,
		"MALE":           1,
		"FEMALE":         2,
		"MIXED":          3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[13].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[13]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{13}
}

type EventType int32

const (
	EventType_UNKNOWN_EVENT         EventType = 0
	EventType_TEAM_VS_TEAM          EventType = 1
	EventType_MALE_SINGLE_MATCH     EventType = 2
	EventType_MALE_DOUBLE_MATCH     EventType = 3
	EventType_FEMALE_SINGLE_MATCH   EventType = 4
	EventType_FEMALE_DOUBLE_MATCH   EventType = 5
	EventType_MIXED_DOUBLE_MATCH    EventType = 6
	EventType_SINGLE_MATCH          EventType = 7
	EventType_DOUBLE_MATCH          EventType = 8
	EventType_MATCH_40_OVERS        EventType = 9
	EventType_MATCH_45_OVERS        EventType = 10
	EventType_MATCH_50_OVERS        EventType = 11
	EventType_T_20                  EventType = 12
	EventType_T_20_INTL             EventType = 13
	EventType_ODI                   EventType = 14
	EventType_MATCH_ONE_DAY         EventType = 15
	EventType_TEST                  EventType = 16
	EventType_LIST_A                EventType = 17
	EventType_LIST_A_ODI            EventType = 18
	EventType_MATCH_5_OVERS         EventType = 19
	EventType_MATCH_10_OVERS        EventType = 20
	EventType_MATCH_35_OVERS        EventType = 21
	EventType_MATCH_100_BALLS       EventType = 22
	EventType_TEST_3_DAYS           EventType = 23
	EventType_TEST_4_DAYS           EventType = 24
	EventType_TEST_5_DAYS           EventType = 25
	EventType_TEST_6_DAYS           EventType = 26
	EventType_TEST_YOUTH            EventType = 27
	EventType_ICL                   EventType = 28
	EventType_IPL                   EventType = 29
	EventType_MATCH_2_DAYS          EventType = 30
	EventType_MATCH_3_DAYS          EventType = 31
	EventType_MATCH_4_DAYS          EventType = 32
	EventType_MATCH_5_DAYS          EventType = 33
	EventType_MATCH_6_OVERS         EventType = 34
	EventType_MATCH_7_OVERS         EventType = 35
	EventType_MATCH_8_OVERS         EventType = 36
	EventType_MATCH_9_OVERS         EventType = 37
	EventType_MATCH_60_OVERS        EventType = 38
	EventType_ONLY_T_20             EventType = 39
	EventType_LIST_A_T_20           EventType = 40
	EventType_T_20_WORLD_CUP        EventType = 41
	EventType_T_20_WORLD_CUP_FEMALE EventType = 42
	EventType_T_20_YOUTH            EventType = 43
	EventType_ONLY_ODI              EventType = 44
	EventType_ODI_WORLD_CUP         EventType = 45
	EventType_ODI_YOUTH             EventType = 46
	EventType_LIST_A_ODI_FEMALE     EventType = 47
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "UNKNOWN_EVENT",
		1:  "TEAM_VS_TEAM",
		2:  "MALE_SINGLE_MATCH",
		3:  "MALE_DOUBLE_MATCH",
		4:  "FEMALE_SINGLE_MATCH",
		5:  "FEMALE_DOUBLE_MATCH",
		6:  "MIXED_DOUBLE_MATCH",
		7:  "SINGLE_MATCH",
		8:  "DOUBLE_MATCH",
		9:  "MATCH_40_OVERS",
		10: "MATCH_45_OVERS",
		11: "MATCH_50_OVERS",
		12: "T_20",
		13: "T_20_INTL",
		14: "ODI",
		15: "MATCH_ONE_DAY",
		16: "TEST",
		17: "LIST_A",
		18: "LIST_A_ODI",
		19: "MATCH_5_OVERS",
		20: "MATCH_10_OVERS",
		21: "MATCH_35_OVERS",
		22: "MATCH_100_BALLS",
		23: "TEST_3_DAYS",
		24: "TEST_4_DAYS",
		25: "TEST_5_DAYS",
		26: "TEST_6_DAYS",
		27: "TEST_YOUTH",
		28: "ICL",
		29: "IPL",
		30: "MATCH_2_DAYS",
		31: "MATCH_3_DAYS",
		32: "MATCH_4_DAYS",
		33: "MATCH_5_DAYS",
		34: "MATCH_6_OVERS",
		35: "MATCH_7_OVERS",
		36: "MATCH_8_OVERS",
		37: "MATCH_9_OVERS",
		38: "MATCH_60_OVERS",
		39: "ONLY_T_20",
		40: "LIST_A_T_20",
		41: "T_20_WORLD_CUP",
		42: "T_20_WORLD_CUP_FEMALE",
		43: "T_20_YOUTH",
		44: "ONLY_ODI",
		45: "ODI_WORLD_CUP",
		46: "ODI_YOUTH",
		47: "LIST_A_ODI_FEMALE",
	}
	EventType_value = map[string]int32{
		"UNKNOWN_EVENT":         0,
		"TEAM_VS_TEAM":          1,
		"MALE_SINGLE_MATCH":     2,
		"MALE_DOUBLE_MATCH":     3,
		"FEMALE_SINGLE_MATCH":   4,
		"FEMALE_DOUBLE_MATCH":   5,
		"MIXED_DOUBLE_MATCH":    6,
		"SINGLE_MATCH":          7,
		"DOUBLE_MATCH":          8,
		"MATCH_40_OVERS":        9,
		"MATCH_45_OVERS":        10,
		"MATCH_50_OVERS":        11,
		"T_20":                  12,
		"T_20_INTL":             13,
		"ODI":                   14,
		"MATCH_ONE_DAY":         15,
		"TEST":                  16,
		"LIST_A":                17,
		"LIST_A_ODI":            18,
		"MATCH_5_OVERS":         19,
		"MATCH_10_OVERS":        20,
		"MATCH_35_OVERS":        21,
		"MATCH_100_BALLS":       22,
		"TEST_3_DAYS":           23,
		"TEST_4_DAYS":           24,
		"TEST_5_DAYS":           25,
		"TEST_6_DAYS":           26,
		"TEST_YOUTH":            27,
		"ICL":                   28,
		"IPL":                   29,
		"MATCH_2_DAYS":          30,
		"MATCH_3_DAYS":          31,
		"MATCH_4_DAYS":          32,
		"MATCH_5_DAYS":          33,
		"MATCH_6_OVERS":         34,
		"MATCH_7_OVERS":         35,
		"MATCH_8_OVERS":         36,
		"MATCH_9_OVERS":         37,
		"MATCH_60_OVERS":        38,
		"ONLY_T_20":             39,
		"LIST_A_T_20":           40,
		"T_20_WORLD_CUP":        41,
		"T_20_WORLD_CUP_FEMALE": 42,
		"T_20_YOUTH":            43,
		"ONLY_ODI":              44,
		"ODI_WORLD_CUP":         45,
		"ODI_YOUTH":             46,
		"LIST_A_ODI_FEMALE":     47,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[14].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[14]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{14}
}

type UpdateAction int32

const (
	UpdateAction_UPDATE UpdateAction = 0
	UpdateAction_DELETE UpdateAction = 1
	UpdateAction_CREATE UpdateAction = 2
)

// Enum value maps for UpdateAction.
var (
	UpdateAction_name = map[int32]string{
		0: "UPDATE",
		1: "DELETE",
		2: "CREATE",
	}
	UpdateAction_value = map[string]int32{
		"UPDATE": 0,
		"DELETE": 1,
		"CREATE": 2,
	}
)

func (x UpdateAction) Enum() *UpdateAction {
	p := new(UpdateAction)
	*p = x
	return p
}

func (x UpdateAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateAction) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[15].Descriptor()
}

func (UpdateAction) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[15]
}

func (x UpdateAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateAction.Descriptor instead.
func (UpdateAction) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{15}
}

type IncidentType int32

const (
	IncidentType_UNKNOWN_INCIDENT            IncidentType = 0
	IncidentType_SUBSTITUTION                IncidentType = 1
	IncidentType_SUBSTITUTION_OUT            IncidentType = 2
	IncidentType_SUBSTITUTION_IN             IncidentType = 3
	IncidentType_REGULAR_GOAL                IncidentType = 4
	IncidentType_PENALTY                     IncidentType = 5
	IncidentType_MISSED_PENALTY              IncidentType = 6
	IncidentType_OWN_GOAL                    IncidentType = 7
	IncidentType_SHOOTOUT_MISSED_PENALTY     IncidentType = 8
	IncidentType_SHOOTOUT_PENALTY            IncidentType = 9
	IncidentType_YELLOW_CARD                 IncidentType = 10
	IncidentType_SECOND_YELLOW_CARD          IncidentType = 11
	IncidentType_RED_CARD                    IncidentType = 12
	IncidentType_EXTRA_TIME_GOAL             IncidentType = 13
	IncidentType_EXTRA_TIME_OWN_GOAL         IncidentType = 14
	IncidentType_CANCELED_GOAL               IncidentType = 15
	IncidentType_ASSIST                      IncidentType = 16
	IncidentType_SECOND_ASSIST               IncidentType = 17
	IncidentType_CANCELED_PENALTY            IncidentType = 18
	IncidentType_CANCELED_RED_CARD           IncidentType = 19
	IncidentType_CANCELED_YELLOW_CARD        IncidentType = 20
	IncidentType_CANCELED_SECOND_YELLOW_CARD IncidentType = 21
	IncidentType_VAR                         IncidentType = 22
	IncidentType_PENALTY_AWARDED             IncidentType = 23
	IncidentType_CORNER_KICK                 IncidentType = 24
	// this is common with RBALL
	IncidentType_INCIDENT_CONFIRMED         IncidentType = 25
	IncidentType_VAR_CANCELLED_GOAL         IncidentType = 26
	IncidentType_VAR_CANCELLED_PENALTY_GOAL IncidentType = 28
	IncidentType_TWO_MINUTES_SUSPENSION     IncidentType = 29
	IncidentType_FIVE_MINUTES_SUSPENSION    IncidentType = 30
	IncidentType_TEN_MINUTES_SUSPENSION     IncidentType = 31
	IncidentType_SHORT_HANDED_GOAL          IncidentType = 32
	IncidentType_POWER_PLAY_GOAL            IncidentType = 33
	// RUGBY
	IncidentType_TRY_GOAL                            IncidentType = 34
	IncidentType_CONVERSION_GOAL                     IncidentType = 35
	IncidentType_DROPKICK_GOAL                       IncidentType = 36
	IncidentType_PENALTY_TRY_GOAL                    IncidentType = 37
	IncidentType_PENALTY_TRY_CONVERSION_GOAL         IncidentType = 38
	IncidentType_TWENTY_MINUTES_SUSPENSION           IncidentType = 39
	IncidentType_GOLDEN_POINT_TRY_GOAL               IncidentType = 40
	IncidentType_GOLDEN_POINT_PENALTY_GOAL           IncidentType = 41
	IncidentType_GOLDEN_POINT_DROPKICK_GOAL          IncidentType = 42
	IncidentType_TWENTY_FIVE_MINUTES_SUSPENSION      IncidentType = 43
	IncidentType_TWO_MINUTES_BENCH_SUSPENSION        IncidentType = 44
	IncidentType_SINGLE_POINT_GOAL                   IncidentType = 45
	IncidentType_EXTRA_TIME_TRY_GOAL                 IncidentType = 46
	IncidentType_EXTRA_TIME_PENALTY_GOAL             IncidentType = 47
	IncidentType_EXTRA_TIME_CONVERSION_GOAL          IncidentType = 48
	IncidentType_EXTRA_TIME_PENALTY_TRY_GOAL         IncidentType = 49
	IncidentType_EXTRA_TIME_DROPKICK_GOAL            IncidentType = 50
	IncidentType_DEFENSIVE_TWO_POINT_CONVERSION_GOAL IncidentType = 51
)

// Enum value maps for IncidentType.
var (
	IncidentType_name = map[int32]string{
		0:  "UNKNOWN_INCIDENT",
		1:  "SUBSTITUTION",
		2:  "SUBSTITUTION_OUT",
		3:  "SUBSTITUTION_IN",
		4:  "REGULAR_GOAL",
		5:  "PENALTY",
		6:  "MISSED_PENALTY",
		7:  "OWN_GOAL",
		8:  "SHOOTOUT_MISSED_PENALTY",
		9:  "SHOOTOUT_PENALTY",
		10: "YELLOW_CARD",
		11: "SECOND_YELLOW_CARD",
		12: "RED_CARD",
		13: "EXTRA_TIME_GOAL",
		14: "EXTRA_TIME_OWN_GOAL",
		15: "CANCELED_GOAL",
		16: "ASSIST",
		17: "SECOND_ASSIST",
		18: "CANCELED_PENALTY",
		19: "CANCELED_RED_CARD",
		20: "CANCELED_YELLOW_CARD",
		21: "CANCELED_SECOND_YELLOW_CARD",
		22: "VAR",
		23: "PENALTY_AWARDED",
		24: "CORNER_KICK",
		25: "INCIDENT_CONFIRMED",
		26: "VAR_CANCELLED_GOAL",
		28: "VAR_CANCELLED_PENALTY_GOAL",
		29: "TWO_MINUTES_SUSPENSION",
		30: "FIVE_MINUTES_SUSPENSION",
		31: "TEN_MINUTES_SUSPENSION",
		32: "SHORT_HANDED_GOAL",
		33: "POWER_PLAY_GOAL",
		34: "TRY_GOAL",
		35: "CONVERSION_GOAL",
		36: "DROPKICK_GOAL",
		37: "PENALTY_TRY_GOAL",
		38: "PENALTY_TRY_CONVERSION_GOAL",
		39: "TWENTY_MINUTES_SUSPENSION",
		40: "GOLDEN_POINT_TRY_GOAL",
		41: "GOLDEN_POINT_PENALTY_GOAL",
		42: "GOLDEN_POINT_DROPKICK_GOAL",
		43: "TWENTY_FIVE_MINUTES_SUSPENSION",
		44: "TWO_MINUTES_BENCH_SUSPENSION",
		45: "SINGLE_POINT_GOAL",
		46: "EXTRA_TIME_TRY_GOAL",
		47: "EXTRA_TIME_PENALTY_GOAL",
		48: "EXTRA_TIME_CONVERSION_GOAL",
		49: "EXTRA_TIME_PENALTY_TRY_GOAL",
		50: "EXTRA_TIME_DROPKICK_GOAL",
		51: "DEFENSIVE_TWO_POINT_CONVERSION_GOAL",
	}
	IncidentType_value = map[string]int32{
		"UNKNOWN_INCIDENT":                    0,
		"SUBSTITUTION":                        1,
		"SUBSTITUTION_OUT":                    2,
		"SUBSTITUTION_IN":                     3,
		"REGULAR_GOAL":                        4,
		"PENALTY":                             5,
		"MISSED_PENALTY":                      6,
		"OWN_GOAL":                            7,
		"SHOOTOUT_MISSED_PENALTY":             8,
		"SHOOTOUT_PENALTY":                    9,
		"YELLOW_CARD":                         10,
		"SECOND_YELLOW_CARD":                  11,
		"RED_CARD":                            12,
		"EXTRA_TIME_GOAL":                     13,
		"EXTRA_TIME_OWN_GOAL":                 14,
		"CANCELED_GOAL":                       15,
		"ASSIST":                              16,
		"SECOND_ASSIST":                       17,
		"CANCELED_PENALTY":                    18,
		"CANCELED_RED_CARD":                   19,
		"CANCELED_YELLOW_CARD":                20,
		"CANCELED_SECOND_YELLOW_CARD":         21,
		"VAR":                                 22,
		"PENALTY_AWARDED":                     23,
		"CORNER_KICK":                         24,
		"INCIDENT_CONFIRMED":                  25,
		"VAR_CANCELLED_GOAL":                  26,
		"VAR_CANCELLED_PENALTY_GOAL":          28,
		"TWO_MINUTES_SUSPENSION":              29,
		"FIVE_MINUTES_SUSPENSION":             30,
		"TEN_MINUTES_SUSPENSION":              31,
		"SHORT_HANDED_GOAL":                   32,
		"POWER_PLAY_GOAL":                     33,
		"TRY_GOAL":                            34,
		"CONVERSION_GOAL":                     35,
		"DROPKICK_GOAL":                       36,
		"PENALTY_TRY_GOAL":                    37,
		"PENALTY_TRY_CONVERSION_GOAL":         38,
		"TWENTY_MINUTES_SUSPENSION":           39,
		"GOLDEN_POINT_TRY_GOAL":               40,
		"GOLDEN_POINT_PENALTY_GOAL":           41,
		"GOLDEN_POINT_DROPKICK_GOAL":          42,
		"TWENTY_FIVE_MINUTES_SUSPENSION":      43,
		"TWO_MINUTES_BENCH_SUSPENSION":        44,
		"SINGLE_POINT_GOAL":                   45,
		"EXTRA_TIME_TRY_GOAL":                 46,
		"EXTRA_TIME_PENALTY_GOAL":             47,
		"EXTRA_TIME_CONVERSION_GOAL":          48,
		"EXTRA_TIME_PENALTY_TRY_GOAL":         49,
		"EXTRA_TIME_DROPKICK_GOAL":            50,
		"DEFENSIVE_TWO_POINT_CONVERSION_GOAL": 51,
	}
)

func (x IncidentType) Enum() *IncidentType {
	p := new(IncidentType)
	*p = x
	return p
}

func (x IncidentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncidentType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[16].Descriptor()
}

func (IncidentType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[16]
}

func (x IncidentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncidentType.Descriptor instead.
func (IncidentType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{16}
}

type Period int32

const (
	// Soccer
	Period_UNKNOWN_PERIOD              Period = 0
	Period_FIRST_HALF_PERIOD           Period = 1
	Period_HALF_TIME_PERIOD            Period = 2
	Period_SECOND_HALF_PERIOD          Period = 3
	Period_FIRST_EXTRA_TIME_PERIOD     Period = 4
	Period_EXTRA_TIME_HALF_TIME_PERIOD Period = 5
	Period_SECOND_EXTRA_TIME_PERIOD    Period = 6
	Period_PENALTY_SHOOTOUT_PERIOD     Period = 7
	// hockey/rugby (2 periods)
	Period_FIRST_PERIOD  Period = 8
	Period_SECOND_PERIOD Period = 9
	Period_THIRD_PERIOD  Period = 10
	// Basket
	Period_FIRST_QUARTER_PERIOD  Period = 11
	Period_SECOND_QUARTER_PERIOD Period = 12
	Period_THIRD_QUARTER_PERIOD  Period = 13
	Period_FOURTH_QUARTER_PERIOD Period = 14
	// Basket/Hockey
	Period_OVERTIME_PERIOD Period = 15
	// Cricket
	Period_FIRST_INNING_PERIOD  Period = 16
	Period_SECOND_INNING_PERIOD Period = 17
	Period_THIRD_INNING_PERIOD  Period = 18
	Period_FOURTH_INNING_PERIOD Period = 19
)

// Enum value maps for Period.
var (
	Period_name = map[int32]string{
		0:  "UNKNOWN_PERIOD",
		1:  "FIRST_HALF_PERIOD",
		2:  "HALF_TIME_PERIOD",
		3:  "SECOND_HALF_PERIOD",
		4:  "FIRST_EXTRA_TIME_PERIOD",
		5:  "EXTRA_TIME_HALF_TIME_PERIOD",
		6:  "SECOND_EXTRA_TIME_PERIOD",
		7:  "PENALTY_SHOOTOUT_PERIOD",
		8:  "FIRST_PERIOD",
		9:  "SECOND_PERIOD",
		10: "THIRD_PERIOD",
		11: "FIRST_QUARTER_PERIOD",
		12: "SECOND_QUARTER_PERIOD",
		13: "THIRD_QUARTER_PERIOD",
		14: "FOURTH_QUARTER_PERIOD",
		15: "OVERTIME_PERIOD",
		16: "FIRST_INNING_PERIOD",
		17: "SECOND_INNING_PERIOD",
		18: "THIRD_INNING_PERIOD",
		19: "FOURTH_INNING_PERIOD",
	}
	Period_value = map[string]int32{
		"UNKNOWN_PERIOD":              0,
		"FIRST_HALF_PERIOD":           1,
		"HALF_TIME_PERIOD":            2,
		"SECOND_HALF_PERIOD":          3,
		"FIRST_EXTRA_TIME_PERIOD":     4,
		"EXTRA_TIME_HALF_TIME_PERIOD": 5,
		"SECOND_EXTRA_TIME_PERIOD":    6,
		"PENALTY_SHOOTOUT_PERIOD":     7,
		"FIRST_PERIOD":                8,
		"SECOND_PERIOD":               9,
		"THIRD_PERIOD":                10,
		"FIRST_QUARTER_PERIOD":        11,
		"SECOND_QUARTER_PERIOD":       12,
		"THIRD_QUARTER_PERIOD":        13,
		"FOURTH_QUARTER_PERIOD":       14,
		"OVERTIME_PERIOD":             15,
		"FIRST_INNING_PERIOD":         16,
		"SECOND_INNING_PERIOD":        17,
		"THIRD_INNING_PERIOD":         18,
		"FOURTH_INNING_PERIOD":        19,
	}
)

func (x Period) Enum() *Period {
	p := new(Period)
	*p = x
	return p
}

func (x Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Period) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[17].Descriptor()
}

func (Period) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[17]
}

func (x Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Period.Descriptor instead.
func (Period) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{17}
}

type Coverage int32

const (
	Coverage_LIVE        Coverage = 0
	Coverage_RESULT_ONLY Coverage = 1
	Coverage_TV          Coverage = 2
)

// Enum value maps for Coverage.
var (
	Coverage_name = map[int32]string{
		0: "LIVE",
		1: "RESULT_ONLY",
		2: "TV",
	}
	Coverage_value = map[string]int32{
		"LIVE":        0,
		"RESULT_ONLY": 1,
		"TV":          2,
	}
)

func (x Coverage) Enum() *Coverage {
	p := new(Coverage)
	*p = x
	return p
}

func (x Coverage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Coverage) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[18].Descriptor()
}

func (Coverage) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[18]
}

func (x Coverage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Coverage.Descriptor instead.
func (Coverage) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{18}
}

type MatchOverallStatus int32

const (
	MatchOverallStatus_NOT_STARTED        MatchOverallStatus = 0
	MatchOverallStatus_IN_PROGRESS        MatchOverallStatus = 1
	MatchOverallStatus_FINISHED           MatchOverallStatus = 2
	MatchOverallStatus_CANCELED           MatchOverallStatus = 3
	MatchOverallStatus_POSTPONED          MatchOverallStatus = 4
	MatchOverallStatus_UNKNOWN            MatchOverallStatus = 5
	MatchOverallStatus_INTERRUPTED        MatchOverallStatus = 6
	MatchOverallStatus_DELETED            MatchOverallStatus = 7
	MatchOverallStatus_ABANDONED          MatchOverallStatus = 8
	MatchOverallStatus_SUSPENDED          MatchOverallStatus = 9
	MatchOverallStatus_COVERAGE_CANCELLED MatchOverallStatus = 10
	MatchOverallStatus_NO_RESULT_OVERALL  MatchOverallStatus = 11 // cricket specific
)

// Enum value maps for MatchOverallStatus.
var (
	MatchOverallStatus_name = map[int32]string{
		0:  "NOT_STARTED",
		1:  "IN_PROGRESS",
		2:  "FINISHED",
		3:  "CANCELED",
		4:  "POSTPONED",
		5:  "UNKNOWN",
		6:  "INTERRUPTED",
		7:  "DELETED",
		8:  "ABANDONED",
		9:  "SUSPENDED",
		10: "COVERAGE_CANCELLED",
		11: "NO_RESULT_OVERALL",
	}
	MatchOverallStatus_value = map[string]int32{
		"NOT_STARTED":        0,
		"IN_PROGRESS":        1,
		"FINISHED":           2,
		"CANCELED":           3,
		"POSTPONED":          4,
		"UNKNOWN":            5,
		"INTERRUPTED":        6,
		"DELETED":            7,
		"ABANDONED":          8,
		"SUSPENDED":          9,
		"COVERAGE_CANCELLED": 10,
		"NO_RESULT_OVERALL":  11,
	}
)

func (x MatchOverallStatus) Enum() *MatchOverallStatus {
	p := new(MatchOverallStatus)
	*p = x
	return p
}

func (x MatchOverallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchOverallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[19].Descriptor()
}

func (MatchOverallStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[19]
}

func (x MatchOverallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchOverallStatus.Descriptor instead.
func (MatchOverallStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{19}
}

type MatchStatus int32

const (
	MatchStatus_UNKNOWN_STATUS                      MatchStatus = 0
	MatchStatus_NOT_STARTED_STATUS                  MatchStatus = 1
	MatchStatus_FIRST_HALF_STATUS                   MatchStatus = 2
	MatchStatus_SECOND_HALF_STATUS                  MatchStatus = 3
	MatchStatus_PENALTY_SHOOTOUT_STATUS             MatchStatus = 4
	MatchStatus_POSTPONED_STATUS                    MatchStatus = 5
	MatchStatus_FINISHED_STATUS                     MatchStatus = 6
	MatchStatus_GOLDEN_GOAL_FIRST_HALF_STATUS       MatchStatus = 7
	MatchStatus_EXTRA_TIME_FIRST_HALF_STATUS        MatchStatus = 8
	MatchStatus_EXTRA_TIME_SECOND_HALF_STATUS       MatchStatus = 9
	MatchStatus_HALF_TIME_STATUS                    MatchStatus = 10
	MatchStatus_FINISHED_AFTER_EXTRA_TIME_STATUS    MatchStatus = 11
	MatchStatus_INTERRUPTED_STATUS                  MatchStatus = 12
	MatchStatus_FINISHED_AFTER_PENALTIES_STATUS     MatchStatus = 13
	MatchStatus_WAITING_FOR_EXTRA_TIME_STATUS       MatchStatus = 14
	MatchStatus_WAITING_FOR_GOLDEN_GOAL_STATUS      MatchStatus = 15
	MatchStatus_FINISHED_AFTER_GOLDEN_GOAL_STATUS   MatchStatus = 16
	MatchStatus_ABANDONED_STATUS                    MatchStatus = 17
	MatchStatus_NO_INFO_YET_STATUS                  MatchStatus = 18
	MatchStatus_GOLDEN_GOAL_SECOND_HALF_STATUS      MatchStatus = 19
	MatchStatus_WAITING_FOR_PENALTY_SHOOTOUT_STATUS MatchStatus = 20
	MatchStatus_WAITING_FOR_SILVER_GOAL_STATUS      MatchStatus = 21
	MatchStatus_SILVER_GOAL_FIRST_HALF_STATUS       MatchStatus = 22
	MatchStatus_SILVER_GOAL_SECOND_HALF_STATUS      MatchStatus = 23
	MatchStatus_FINISHED_AFTER_SILVER_GOAL_STATUS   MatchStatus = 24
	MatchStatus_KICK_OFF_DELAYED_STATUS             MatchStatus = 25
	MatchStatus_SUDDEN_DEATH_STATUS                 MatchStatus = 26
	MatchStatus_OVERTIME_FIRST_HALF_STATUS          MatchStatus = 27
	MatchStatus_OVERTIME_SECOND_HALF_STATUS         MatchStatus = 28
	MatchStatus_STARTED_STATUS                      MatchStatus = 29
	MatchStatus_DELETED_STATUS                      MatchStatus = 30
	MatchStatus_CANCELED_STATUS                     MatchStatus = 31
	MatchStatus_EXTRA_TIME_FIRST_HALF_ENDED_STATUS  MatchStatus = 32
	MatchStatus_EXTRA_TIME_HALF_TIME_STATUS         MatchStatus = 33
	MatchStatus_FINISHED_AFTER_AWARDED_WIN_STATUS   MatchStatus = 34
	// TENNIS
	MatchStatus_GAME_STATUS      MatchStatus = 35
	MatchStatus_SET1_STATUS      MatchStatus = 36
	MatchStatus_SET2_STATUS      MatchStatus = 37
	MatchStatus_SET3_STATUS      MatchStatus = 38
	MatchStatus_SET4_STATUS      MatchStatus = 39
	MatchStatus_SET5_STATUS      MatchStatus = 40
	MatchStatus_TIE_BREAK_STATUS MatchStatus = 41
	// BASKET
	MatchStatus_FIRST_QUARTER_STATUS  MatchStatus = 42
	MatchStatus_SECOND_QUARTER_STATUS MatchStatus = 43
	MatchStatus_THIRD_QUARTER_STATUS  MatchStatus = 44
	MatchStatus_FOURTH_QUARTER_STATUS MatchStatus = 45
	// ICE HOCKEY
	MatchStatus_FIRST_PERIOD_STATUS  MatchStatus = 46
	MatchStatus_SECOND_PERIOD_STATUS MatchStatus = 47
	MatchStatus_THIRD_PERIOD_STATUS  MatchStatus = 48
	// CRICKET
	MatchStatus_FIRST_INNING_STATUS  MatchStatus = 49
	MatchStatus_SECOND_INNING_STATUS MatchStatus = 50
	MatchStatus_THIRD_INNING_STATUS  MatchStatus = 51
	MatchStatus_FOURTH_INNING_STATUS MatchStatus = 52
	MatchStatus_OVERTIME_STATUS      MatchStatus = 53
	// SUSPENDED
	MatchStatus_SUSPENDED_STATUS MatchStatus = 54
	// also CRICKET
	MatchStatus_DELAYED          MatchStatus = 55
	MatchStatus_INNINGS_BREAK    MatchStatus = 56
	MatchStatus_TEA_BREAK        MatchStatus = 57
	MatchStatus_LUNCH            MatchStatus = 58
	MatchStatus_STUMPS           MatchStatus = 59
	MatchStatus_NO_RESULT        MatchStatus = 60
	MatchStatus_PAUSE            MatchStatus = 61
	MatchStatus_DISQUALIFICATION MatchStatus = 62
	MatchStatus_WALKOVER         MatchStatus = 63
	// also CRICKET
	MatchStatus_SUPER_OVER_STATUS           MatchStatus = 64
	MatchStatus_DINNER_STATUS               MatchStatus = 65
	MatchStatus_DRINKS_STATUS               MatchStatus = 66
	MatchStatus_ELECTRICAL_BREAKDOWN_STATUS MatchStatus = 67
	MatchStatus_STRATEGIC_BREAK_STATUS      MatchStatus = 68
	MatchStatus_RETIRED                     MatchStatus = 69
	MatchStatus_FINISHED_AFTER_OVERTIME     MatchStatus = 70
	// BASEBALL
	MatchStatus_FIFTH_INNING_STATUS   MatchStatus = 71
	MatchStatus_SIXTH_INNING_STATUS   MatchStatus = 72
	MatchStatus_SEVENTH_INNING_STATUS MatchStatus = 73
	MatchStatus_EIGHTH_INNING_STATUS  MatchStatus = 74
	MatchStatus_NINTH_INNING_STATUS   MatchStatus = 75
	MatchStatus_TENTH_INNING_STATUS   MatchStatus = 76
	MatchStatus_EXTRA_INNING_STATUS   MatchStatus = 77
)

// Enum value maps for MatchStatus.
var (
	MatchStatus_name = map[int32]string{
		0:  "UNKNOWN_STATUS",
		1:  "NOT_STARTED_STATUS",
		2:  "FIRST_HALF_STATUS",
		3:  "SECOND_HALF_STATUS",
		4:  "PENALTY_SHOOTOUT_STATUS",
		5:  "POSTPONED_STATUS",
		6:  "FINISHED_STATUS",
		7:  "GOLDEN_GOAL_FIRST_HALF_STATUS",
		8:  "EXTRA_TIME_FIRST_HALF_STATUS",
		9:  "EXTRA_TIME_SECOND_HALF_STATUS",
		10: "HALF_TIME_STATUS",
		11: "FINISHED_AFTER_EXTRA_TIME_STATUS",
		12: "INTERRUPTED_STATUS",
		13: "FINISHED_AFTER_PENALTIES_STATUS",
		14: "WAITING_FOR_EXTRA_TIME_STATUS",
		15: "WAITING_FOR_GOLDEN_GOAL_STATUS",
		16: "FINISHED_AFTER_GOLDEN_GOAL_STATUS",
		17: "ABANDONED_STATUS",
		18: "NO_INFO_YET_STATUS",
		19: "GOLDEN_GOAL_SECOND_HALF_STATUS",
		20: "WAITING_FOR_PENALTY_SHOOTOUT_STATUS",
		21: "WAITING_FOR_SILVER_GOAL_STATUS",
		22: "SILVER_GOAL_FIRST_HALF_STATUS",
		23: "SILVER_GOAL_SECOND_HALF_STATUS",
		24: "FINISHED_AFTER_SILVER_GOAL_STATUS",
		25: "KICK_OFF_DELAYED_STATUS",
		26: "SUDDEN_DEATH_STATUS",
		27: "OVERTIME_FIRST_HALF_STATUS",
		28: "OVERTIME_SECOND_HALF_STATUS",
		29: "STARTED_STATUS",
		30: "DELETED_STATUS",
		31: "CANCELED_STATUS",
		32: "EXTRA_TIME_FIRST_HALF_ENDED_STATUS",
		33: "EXTRA_TIME_HALF_TIME_STATUS",
		34: "FINISHED_AFTER_AWARDED_WIN_STATUS",
		35: "GAME_STATUS",
		36: "SET1_STATUS",
		37: "SET2_STATUS",
		38: "SET3_STATUS",
		39: "SET4_STATUS",
		40: "SET5_STATUS",
		41: "TIE_BREAK_STATUS",
		42: "FIRST_QUARTER_STATUS",
		43: "SECOND_QUARTER_STATUS",
		44: "THIRD_QUARTER_STATUS",
		45: "FOURTH_QUARTER_STATUS",
		46: "FIRST_PERIOD_STATUS",
		47: "SECOND_PERIOD_STATUS",
		48: "THIRD_PERIOD_STATUS",
		49: "FIRST_INNING_STATUS",
		50: "SECOND_INNING_STATUS",
		51: "THIRD_INNING_STATUS",
		52: "FOURTH_INNING_STATUS",
		53: "OVERTIME_STATUS",
		54: "SUSPENDED_STATUS",
		55: "DELAYED",
		56: "INNINGS_BREAK",
		57: "TEA_BREAK",
		58: "LUNCH",
		59: "STUMPS",
		60: "NO_RESULT",
		61: "PAUSE",
		62: "DISQUALIFICATION",
		63: "WALKOVER",
		64: "SUPER_OVER_STATUS",
		65: "DINNER_STATUS",
		66: "DRINKS_STATUS",
		67: "ELECTRICAL_BREAKDOWN_STATUS",
		68: "STRATEGIC_BREAK_STATUS",
		69: "RETIRED",
		70: "FINISHED_AFTER_OVERTIME",
		71: "FIFTH_INNING_STATUS",
		72: "SIXTH_INNING_STATUS",
		73: "SEVENTH_INNING_STATUS",
		74: "EIGHTH_INNING_STATUS",
		75: "NINTH_INNING_STATUS",
		76: "TENTH_INNING_STATUS",
		77: "EXTRA_INNING_STATUS",
	}
	MatchStatus_value = map[string]int32{
		"UNKNOWN_STATUS":                      0,
		"NOT_STARTED_STATUS":                  1,
		"FIRST_HALF_STATUS":                   2,
		"SECOND_HALF_STATUS":                  3,
		"PENALTY_SHOOTOUT_STATUS":             4,
		"POSTPONED_STATUS":                    5,
		"FINISHED_STATUS":                     6,
		"GOLDEN_GOAL_FIRST_HALF_STATUS":       7,
		"EXTRA_TIME_FIRST_HALF_STATUS":        8,
		"EXTRA_TIME_SECOND_HALF_STATUS":       9,
		"HALF_TIME_STATUS":                    10,
		"FINISHED_AFTER_EXTRA_TIME_STATUS":    11,
		"INTERRUPTED_STATUS":                  12,
		"FINISHED_AFTER_PENALTIES_STATUS":     13,
		"WAITING_FOR_EXTRA_TIME_STATUS":       14,
		"WAITING_FOR_GOLDEN_GOAL_STATUS":      15,
		"FINISHED_AFTER_GOLDEN_GOAL_STATUS":   16,
		"ABANDONED_STATUS":                    17,
		"NO_INFO_YET_STATUS":                  18,
		"GOLDEN_GOAL_SECOND_HALF_STATUS":      19,
		"WAITING_FOR_PENALTY_SHOOTOUT_STATUS": 20,
		"WAITING_FOR_SILVER_GOAL_STATUS":      21,
		"SILVER_GOAL_FIRST_HALF_STATUS":       22,
		"SILVER_GOAL_SECOND_HALF_STATUS":      23,
		"FINISHED_AFTER_SILVER_GOAL_STATUS":   24,
		"KICK_OFF_DELAYED_STATUS":             25,
		"SUDDEN_DEATH_STATUS":                 26,
		"OVERTIME_FIRST_HALF_STATUS":          27,
		"OVERTIME_SECOND_HALF_STATUS":         28,
		"STARTED_STATUS":                      29,
		"DELETED_STATUS":                      30,
		"CANCELED_STATUS":                     31,
		"EXTRA_TIME_FIRST_HALF_ENDED_STATUS":  32,
		"EXTRA_TIME_HALF_TIME_STATUS":         33,
		"FINISHED_AFTER_AWARDED_WIN_STATUS":   34,
		"GAME_STATUS":                         35,
		"SET1_STATUS":                         36,
		"SET2_STATUS":                         37,
		"SET3_STATUS":                         38,
		"SET4_STATUS":                         39,
		"SET5_STATUS":                         40,
		"TIE_BREAK_STATUS":                    41,
		"FIRST_QUARTER_STATUS":                42,
		"SECOND_QUARTER_STATUS":               43,
		"THIRD_QUARTER_STATUS":                44,
		"FOURTH_QUARTER_STATUS":               45,
		"FIRST_PERIOD_STATUS":                 46,
		"SECOND_PERIOD_STATUS":                47,
		"THIRD_PERIOD_STATUS":                 48,
		"FIRST_INNING_STATUS":                 49,
		"SECOND_INNING_STATUS":                50,
		"THIRD_INNING_STATUS":                 51,
		"FOURTH_INNING_STATUS":                52,
		"OVERTIME_STATUS":                     53,
		"SUSPENDED_STATUS":                    54,
		"DELAYED":                             55,
		"INNINGS_BREAK":                       56,
		"TEA_BREAK":                           57,
		"LUNCH":                               58,
		"STUMPS":                              59,
		"NO_RESULT":                           60,
		"PAUSE":                               61,
		"DISQUALIFICATION":                    62,
		"WALKOVER":                            63,
		"SUPER_OVER_STATUS":                   64,
		"DINNER_STATUS":                       65,
		"DRINKS_STATUS":                       66,
		"ELECTRICAL_BREAKDOWN_STATUS":         67,
		"STRATEGIC_BREAK_STATUS":              68,
		"RETIRED":                             69,
		"FINISHED_AFTER_OVERTIME":             70,
		"FIFTH_INNING_STATUS":                 71,
		"SIXTH_INNING_STATUS":                 72,
		"SEVENTH_INNING_STATUS":               73,
		"EIGHTH_INNING_STATUS":                74,
		"NINTH_INNING_STATUS":                 75,
		"TENTH_INNING_STATUS":                 76,
		"EXTRA_INNING_STATUS":                 77,
	}
)

func (x MatchStatus) Enum() *MatchStatus {
	p := new(MatchStatus)
	*p = x
	return p
}

func (x MatchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[20].Descriptor()
}

func (MatchStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[20]
}

func (x MatchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchStatus.Descriptor instead.
func (MatchStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{20}
}

type ParticipantKind int32

const (
	ParticipantKind_UNKNOWN_KIND      ParticipantKind = 0
	ParticipantKind_TEAM              ParticipantKind = 1
	ParticipantKind_ATHLETE           ParticipantKind = 2
	ParticipantKind_ORGANISATION      ParticipantKind = 3
	ParticipantKind_COACH_KIND        ParticipantKind = 4
	ParticipantKind_REFEREE           ParticipantKind = 5
	ParticipantKind_REFEREE_ASSISTANT ParticipantKind = 6
	ParticipantKind_UMPIRE            ParticipantKind = 7
	ParticipantKind_FIRST_UMPIRE      ParticipantKind = 8
	ParticipantKind_SECOND_UMPIRE     ParticipantKind = 9
	ParticipantKind_TV_UMPIRE         ParticipantKind = 10
)

// Enum value maps for ParticipantKind.
var (
	ParticipantKind_name = map[int32]string{
		0:  "UNKNOWN_KIND",
		1:  "TEAM",
		2:  "ATHLETE",
		3:  "ORGANISATION",
		4:  "COACH_KIND",
		5:  "REFEREE",
		6:  "REFEREE_ASSISTANT",
		7:  "UMPIRE",
		8:  "FIRST_UMPIRE",
		9:  "SECOND_UMPIRE",
		10: "TV_UMPIRE",
	}
	ParticipantKind_value = map[string]int32{
		"UNKNOWN_KIND":      0,
		"TEAM":              1,
		"ATHLETE":           2,
		"ORGANISATION":      3,
		"COACH_KIND":        4,
		"REFEREE":           5,
		"REFEREE_ASSISTANT": 6,
		"UMPIRE":            7,
		"FIRST_UMPIRE":      8,
		"SECOND_UMPIRE":     9,
		"TV_UMPIRE":         10,
	}
)

func (x ParticipantKind) Enum() *ParticipantKind {
	p := new(ParticipantKind)
	*p = x
	return p
}

func (x ParticipantKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantKind) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[21].Descriptor()
}

func (ParticipantKind) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[21]
}

func (x ParticipantKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantKind.Descriptor instead.
func (ParticipantKind) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{21}
}

type ProviderConnection int32

const (
	ProviderConnection_PROVIDER_CONNECTED    ProviderConnection = 0
	ProviderConnection_PROVIDER_DISCONNECTED ProviderConnection = 1
)

// Enum value maps for ProviderConnection.
var (
	ProviderConnection_name = map[int32]string{
		0: "PROVIDER_CONNECTED",
		1: "PROVIDER_DISCONNECTED",
	}
	ProviderConnection_value = map[string]int32{
		"PROVIDER_CONNECTED":    0,
		"PROVIDER_DISCONNECTED": 1,
	}
)

func (x ProviderConnection) Enum() *ProviderConnection {
	p := new(ProviderConnection)
	*p = x
	return p
}

func (x ProviderConnection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderConnection) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[22].Descriptor()
}

func (ProviderConnection) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[22]
}

func (x ProviderConnection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderConnection.Descriptor instead.
func (ProviderConnection) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{22}
}

type WidgetEventType int32

const (
	WidgetEventType_UNKNOWN_WIDGET_EVENT     WidgetEventType = 0
	WidgetEventType_PLAYERS_COMING_OUT       WidgetEventType = 1
	WidgetEventType_PLAYERS_LINED_UP         WidgetEventType = 2
	WidgetEventType_NATIONAL_ANTHEM_SINGING  WidgetEventType = 3
	WidgetEventType_SHAKE_HANDS              WidgetEventType = 4
	WidgetEventType_FLIP_COIN                WidgetEventType = 5
	WidgetEventType_MINUTE_SILENCE           WidgetEventType = 6
	WidgetEventType_PRICE_GIVING_CEREMONY    WidgetEventType = 7
	WidgetEventType_PHOTO_TAKING             WidgetEventType = 8
	WidgetEventType_JERSEY_CHANGED           WidgetEventType = 9
	WidgetEventType_FORMATION_CHANGED        WidgetEventType = 10
	WidgetEventType_GAME_ABOUT_TO_START      WidgetEventType = 11
	WidgetEventType_RESTART_GAME             WidgetEventType = 12
	WidgetEventType_INJURY_BREAK             WidgetEventType = 13
	WidgetEventType_PLAYER_INJURED_AWAY      WidgetEventType = 14
	WidgetEventType_PLAYER_INJURED_HOME      WidgetEventType = 15
	WidgetEventType_NEXT_PENALTY_HOME        WidgetEventType = 16
	WidgetEventType_NEXT_PENALTY_AWAY        WidgetEventType = 17
	WidgetEventType_NEXT_PENALTY_SCORER      WidgetEventType = 18
	WidgetEventType_REFEREE_BALL             WidgetEventType = 19
	WidgetEventType_ATTACK_HOME              WidgetEventType = 20
	WidgetEventType_ATTACK_AWAY              WidgetEventType = 21
	WidgetEventType_DANGER                   WidgetEventType = 22
	WidgetEventType_DANGER_AWAY              WidgetEventType = 23
	WidgetEventType_DANGER_HOME              WidgetEventType = 24
	WidgetEventType_DANGEROUS_ATTACK_AWAY    WidgetEventType = 25
	WidgetEventType_DANGEROUS_ATTACK_HOME    WidgetEventType = 26
	WidgetEventType_DANGEROUS_FREE_KICK_AWAY WidgetEventType = 27
	WidgetEventType_DANGEROUS_FREE_KICK_HOME WidgetEventType = 28
	WidgetEventType_SAFE                     WidgetEventType = 29
	WidgetEventType_SAFE_AWAY                WidgetEventType = 30
	WidgetEventType_SAFE_HOME                WidgetEventType = 31
	WidgetEventType_SHOT_ON_TARGET_AWAY      WidgetEventType = 32
	WidgetEventType_SHOT_ON_TARGET_HOME      WidgetEventType = 33
	WidgetEventType_SHOT_OFF_TARGET_AWAY     WidgetEventType = 34
	WidgetEventType_SHOT_OFF_TARGET_HOME     WidgetEventType = 35
	WidgetEventType_SHOT_WOODWORK_AWAY       WidgetEventType = 36
	WidgetEventType_SHOT_WOODWORK_HOME       WidgetEventType = 37
	WidgetEventType_SHOT_BLOCKED_AWAY        WidgetEventType = 38
	WidgetEventType_SHOT_BLOCKED_HOME        WidgetEventType = 39
	WidgetEventType_THROW_IN_AWAY            WidgetEventType = 40
	WidgetEventType_THROW_IN_HOME            WidgetEventType = 41
	WidgetEventType_FREE_KICK_AWAY           WidgetEventType = 42
	WidgetEventType_FREE_KICK_HOME           WidgetEventType = 43
	WidgetEventType_FOUL_AWAY                WidgetEventType = 44
	WidgetEventType_FOUL_HOME                WidgetEventType = 45
	WidgetEventType_OFFSIDE_AWAY             WidgetEventType = 46
	WidgetEventType_OFFSIDE_HOME             WidgetEventType = 47
	WidgetEventType_KICK_OFF_AWAY            WidgetEventType = 48
	WidgetEventType_KICK_OFF_HOME            WidgetEventType = 49
	WidgetEventType_GOAL_KICK_AWAY           WidgetEventType = 50
	WidgetEventType_GOAL_KICK_HOME           WidgetEventType = 51
	WidgetEventType_BREAKAWAY_AWAY           WidgetEventType = 52
	WidgetEventType_BREAKAWAY_HOME           WidgetEventType = 53
	WidgetEventType_BALL_POSITION            WidgetEventType = 54
	WidgetEventType_NO_FREE_KICK             WidgetEventType = 55
	WidgetEventType_NO_THROW_IN              WidgetEventType = 56
	WidgetEventType_CORNER_HOME              WidgetEventType = 57
	WidgetEventType_CORNER_AWAY              WidgetEventType = 58
	WidgetEventType_CANCEL_CORNER_HOME       WidgetEventType = 59
	WidgetEventType_CANCEL_CORNER_AWAY       WidgetEventType = 60
)

// Enum value maps for WidgetEventType.
var (
	WidgetEventType_name = map[int32]string{
		0:  "UNKNOWN_WIDGET_EVENT",
		1:  "PLAYERS_COMING_OUT",
		2:  "PLAYERS_LINED_UP",
		3:  "NATIONAL_ANTHEM_SINGING",
		4:  "SHAKE_HANDS",
		5:  "FLIP_COIN",
		6:  "MINUTE_SILENCE",
		7:  "PRICE_GIVING_CEREMONY",
		8:  "PHOTO_TAKING",
		9:  "JERSEY_CHANGED",
		10: "FORMATION_CHANGED",
		11: "GAME_ABOUT_TO_START",
		12: "RESTART_GAME",
		13: "INJURY_BREAK",
		14: "PLAYER_INJURED_AWAY",
		15: "PLAYER_INJURED_HOME",
		16: "NEXT_PENALTY_HOME",
		17: "NEXT_PENALTY_AWAY",
		18: "NEXT_PENALTY_SCORER",
		19: "REFEREE_BALL",
		20: "ATTACK_HOME",
		21: "ATTACK_AWAY",
		22: "DANGER",
		23: "DANGER_AWAY",
		24: "DANGER_HOME",
		25: "DANGEROUS_ATTACK_AWAY",
		26: "DANGEROUS_ATTACK_HOME",
		27: "DANGEROUS_FREE_KICK_AWAY",
		28: "DANGEROUS_FREE_KICK_HOME",
		29: "SAFE",
		30: "SAFE_AWAY",
		31: "SAFE_HOME",
		32: "SHOT_ON_TARGET_AWAY",
		33: "SHOT_ON_TARGET_HOME",
		34: "SHOT_OFF_TARGET_AWAY",
		35: "SHOT_OFF_TARGET_HOME",
		36: "SHOT_WOODWORK_AWAY",
		37: "SHOT_WOODWORK_HOME",
		38: "SHOT_BLOCKED_AWAY",
		39: "SHOT_BLOCKED_HOME",
		40: "THROW_IN_AWAY",
		41: "THROW_IN_HOME",
		42: "FREE_KICK_AWAY",
		43: "FREE_KICK_HOME",
		44: "FOUL_AWAY",
		45: "FOUL_HOME",
		46: "OFFSIDE_AWAY",
		47: "OFFSIDE_HOME",
		48: "KICK_OFF_AWAY",
		49: "KICK_OFF_HOME",
		50: "GOAL_KICK_AWAY",
		51: "GOAL_KICK_HOME",
		52: "BREAKAWAY_AWAY",
		53: "BREAKAWAY_HOME",
		54: "BALL_POSITION",
		55: "NO_FREE_KICK",
		56: "NO_THROW_IN",
		57: "CORNER_HOME",
		58: "CORNER_AWAY",
		59: "CANCEL_CORNER_HOME",
		60: "CANCEL_CORNER_AWAY",
	}
	WidgetEventType_value = map[string]int32{
		"UNKNOWN_WIDGET_EVENT":     0,
		"PLAYERS_COMING_OUT":       1,
		"PLAYERS_LINED_UP":         2,
		"NATIONAL_ANTHEM_SINGING":  3,
		"SHAKE_HANDS":              4,
		"FLIP_COIN":                5,
		"MINUTE_SILENCE":           6,
		"PRICE_GIVING_CEREMONY":    7,
		"PHOTO_TAKING":             8,
		"JERSEY_CHANGED":           9,
		"FORMATION_CHANGED":        10,
		"GAME_ABOUT_TO_START":      11,
		"RESTART_GAME":             12,
		"INJURY_BREAK":             13,
		"PLAYER_INJURED_AWAY":      14,
		"PLAYER_INJURED_HOME":      15,
		"NEXT_PENALTY_HOME":        16,
		"NEXT_PENALTY_AWAY":        17,
		"NEXT_PENALTY_SCORER":      18,
		"REFEREE_BALL":             19,
		"ATTACK_HOME":              20,
		"ATTACK_AWAY":              21,
		"DANGER":                   22,
		"DANGER_AWAY":              23,
		"DANGER_HOME":              24,
		"DANGEROUS_ATTACK_AWAY":    25,
		"DANGEROUS_ATTACK_HOME":    26,
		"DANGEROUS_FREE_KICK_AWAY": 27,
		"DANGEROUS_FREE_KICK_HOME": 28,
		"SAFE":                     29,
		"SAFE_AWAY":                30,
		"SAFE_HOME":                31,
		"SHOT_ON_TARGET_AWAY":      32,
		"SHOT_ON_TARGET_HOME":      33,
		"SHOT_OFF_TARGET_AWAY":     34,
		"SHOT_OFF_TARGET_HOME":     35,
		"SHOT_WOODWORK_AWAY":       36,
		"SHOT_WOODWORK_HOME":       37,
		"SHOT_BLOCKED_AWAY":        38,
		"SHOT_BLOCKED_HOME":        39,
		"THROW_IN_AWAY":            40,
		"THROW_IN_HOME":            41,
		"FREE_KICK_AWAY":           42,
		"FREE_KICK_HOME":           43,
		"FOUL_AWAY":                44,
		"FOUL_HOME":                45,
		"OFFSIDE_AWAY":             46,
		"OFFSIDE_HOME":             47,
		"KICK_OFF_AWAY":            48,
		"KICK_OFF_HOME":            49,
		"GOAL_KICK_AWAY":           50,
		"GOAL_KICK_HOME":           51,
		"BREAKAWAY_AWAY":           52,
		"BREAKAWAY_HOME":           53,
		"BALL_POSITION":            54,
		"NO_FREE_KICK":             55,
		"NO_THROW_IN":              56,
		"CORNER_HOME":              57,
		"CORNER_AWAY":              58,
		"CANCEL_CORNER_HOME":       59,
		"CANCEL_CORNER_AWAY":       60,
	}
)

func (x WidgetEventType) Enum() *WidgetEventType {
	p := new(WidgetEventType)
	*p = x
	return p
}

func (x WidgetEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WidgetEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[23].Descriptor()
}

func (WidgetEventType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[23]
}

func (x WidgetEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WidgetEventType.Descriptor instead.
func (WidgetEventType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{23}
}

type PitchZone int32

const (
	PitchZone_UNKNOWN_PITCH_ZONE     PitchZone = 0
	PitchZone_CORNER_HOME_LEFT       PitchZone = 1
	PitchZone_CORNER_HOME_RIGHT      PitchZone = 2
	PitchZone_CORNER_AWAY_LEFT       PitchZone = 3
	PitchZone_CORNER_AWAY_RIGHT      PitchZone = 4
	PitchZone_FREE_KICK_HOME_1       PitchZone = 5
	PitchZone_FREE_KICK_HOME_2       PitchZone = 6
	PitchZone_FREE_KICK_HOME_3_LEFT  PitchZone = 7
	PitchZone_FREE_KICK_HOME_3_RIGHT PitchZone = 8
	PitchZone_FREE_KICK_HOME_4       PitchZone = 9
	PitchZone_FREE_KICK_HOME_5       PitchZone = 10
	PitchZone_FREE_KICK_AWAY_1       PitchZone = 11
	PitchZone_FREE_KICK_AWAY_2       PitchZone = 12
	PitchZone_FREE_KICK_AWAY_3_LEFT  PitchZone = 13
	PitchZone_FREE_KICK_AWAY_3_RIGHT PitchZone = 14
	PitchZone_FREE_KICK_AWAY_4       PitchZone = 15
	PitchZone_FREE_KICK_AWAY_5       PitchZone = 16
)

// Enum value maps for PitchZone.
var (
	PitchZone_name = map[int32]string{
		0:  "UNKNOWN_PITCH_ZONE",
		1:  "CORNER_HOME_LEFT",
		2:  "CORNER_HOME_RIGHT",
		3:  "CORNER_AWAY_LEFT",
		4:  "CORNER_AWAY_RIGHT",
		5:  "FREE_KICK_HOME_1",
		6:  "FREE_KICK_HOME_2",
		7:  "FREE_KICK_HOME_3_LEFT",
		8:  "FREE_KICK_HOME_3_RIGHT",
		9:  "FREE_KICK_HOME_4",
		10: "FREE_KICK_HOME_5",
		11: "FREE_KICK_AWAY_1",
		12: "FREE_KICK_AWAY_2",
		13: "FREE_KICK_AWAY_3_LEFT",
		14: "FREE_KICK_AWAY_3_RIGHT",
		15: "FREE_KICK_AWAY_4",
		16: "FREE_KICK_AWAY_5",
	}
	PitchZone_value = map[string]int32{
		"UNKNOWN_PITCH_ZONE":     0,
		"CORNER_HOME_LEFT":       1,
		"CORNER_HOME_RIGHT":      2,
		"CORNER_AWAY_LEFT":       3,
		"CORNER_AWAY_RIGHT":      4,
		"FREE_KICK_HOME_1":       5,
		"FREE_KICK_HOME_2":       6,
		"FREE_KICK_HOME_3_LEFT":  7,
		"FREE_KICK_HOME_3_RIGHT": 8,
		"FREE_KICK_HOME_4":       9,
		"FREE_KICK_HOME_5":       10,
		"FREE_KICK_AWAY_1":       11,
		"FREE_KICK_AWAY_2":       12,
		"FREE_KICK_AWAY_3_LEFT":  13,
		"FREE_KICK_AWAY_3_RIGHT": 14,
		"FREE_KICK_AWAY_4":       15,
		"FREE_KICK_AWAY_5":       16,
	}
)

func (x PitchZone) Enum() *PitchZone {
	p := new(PitchZone)
	*p = x
	return p
}

func (x PitchZone) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PitchZone) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[24].Descriptor()
}

func (PitchZone) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[24]
}

func (x PitchZone) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PitchZone.Descriptor instead.
func (PitchZone) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{24}
}

type VarStatus int32

const (
	VarStatus_VAR_STARTED   VarStatus = 0
	VarStatus_VAR_FINISHED  VarStatus = 1
	VarStatus_VAR_CANCELLED VarStatus = 2
)

// Enum value maps for VarStatus.
var (
	VarStatus_name = map[int32]string{
		0: "VAR_STARTED",
		1: "VAR_FINISHED",
		2: "VAR_CANCELLED",
	}
	VarStatus_value = map[string]int32{
		"VAR_STARTED":   0,
		"VAR_FINISHED":  1,
		"VAR_CANCELLED": 2,
	}
)

func (x VarStatus) Enum() *VarStatus {
	p := new(VarStatus)
	*p = x
	return p
}

func (x VarStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VarStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[25].Descriptor()
}

func (VarStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[25]
}

func (x VarStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VarStatus.Descriptor instead.
func (VarStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{25}
}

type VarReason int32

const (
	VarReason_VAR_REASON_UNKNOWN VarReason = 0
	VarReason_VAR_REASON_GOAL    VarReason = 1
	VarReason_VAR_REASON_PENALTY VarReason = 2
	VarReason_VAR_REASON_CARDS   VarReason = 3
)

// Enum value maps for VarReason.
var (
	VarReason_name = map[int32]string{
		0: "VAR_REASON_UNKNOWN",
		1: "VAR_REASON_GOAL",
		2: "VAR_REASON_PENALTY",
		3: "VAR_REASON_CARDS",
	}
	VarReason_value = map[string]int32{
		"VAR_REASON_UNKNOWN": 0,
		"VAR_REASON_GOAL":    1,
		"VAR_REASON_PENALTY": 2,
		"VAR_REASON_CARDS":   3,
	}
)

func (x VarReason) Enum() *VarReason {
	p := new(VarReason)
	*p = x
	return p
}

func (x VarReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VarReason) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[26].Descriptor()
}

func (VarReason) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[26]
}

func (x VarReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VarReason.Descriptor instead.
func (VarReason) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{26}
}

type StagePhases int32

const (
	StagePhases_STAGE_PHASE_UNKNOWN                                                StagePhases = 0
	StagePhases_PROMOTION                                                          StagePhases = 1
	StagePhases_RELEGATION                                                         StagePhases = 2
	StagePhases_CHAMPIONS_LEAGUE                                                   StagePhases = 3
	StagePhases_CHAMPIONS_LEAGUE_QUALIFICATION                                     StagePhases = 4
	StagePhases_PLAY_OFF                                                           StagePhases = 5
	StagePhases_RELEGATION_PLAY_OFF                                                StagePhases = 6
	StagePhases_PROMOTION_PLAY_OFF                                                 StagePhases = 7
	StagePhases_EUROPA_LEAGUE                                                      StagePhases = 8
	StagePhases_EUROPA_LEAGUE_QUALIFICATION                                        StagePhases = 9
	StagePhases_QUALIFICATION_TO_NEXT_STAGE                                        StagePhases = 10
	StagePhases_POSSIBLE_QUALIFICATION_TO_NEXT_STAGE                               StagePhases = 11
	StagePhases_CHAMPIONSHIP_PLAY_OFF                                              StagePhases = 12
	StagePhases_CAF_CHAMPIONS_LEAGUE_QUALIFICATION                                 StagePhases = 13
	StagePhases_CAF_CONFEDERATION_CUP_QUALIFICATION                                StagePhases = 14
	StagePhases_AFC_CHAMPIONS_LEAGUE                                               StagePhases = 15
	StagePhases_AFC_CHAMPIONS_LEAGUE_QUALIFICATION                                 StagePhases = 16
	StagePhases_AFC_CUP_QUALIFICATION                                              StagePhases = 17
	StagePhases_AFC_PRESIDENTS_CUP                                                 StagePhases = 18
	StagePhases_COPA_LIBERTADORES                                                  StagePhases = 19
	StagePhases_COPA_LIBERTADORES_QUALIFICATION                                    StagePhases = 20
	StagePhases_COPA_SUDAMERICANA                                                  StagePhases = 21
	StagePhases_OFC_CHAMPIONS_LEAGUE                                               StagePhases = 22
	StagePhases_OFC_CHAMPIONS_LEAGUE_QUALIFICATION                                 StagePhases = 23
	StagePhases_CONCACAF_CHAMPIONS_LEAGUE                                          StagePhases = 24
	StagePhases_CFU_CLUB_CHAMPIONSHIP                                              StagePhases = 25
	StagePhases_AFC_CUP                                                            StagePhases = 26
	StagePhases_POSSIBLE_ASIAN_CUP                                                 StagePhases = 27
	StagePhases_ASIAN_CUP                                                          StagePhases = 28
	StagePhases_FA_CUP_GIVES_EUROPA_LEAGUE                                         StagePhases = 29
	StagePhases_FA_CUP_GIVES_EUROPA_LEAGUE_QUALIFICATION                           StagePhases = 30
	StagePhases_FA_CUP_GIVES_CAF_CONFEDERATION_CUP_QUALIFICATION                   StagePhases = 31
	StagePhases_FA_CUP_GIVES_AFC_CHAMPIONS_LEAGUE                                  StagePhases = 32
	StagePhases_FA_CUP_GIVES_AFC_CUP_QUALIFICATION                                 StagePhases = 33
	StagePhases_FA_CUP_GIVES_COPA_LIBERTADORES                                     StagePhases = 34
	StagePhases_FA_CUP_GIVES_COPA_SUDAMERICANA                                     StagePhases = 35
	StagePhases_FA_CUP_GIVES_AFC_CHAMPIONS_LEAGUE_QUALIFICATION                    StagePhases = 37
	StagePhases_FA_CUP_GIVES_AFC_CUP                                               StagePhases = 38
	StagePhases_FA_CUP_GIVES_CONCACAF_CHAMPIONS_LEAGUE                             StagePhases = 39
	StagePhases_FA_CUP_GIVES_EXTRA_EUROPA_LEAGUE_SPOT                              StagePhases = 40
	StagePhases_FA_CUP_GIVES_EXTRA_EUROPA_LEAGUE_QUALIFICATION_SPOT                StagePhases = 41
	StagePhases_FA_CUP_GIVES_COPA_LIBERTADORES_QUALIFICATION                       StagePhases = 42
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CHAMPIONS_LEAGUE_QUALIFICATION     StagePhases = 43
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CHAMPIONS_LEAGUE                   StagePhases = 44
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_CHAMPIONS_LEAGUE                       StagePhases = 45
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_LEAGUE_QUALIFICATION                   StagePhases = 46
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_EUROPA_LEAGUE                          StagePhases = 47
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_EUROPA_LEAGUE_QUALIFICATION            StagePhases = 48
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_CAF_CHAMPIONS_LEAGUE_QUALIFICATION     StagePhases = 49
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_CAF_CONFEDERATION_CUP_QUALIFICATION    StagePhases = 50
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CUP                                StagePhases = 51
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CUP_QUALIFICATION                  StagePhases = 52
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_PRESIDENTS_CUP                     StagePhases = 53
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_OFC_CHAMPIONS_LEAGUE                   StagePhases = 54
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_OFC_CHAMPIONS_LEAGUE_QUALIFICATION     StagePhases = 55
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_CONCACAF_CHAMPIONS_LEAGUE              StagePhases = 56
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_CFU_CLUB_CHAMPIONSHIP                  StagePhases = 57
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_COPA_LIBERTADORES                      StagePhases = 58
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_COPA_LIBERTADORES_QUALIFICATION        StagePhases = 59
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_COPA_SUDAMERICANA                      StagePhases = 60
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_CHAMPIONS_LEAGUE_QUALIFICATION         StagePhases = 61
	StagePhases_LEAGUE_CUP_GIVES_EUROPA_LEAGUE_QUALIFICATION                       StagePhases = 62
	StagePhases_LEAGUE_CUP_WINNER_GIVES_EXTRA_EUROPA_LEAGUE_QUALIFICATION_SPOT     StagePhases = 63
	StagePhases_COPA_LIBERTADORES_PLAYOFF_GIVES_COPA_SUDAMERICANA                  StagePhases = 64
	StagePhases_COPA_LIBERTADORES_PLAYOFF_GIVES_COPPA_LIBERTADORES                 StagePhases = 65
	StagePhases_FINAL_LEAGUE_PLAYOFF_GIVES_EUROPA_LEAGUE_QUALIFICATION             StagePhases = 66
	StagePhases_FA_CUP_GIVES_EUROPA_CONFERENCE_LEAGUE_QUALIFICATION                StagePhases = 67
	StagePhases_EUROPA_CONFERENCE_LEAGUE_QUALIFICATION                             StagePhases = 68
	StagePhases_EUROPA_CONFERENCE_LEAGUE                                           StagePhases = 69
	StagePhases_CHAMPIONSHIP_PLAY_OFF_GIVES_EUROPA_CONFERENCE_LEAGUE_QUALIFICATION StagePhases = 70
	StagePhases_LEAGUE_CUP_GIVES_EUROPA_CONFERENCE_LEAGUE_QUALIFICATION            StagePhases = 71
	StagePhases_WORLD_CUP                                                          StagePhases = 72
	StagePhases_POSSIBLE_CHAMPIONSHIP_PLAY_OFF                                     StagePhases = 73
	StagePhases_QUALIFICATION_TO_QUARTER_FINALS                                    StagePhases = 74
	StagePhases_QUALIFICATION_TO_EIGHTH_FINALS                                     StagePhases = 75
	StagePhases_DIVISION_CHAMPIONSHIP_PLAYOFF                                      StagePhases = 76
	StagePhases_CONFERENCE_CHAMPIONSHIP_PLAYOFF                                    StagePhases = 77
)

// Enum value maps for StagePhases.
var (
	StagePhases_name = map[int32]string{
		0:  "STAGE_PHASE_UNKNOWN",
		1:  "PROMOTION",
		2:  "RELEGATION",
		3:  "CHAMPIONS_LEAGUE",
		4:  "CHAMPIONS_LEAGUE_QUALIFICATION",
		5:  "PLAY_OFF",
		6:  "RELEGATION_PLAY_OFF",
		7:  "PROMOTION_PLAY_OFF",
		8:  "EUROPA_LEAGUE",
		9:  "EUROPA_LEAGUE_QUALIFICATION",
		10: "QUALIFICATION_TO_NEXT_STAGE",
		11: "POSSIBLE_QUALIFICATION_TO_NEXT_STAGE",
		12: "CHAMPIONSHIP_PLAY_OFF",
		13: "CAF_CHAMPIONS_LEAGUE_QUALIFICATION",
		14: "CAF_CONFEDERATION_CUP_QUALIFICATION",
		15: "AFC_CHAMPIONS_LEAGUE",
		16: "AFC_CHAMPIONS_LEAGUE_QUALIFICATION",
		17: "AFC_CUP_QUALIFICATION",
		18: "AFC_PRESIDENTS_CUP",
		19: "COPA_LIBERTADORES",
		20: "COPA_LIBERTADORES_QUALIFICATION",
		21: "COPA_SUDAMERICANA",
		22: "OFC_CHAMPIONS_LEAGUE",
		23: "OFC_CHAMPIONS_LEAGUE_QUALIFICATION",
		24: "CONCACAF_CHAMPIONS_LEAGUE",
		25: "CFU_CLUB_CHAMPIONSHIP",
		26: "AFC_CUP",
		27: "POSSIBLE_ASIAN_CUP",
		28: "ASIAN_CUP",
		29: "FA_CUP_GIVES_EUROPA_LEAGUE",
		30: "FA_CUP_GIVES_EUROPA_LEAGUE_QUALIFICATION",
		31: "FA_CUP_GIVES_CAF_CONFEDERATION_CUP_QUALIFICATION",
		32: "FA_CUP_GIVES_AFC_CHAMPIONS_LEAGUE",
		33: "FA_CUP_GIVES_AFC_CUP_QUALIFICATION",
		34: "FA_CUP_GIVES_COPA_LIBERTADORES",
		35: "FA_CUP_GIVES_COPA_SUDAMERICANA",
		37: "FA_CUP_GIVES_AFC_CHAMPIONS_LEAGUE_QUALIFICATION",
		38: "FA_CUP_GIVES_AFC_CUP",
		39: "FA_CUP_GIVES_CONCACAF_CHAMPIONS_LEAGUE",
		40: "FA_CUP_GIVES_EXTRA_EUROPA_LEAGUE_SPOT",
		41: "FA_CUP_GIVES_EXTRA_EUROPA_LEAGUE_QUALIFICATION_SPOT",
		42: "FA_CUP_GIVES_COPA_LIBERTADORES_QUALIFICATION",
		43: "CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CHAMPIONS_LEAGUE_QUALIFICATION",
		44: "CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CHAMPIONS_LEAGUE",
		45: "CHAMPIONSHIP_PLAY_OFF_GIVES_CHAMPIONS_LEAGUE",
		46: "CHAMPIONSHIP_PLAY_OFF_GIVES_LEAGUE_QUALIFICATION",
		47: "CHAMPIONSHIP_PLAY_OFF_GIVES_EUROPA_LEAGUE",
		48: "CHAMPIONSHIP_PLAY_OFF_GIVES_EUROPA_LEAGUE_QUALIFICATION",
		49: "CHAMPIONSHIP_PLAY_OFF_GIVES_CAF_CHAMPIONS_LEAGUE_QUALIFICATION",
		50: "CHAMPIONSHIP_PLAY_OFF_GIVES_CAF_CONFEDERATION_CUP_QUALIFICATION",
		51: "CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CUP",
		52: "CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CUP_QUALIFICATION",
		53: "CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_PRESIDENTS_CUP",
		54: "CHAMPIONSHIP_PLAY_OFF_GIVES_OFC_CHAMPIONS_LEAGUE",
		55: "CHAMPIONSHIP_PLAY_OFF_GIVES_OFC_CHAMPIONS_LEAGUE_QUALIFICATION",
		56: "CHAMPIONSHIP_PLAY_OFF_GIVES_CONCACAF_CHAMPIONS_LEAGUE",
		57: "CHAMPIONSHIP_PLAY_OFF_GIVES_CFU_CLUB_CHAMPIONSHIP",
		58: "CHAMPIONSHIP_PLAY_OFF_GIVES_COPA_LIBERTADORES",
		59: "CHAMPIONSHIP_PLAY_OFF_GIVES_COPA_LIBERTADORES_QUALIFICATION",
		60: "CHAMPIONSHIP_PLAY_OFF_GIVES_COPA_SUDAMERICANA",
		61: "CHAMPIONSHIP_PLAY_OFF_GIVES_CHAMPIONS_LEAGUE_QUALIFICATION",
		62: "LEAGUE_CUP_GIVES_EUROPA_LEAGUE_QUALIFICATION",
		63: "LEAGUE_CUP_WINNER_GIVES_EXTRA_EUROPA_LEAGUE_QUALIFICATION_SPOT",
		64: "COPA_LIBERTADORES_PLAYOFF_GIVES_COPA_SUDAMERICANA",
		65: "COPA_LIBERTADORES_PLAYOFF_GIVES_COPPA_LIBERTADORES",
		66: "FINAL_LEAGUE_PLAYOFF_GIVES_EUROPA_LEAGUE_QUALIFICATION",
		67: "FA_CUP_GIVES_EUROPA_CONFERENCE_LEAGUE_QUALIFICATION",
		68: "EUROPA_CONFERENCE_LEAGUE_QUALIFICATION",
		69: "EUROPA_CONFERENCE_LEAGUE",
		70: "CHAMPIONSHIP_PLAY_OFF_GIVES_EUROPA_CONFERENCE_LEAGUE_QUALIFICATION",
		71: "LEAGUE_CUP_GIVES_EUROPA_CONFERENCE_LEAGUE_QUALIFICATION",
		72: "WORLD_CUP",
		73: "POSSIBLE_CHAMPIONSHIP_PLAY_OFF",
		74: "QUALIFICATION_TO_QUARTER_FINALS",
		75: "QUALIFICATION_TO_EIGHTH_FINALS",
		76: "DIVISION_CHAMPIONSHIP_PLAYOFF",
		77: "CONFERENCE_CHAMPIONSHIP_PLAYOFF",
	}
	StagePhases_value = map[string]int32{
		"STAGE_PHASE_UNKNOWN":                                 0,
		"PROMOTION":                                           1,
		"RELEGATION":                                          2,
		"CHAMPIONS_LEAGUE":                                    3,
		"CHAMPIONS_LEAGUE_QUALIFICATION":                      4,
		"PLAY_OFF":                                            5,
		"RELEGATION_PLAY_OFF":                                 6,
		"PROMOTION_PLAY_OFF":                                  7,
		"EUROPA_LEAGUE":                                       8,
		"EUROPA_LEAGUE_QUALIFICATION":                         9,
		"QUALIFICATION_TO_NEXT_STAGE":                         10,
		"POSSIBLE_QUALIFICATION_TO_NEXT_STAGE":                11,
		"CHAMPIONSHIP_PLAY_OFF":                               12,
		"CAF_CHAMPIONS_LEAGUE_QUALIFICATION":                  13,
		"CAF_CONFEDERATION_CUP_QUALIFICATION":                 14,
		"AFC_CHAMPIONS_LEAGUE":                                15,
		"AFC_CHAMPIONS_LEAGUE_QUALIFICATION":                  16,
		"AFC_CUP_QUALIFICATION":                               17,
		"AFC_PRESIDENTS_CUP":                                  18,
		"COPA_LIBERTADORES":                                   19,
		"COPA_LIBERTADORES_QUALIFICATION":                     20,
		"COPA_SUDAMERICANA":                                   21,
		"OFC_CHAMPIONS_LEAGUE":                                22,
		"OFC_CHAMPIONS_LEAGUE_QUALIFICATION":                  23,
		"CONCACAF_CHAMPIONS_LEAGUE":                           24,
		"CFU_CLUB_CHAMPIONSHIP":                               25,
		"AFC_CUP":                                             26,
		"POSSIBLE_ASIAN_CUP":                                  27,
		"ASIAN_CUP":                                           28,
		"FA_CUP_GIVES_EUROPA_LEAGUE":                          29,
		"FA_CUP_GIVES_EUROPA_LEAGUE_QUALIFICATION":            30,
		"FA_CUP_GIVES_CAF_CONFEDERATION_CUP_QUALIFICATION":    31,
		"FA_CUP_GIVES_AFC_CHAMPIONS_LEAGUE":                   32,
		"FA_CUP_GIVES_AFC_CUP_QUALIFICATION":                  33,
		"FA_CUP_GIVES_COPA_LIBERTADORES":                      34,
		"FA_CUP_GIVES_COPA_SUDAMERICANA":                      35,
		"FA_CUP_GIVES_AFC_CHAMPIONS_LEAGUE_QUALIFICATION":     37,
		"FA_CUP_GIVES_AFC_CUP":                                38,
		"FA_CUP_GIVES_CONCACAF_CHAMPIONS_LEAGUE":              39,
		"FA_CUP_GIVES_EXTRA_EUROPA_LEAGUE_SPOT":               40,
		"FA_CUP_GIVES_EXTRA_EUROPA_LEAGUE_QUALIFICATION_SPOT": 41,
		"FA_CUP_GIVES_COPA_LIBERTADORES_QUALIFICATION":        42,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CHAMPIONS_LEAGUE_QUALIFICATION":     43,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CHAMPIONS_LEAGUE":                   44,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_CHAMPIONS_LEAGUE":                       45,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_LEAGUE_QUALIFICATION":                   46,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_EUROPA_LEAGUE":                          47,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_EUROPA_LEAGUE_QUALIFICATION":            48,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_CAF_CHAMPIONS_LEAGUE_QUALIFICATION":     49,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_CAF_CONFEDERATION_CUP_QUALIFICATION":    50,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CUP":                                51,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_CUP_QUALIFICATION":                  52,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_AFC_PRESIDENTS_CUP":                     53,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_OFC_CHAMPIONS_LEAGUE":                   54,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_OFC_CHAMPIONS_LEAGUE_QUALIFICATION":     55,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_CONCACAF_CHAMPIONS_LEAGUE":              56,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_CFU_CLUB_CHAMPIONSHIP":                  57,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_COPA_LIBERTADORES":                      58,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_COPA_LIBERTADORES_QUALIFICATION":        59,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_COPA_SUDAMERICANA":                      60,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_CHAMPIONS_LEAGUE_QUALIFICATION":         61,
		"LEAGUE_CUP_GIVES_EUROPA_LEAGUE_QUALIFICATION":                       62,
		"LEAGUE_CUP_WINNER_GIVES_EXTRA_EUROPA_LEAGUE_QUALIFICATION_SPOT":     63,
		"COPA_LIBERTADORES_PLAYOFF_GIVES_COPA_SUDAMERICANA":                  64,
		"COPA_LIBERTADORES_PLAYOFF_GIVES_COPPA_LIBERTADORES":                 65,
		"FINAL_LEAGUE_PLAYOFF_GIVES_EUROPA_LEAGUE_QUALIFICATION":             66,
		"FA_CUP_GIVES_EUROPA_CONFERENCE_LEAGUE_QUALIFICATION":                67,
		"EUROPA_CONFERENCE_LEAGUE_QUALIFICATION":                             68,
		"EUROPA_CONFERENCE_LEAGUE":                                           69,
		"CHAMPIONSHIP_PLAY_OFF_GIVES_EUROPA_CONFERENCE_LEAGUE_QUALIFICATION": 70,
		"LEAGUE_CUP_GIVES_EUROPA_CONFERENCE_LEAGUE_QUALIFICATION":            71,
		"WORLD_CUP":                       72,
		"POSSIBLE_CHAMPIONSHIP_PLAY_OFF":  73,
		"QUALIFICATION_TO_QUARTER_FINALS": 74,
		"QUALIFICATION_TO_EIGHTH_FINALS":  75,
		"DIVISION_CHAMPIONSHIP_PLAYOFF":   76,
		"CONFERENCE_CHAMPIONSHIP_PLAYOFF": 77,
	}
)

func (x StagePhases) Enum() *StagePhases {
	p := new(StagePhases)
	*p = x
	return p
}

func (x StagePhases) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StagePhases) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[27].Descriptor()
}

func (StagePhases) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[27]
}

func (x StagePhases) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StagePhases.Descriptor instead.
func (StagePhases) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{27}
}

type RoundType int32

const (
	RoundType_UNKNOWN_ROUND       RoundType = 0
	RoundType_NO_ROUND            RoundType = 1
	RoundType_SEMI_FINALS         RoundType = 2
	RoundType_QUARTER_FINALS      RoundType = 3
	RoundType__1_8                RoundType = 4
	RoundType__1_16               RoundType = 5
	RoundType__1_32               RoundType = 6
	RoundType__1_64               RoundType = 7
	RoundType__1_128              RoundType = 8
	RoundType_FINAL               RoundType = 9
	RoundType__1_96               RoundType = 10
	RoundType__1_48               RoundType = 11
	RoundType__1_24               RoundType = 12
	RoundType__1_12               RoundType = 13
	RoundType__1_6                RoundType = 14
	RoundType__1_3                RoundType = 15
	RoundType__1_28               RoundType = 16
	RoundType__1_14               RoundType = 17
	RoundType__1_7                RoundType = 18
	RoundType_SMALL_FINAL         RoundType = 19
	RoundType__1_256              RoundType = 20
	RoundType__1_512              RoundType = 21
	RoundType__5_6                RoundType = 22
	RoundType__7_8                RoundType = 23
	RoundType__9_10               RoundType = 24
	RoundType__11_12              RoundType = 25
	RoundType__5_8                RoundType = 26
	RoundType__17_20              RoundType = 27
	RoundType__21_24              RoundType = 28
	RoundType__17_18              RoundType = 29
	RoundType__19_20              RoundType = 30
	RoundType__21_22              RoundType = 31
	RoundType__23_24              RoundType = 32
	RoundType__12_13              RoundType = 33
	RoundType__11_14              RoundType = 34
	RoundType_TITLE               RoundType = 35
	RoundType_THIRD_PLACE_PLAYOFF RoundType = 36
	RoundType_ROUND_ROBIN         RoundType = 37
)

// Enum value maps for RoundType.
var (
	RoundType_name = map[int32]string{
		0:  "UNKNOWN_ROUND",
		1:  "NO_ROUND",
		2:  "SEMI_FINALS",
		3:  "QUARTER_FINALS",
		4:  "_1_8",
		5:  "_1_16",
		6:  "_1_32",
		7:  "_1_64",
		8:  "_1_128",
		9:  "FINAL",
		10: "_1_96",
		11: "_1_48",
		12: "_1_24",
		13: "_1_12",
		14: "_1_6",
		15: "_1_3",
		16: "_1_28",
		17: "_1_14",
		18: "_1_7",
		19: "SMALL_FINAL",
		20: "_1_256",
		21: "_1_512",
		22: "_5_6",
		23: "_7_8",
		24: "_9_10",
		25: "_11_12",
		26: "_5_8",
		27: "_17_20",
		28: "_21_24",
		29: "_17_18",
		30: "_19_20",
		31: "_21_22",
		32: "_23_24",
		33: "_12_13",
		34: "_11_14",
		35: "TITLE",
		36: "THIRD_PLACE_PLAYOFF",
		37: "ROUND_ROBIN",
	}
	RoundType_value = map[string]int32{
		"UNKNOWN_ROUND":       0,
		"NO_ROUND":            1,
		"SEMI_FINALS":         2,
		"QUARTER_FINALS":      3,
		"_1_8":                4,
		"_1_16":               5,
		"_1_32":               6,
		"_1_64":               7,
		"_1_128":              8,
		"FINAL":               9,
		"_1_96":               10,
		"_1_48":               11,
		"_1_24":               12,
		"_1_12":               13,
		"_1_6":                14,
		"_1_3":                15,
		"_1_28":               16,
		"_1_14":               17,
		"_1_7":                18,
		"SMALL_FINAL":         19,
		"_1_256":              20,
		"_1_512":              21,
		"_5_6":                22,
		"_7_8":                23,
		"_9_10":               24,
		"_11_12":              25,
		"_5_8":                26,
		"_17_20":              27,
		"_21_24":              28,
		"_17_18":              29,
		"_19_20":              30,
		"_21_22":              31,
		"_23_24":              32,
		"_12_13":              33,
		"_11_14":              34,
		"TITLE":               35,
		"THIRD_PLACE_PLAYOFF": 36,
		"ROUND_ROBIN":         37,
	}
)

func (x RoundType) Enum() *RoundType {
	p := new(RoundType)
	*p = x
	return p
}

func (x RoundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoundType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[28].Descriptor()
}

func (RoundType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[28]
}

func (x RoundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoundType.Descriptor instead.
func (RoundType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{28}
}

type BatsmanStatusType int32

const (
	BatsmanStatusType_UNKNOWN_BATSMAN_STATUS BatsmanStatusType = 0
	BatsmanStatusType_RUN_OUT_SUB            BatsmanStatusType = 1
	BatsmanStatusType_CLEAN_BOWLED           BatsmanStatusType = 2
	BatsmanStatusType_BAT_PAD                BatsmanStatusType = 3
	BatsmanStatusType_HIT_WICKET             BatsmanStatusType = 4
	BatsmanStatusType_OUT_STUMPED_SUB        BatsmanStatusType = 5
	BatsmanStatusType_OBSTRUCTING_THE_FIELD  BatsmanStatusType = 6
	BatsmanStatusType_CATCH_OUT              BatsmanStatusType = 7
	BatsmanStatusType_RUN_OUT                BatsmanStatusType = 8
	BatsmanStatusType_OUT_STUMPED            BatsmanStatusType = 9
	BatsmanStatusType_CATCH_OUT_SUB          BatsmanStatusType = 10
	BatsmanStatusType_NOT_OUT                BatsmanStatusType = 11
	BatsmanStatusType_RETIRED_HURT           BatsmanStatusType = 12
	BatsmanStatusType_DID_NOT_BAT            BatsmanStatusType = 13
	BatsmanStatusType_ABSENT                 BatsmanStatusType = 14
	BatsmanStatusType_YET_TO_BAT             BatsmanStatusType = 15
	BatsmanStatusType_RETIRED_OUT            BatsmanStatusType = 16
	BatsmanStatusType_LBW                    BatsmanStatusType = 17
)

// Enum value maps for BatsmanStatusType.
var (
	BatsmanStatusType_name = map[int32]string{
		0:  "UNKNOWN_BATSMAN_STATUS",
		1:  "RUN_OUT_SUB",
		2:  "CLEAN_BOWLED",
		3:  "BAT_PAD",
		4:  "HIT_WICKET",
		5:  "OUT_STUMPED_SUB",
		6:  "OBSTRUCTING_THE_FIELD",
		7:  "CATCH_OUT",
		8:  "RUN_OUT",
		9:  "OUT_STUMPED",
		10: "CATCH_OUT_SUB",
		11: "NOT_OUT",
		12: "RETIRED_HURT",
		13: "DID_NOT_BAT",
		14: "ABSENT",
		15: "YET_TO_BAT",
		16: "RETIRED_OUT",
		17: "LBW",
	}
	BatsmanStatusType_value = map[string]int32{
		"UNKNOWN_BATSMAN_STATUS": 0,
		"RUN_OUT_SUB":            1,
		"CLEAN_BOWLED":           2,
		"BAT_PAD":                3,
		"HIT_WICKET":             4,
		"OUT_STUMPED_SUB":        5,
		"OBSTRUCTING_THE_FIELD":  6,
		"CATCH_OUT":              7,
		"RUN_OUT":                8,
		"OUT_STUMPED":            9,
		"CATCH_OUT_SUB":          10,
		"NOT_OUT":                11,
		"RETIRED_HURT":           12,
		"DID_NOT_BAT":            13,
		"ABSENT":                 14,
		"YET_TO_BAT":             15,
		"RETIRED_OUT":            16,
		"LBW":                    17,
	}
)

func (x BatsmanStatusType) Enum() *BatsmanStatusType {
	p := new(BatsmanStatusType)
	*p = x
	return p
}

func (x BatsmanStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatsmanStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[29].Descriptor()
}

func (BatsmanStatusType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[29]
}

func (x BatsmanStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatsmanStatusType.Descriptor instead.
func (BatsmanStatusType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{29}
}

type BallByBallScoreType int32

const (
	BallByBallScoreType_UNKNOWN_BALL_BY_BALL_SCORE BallByBallScoreType = 0
	BallByBallScoreType_RUN                        BallByBallScoreType = 1
	BallByBallScoreType_NO_RUN                     BallByBallScoreType = 2
	BallByBallScoreType_FOUR                       BallByBallScoreType = 3
	BallByBallScoreType_SIX                        BallByBallScoreType = 4
	BallByBallScoreType_BYE                        BallByBallScoreType = 5
	BallByBallScoreType_LEG_BYE                    BallByBallScoreType = 6
	BallByBallScoreType_WIDE                       BallByBallScoreType = 7
	BallByBallScoreType_NO_BALL                    BallByBallScoreType = 8
	BallByBallScoreType_OUT                        BallByBallScoreType = 9
	BallByBallScoreType_PENALTY_RUN                BallByBallScoreType = 10
	BallByBallScoreType_RETIRED_BALL_BY_BALL_SCORE BallByBallScoreType = 11
	BallByBallScoreType_RETIRED_HURT_BY_BALL_SCORE BallByBallScoreType = 12
	BallByBallScoreType_NO_BALL_LEG_BYE            BallByBallScoreType = 13
	BallByBallScoreType_LEG_BYE_OUT                BallByBallScoreType = 14
	BallByBallScoreType_NO_BALL_BYE                BallByBallScoreType = 15
	BallByBallScoreType_BYE_OUT                    BallByBallScoreType = 16
	BallByBallScoreType_PLAIN_COMMENT              BallByBallScoreType = 17
)

// Enum value maps for BallByBallScoreType.
var (
	BallByBallScoreType_name = map[int32]string{
		0:  "UNKNOWN_BALL_BY_BALL_SCORE",
		1:  "RUN",
		2:  "NO_RUN",
		3:  "FOUR",
		4:  "SIX",
		5:  "BYE",
		6:  "LEG_BYE",
		7:  "WIDE",
		8:  "NO_BALL",
		9:  "OUT",
		10: "PENALTY_RUN",
		11: "RETIRED_BALL_BY_BALL_SCORE",
		12: "RETIRED_HURT_BY_BALL_SCORE",
		13: "NO_BALL_LEG_BYE",
		14: "LEG_BYE_OUT",
		15: "NO_BALL_BYE",
		16: "BYE_OUT",
		17: "PLAIN_COMMENT",
	}
	BallByBallScoreType_value = map[string]int32{
		"UNKNOWN_BALL_BY_BALL_SCORE": 0,
		"RUN":                        1,
		"NO_RUN":                     2,
		"FOUR":                       3,
		"SIX":                        4,
		"BYE":                        5,
		"LEG_BYE":                    6,
		"WIDE":                       7,
		"NO_BALL":                    8,
		"OUT":                        9,
		"PENALTY_RUN":                10,
		"RETIRED_BALL_BY_BALL_SCORE": 11,
		"RETIRED_HURT_BY_BALL_SCORE": 12,
		"NO_BALL_LEG_BYE":            13,
		"LEG_BYE_OUT":                14,
		"NO_BALL_BYE":                15,
		"BYE_OUT":                    16,
		"PLAIN_COMMENT":              17,
	}
)

func (x BallByBallScoreType) Enum() *BallByBallScoreType {
	p := new(BallByBallScoreType)
	*p = x
	return p
}

func (x BallByBallScoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BallByBallScoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[30].Descriptor()
}

func (BallByBallScoreType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[30]
}

func (x BallByBallScoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BallByBallScoreType.Descriptor instead.
func (BallByBallScoreType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{30}
}

type EventFormat int32

const (
	EventFormat_UNKNOWN_EVENT_FORMAT   EventFormat = 0
	EventFormat_ODI_FORMAT             EventFormat = 1
	EventFormat_ODI_YOUTH_FORMAT       EventFormat = 2
	EventFormat_LIST_A_ODI_FORMAT      EventFormat = 3
	EventFormat_T_10_FORMAT            EventFormat = 4
	EventFormat_T_20_FORMAT            EventFormat = 5
	EventFormat_T_20_INTL_FORMAT       EventFormat = 6
	EventFormat_TEST_FORMAT            EventFormat = 7
	EventFormat_TEST_YOUTH_FORMAT      EventFormat = 8
	EventFormat_FIRST_CLASS_FORMAT     EventFormat = 9
	EventFormat_LIST_A_FORMAT          EventFormat = 10
	EventFormat_MATCH_ONE_DAY_FORMAT   EventFormat = 11
	EventFormat_MATCH_2_DAYS_FORMAT    EventFormat = 12
	EventFormat_MATCH_3_DAYS_FORMAT    EventFormat = 13
	EventFormat_MATCH_4_DAYS_FORMAT    EventFormat = 14
	EventFormat_MATCH_5_DAYS_FORMAT    EventFormat = 15
	EventFormat_MATCH_6_DAYS_FORMAT    EventFormat = 16
	EventFormat_MATCH_5_OVERS_FORMAT   EventFormat = 17
	EventFormat_MATCH_10_OVERS_FORMAT  EventFormat = 18
	EventFormat_MATCH_35_OVERS_FORMAT  EventFormat = 19
	EventFormat_MATCH_45_OVERS_FORMAT  EventFormat = 20
	EventFormat_MATCH_50_OVERS_FORMAT  EventFormat = 21
	EventFormat_MATCH_100_BALLS_FORMAT EventFormat = 22
	EventFormat_T_20_YOUTH_FORMAT      EventFormat = 23
)

// Enum value maps for EventFormat.
var (
	EventFormat_name = map[int32]string{
		0:  "UNKNOWN_EVENT_FORMAT",
		1:  "ODI_FORMAT",
		2:  "ODI_YOUTH_FORMAT",
		3:  "LIST_A_ODI_FORMAT",
		4:  "T_10_FORMAT",
		5:  "T_20_FORMAT",
		6:  "T_20_INTL_FORMAT",
		7:  "TEST_FORMAT",
		8:  "TEST_YOUTH_FORMAT",
		9:  "FIRST_CLASS_FORMAT",
		10: "LIST_A_FORMAT",
		11: "MATCH_ONE_DAY_FORMAT",
		12: "MATCH_2_DAYS_FORMAT",
		13: "MATCH_3_DAYS_FORMAT",
		14: "MATCH_4_DAYS_FORMAT",
		15: "MATCH_5_DAYS_FORMAT",
		16: "MATCH_6_DAYS_FORMAT",
		17: "MATCH_5_OVERS_FORMAT",
		18: "MATCH_10_OVERS_FORMAT",
		19: "MATCH_35_OVERS_FORMAT",
		20: "MATCH_45_OVERS_FORMAT",
		21: "MATCH_50_OVERS_FORMAT",
		22: "MATCH_100_BALLS_FORMAT",
		23: "T_20_YOUTH_FORMAT",
	}
	EventFormat_value = map[string]int32{
		"UNKNOWN_EVENT_FORMAT":   0,
		"ODI_FORMAT":             1,
		"ODI_YOUTH_FORMAT":       2,
		"LIST_A_ODI_FORMAT":      3,
		"T_10_FORMAT":            4,
		"T_20_FORMAT":            5,
		"T_20_INTL_FORMAT":       6,
		"TEST_FORMAT":            7,
		"TEST_YOUTH_FORMAT":      8,
		"FIRST_CLASS_FORMAT":     9,
		"LIST_A_FORMAT":          10,
		"MATCH_ONE_DAY_FORMAT":   11,
		"MATCH_2_DAYS_FORMAT":    12,
		"MATCH_3_DAYS_FORMAT":    13,
		"MATCH_4_DAYS_FORMAT":    14,
		"MATCH_5_DAYS_FORMAT":    15,
		"MATCH_6_DAYS_FORMAT":    16,
		"MATCH_5_OVERS_FORMAT":   17,
		"MATCH_10_OVERS_FORMAT":  18,
		"MATCH_35_OVERS_FORMAT":  19,
		"MATCH_45_OVERS_FORMAT":  20,
		"MATCH_50_OVERS_FORMAT":  21,
		"MATCH_100_BALLS_FORMAT": 22,
		"T_20_YOUTH_FORMAT":      23,
	}
)

func (x EventFormat) Enum() *EventFormat {
	p := new(EventFormat)
	*p = x
	return p
}

func (x EventFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[31].Descriptor()
}

func (EventFormat) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[31]
}

func (x EventFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventFormat.Descriptor instead.
func (EventFormat) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{31}
}

type TossChoice int32

const (
	TossChoice_BAT  TossChoice = 0
	TossChoice_BOWL TossChoice = 1
)

// Enum value maps for TossChoice.
var (
	TossChoice_name = map[int32]string{
		0: "BAT",
		1: "BOWL",
	}
	TossChoice_value = map[string]int32{
		"BAT":  0,
		"BOWL": 1,
	}
)

func (x TossChoice) Enum() *TossChoice {
	p := new(TossChoice)
	*p = x
	return p
}

func (x TossChoice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TossChoice) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[32].Descriptor()
}

func (TossChoice) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[32]
}

func (x TossChoice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TossChoice.Descriptor instead.
func (TossChoice) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{32}
}

var File_enums_proto protoreflect.FileDescriptor

var file_enums_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x2a, 0x36, 0x0a,
	0x11, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41,
	0x54, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x1b, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x08,
	0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79,
	0x10, 0x01, 0x2a, 0x8c, 0x01, 0x0a, 0x0c, 0x4a, 0x65, 0x72, 0x73, 0x65, 0x79, 0x44, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4a,
	0x45, 0x52, 0x53, 0x45, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x4f, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x45, 0x52, 0x53, 0x45, 0x59, 0x5f, 0x44,
	0x45, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x53, 0x5f, 0x4a, 0x45,
	0x52, 0x53, 0x45, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45,
	0x53, 0x5f, 0x4a, 0x45, 0x52, 0x53, 0x45, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x10,
	0x03, 0x2a, 0x5c, 0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x53, 0x43, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x4f, 0x55, 0x54,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0x3c, 0x0a, 0x0b, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x02, 0x2a, 0xd3, 0x03,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x46, 0x4f, 0x55, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x48, 0x52, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x46, 0x46, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x53, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x52, 0x4e, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x45, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x07, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x08,
	0x12, 0x18, 0x0a, 0x14, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x48,
	0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x0b, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x53,
	0x48, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x4f, 0x41, 0x4c, 0x4b, 0x45, 0x45, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x0f, 0x12, 0x12, 0x0a,
	0x0e, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10,
	0x10, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41,
	0x4e, 0x47, 0x45, 0x52, 0x4f, 0x55, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x4e, 0x47,
	0x45, 0x52, 0x4f, 0x55, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x10, 0x15, 0x2a, 0xd0, 0x01, 0x0a, 0x0f, 0x50, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x50, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x57, 0x45, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4e, 0x4f, 0x57,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x4e, 0x54, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x57, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x55, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x07,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x4f, 0x41, 0x4c, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x53, 0x5f, 0x41, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x52,
	0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x4c, 0x10, 0x0b, 0x2a, 0xd3, 0x02, 0x0a, 0x11, 0x57, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x19,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47,
	0x4f, 0x4f, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x57, 0x49, 0x4e, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x4f, 0x52,
	0x4d, 0x59, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x4e, 0x4f, 0x57, 0x46, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x4f, 0x54, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45,
	0x41, 0x56, 0x59, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x59, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x41, 0x56, 0x59, 0x5f,
	0x53, 0x4e, 0x4f, 0x57, 0x46, 0x41, 0x4c, 0x4c, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x53, 0x4e, 0x4f, 0x57, 0x46, 0x41, 0x4c, 0x4c, 0x10, 0x0b, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x41, 0x49, 0x4c, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x52, 0x4f,
	0x4e, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4e,
	0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4f, 0x54, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x49, 0x4c, 0x44, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4c, 0x44, 0x10, 0x12, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x4f, 0x47, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x48, 0x55, 0x4e,
	0x44, 0x45, 0x52, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e,
	0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x15, 0x2a, 0x4f, 0x0a, 0x14,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0xca, 0x06,
	0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x54, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x48, 0x41, 0x4c, 0x46, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x31, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x32, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x0b, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x33, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10,
	0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x31, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52,
	0x32, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x41,
	0x52, 0x54, 0x45, 0x52, 0x33, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x0f, 0x12, 0x12, 0x0a,
	0x0e, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x34, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10,
	0x10, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x31, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x32, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x33, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x34, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x35, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x45, 0x42, 0x52, 0x45, 0x41,
	0x4b, 0x31, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49,
	0x45, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x32, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x19, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x49, 0x45, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x33, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x45, 0x42, 0x52, 0x45, 0x41, 0x4b,
	0x34, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x45,
	0x42, 0x52, 0x45, 0x41, 0x4b, 0x35, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x1c, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x31, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10,
	0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x32, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x56, 0x45, 0x52, 0x31, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x56, 0x45, 0x52, 0x32, 0x5f, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x10, 0x20, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x53, 0x31, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x53, 0x32, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x22, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x44, 0x31, 0x5f, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x44, 0x32,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x24, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45, 0x4e, 0x41,
	0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x25, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x26, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x27, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x28, 0x2a, 0x75, 0x0a, 0x0e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x4a, 0x55, 0x52, 0x59, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10,
	0x05, 0x2a, 0xfa, 0x05, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x44,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x52, 0x10, 0x07, 0x12,
	0x08, 0x0a, 0x04, 0x4f, 0x44, 0x44, 0x53, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x49, 0x44,
	0x47, 0x45, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x56,
	0x41, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x57, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x11, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49,
	0x50, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x12, 0x12, 0x17, 0x0a,
	0x13, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x14, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41,
	0x54, 0x10, 0x16, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x17, 0x12,
	0x15, 0x0a, 0x11, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x52, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03, 0x48,
	0x32, 0x48, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x10, 0x1b, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50,
	0x41, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x1d,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x44, 0x44, 0x53, 0x10, 0x1e,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x1f, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0x20, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x46, 0x49, 0x58, 0x54,
	0x55, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x21, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x22, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x23, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x24, 0x2a, 0xc4,
	0x09, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x4f, 0x41, 0x4c, 0x4b, 0x45, 0x45, 0x50, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x49, 0x44, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55,
	0x42, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x4a, 0x55, 0x52, 0x45, 0x44, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x41, 0x43, 0x48,
	0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x49, 0x54, 0x43, 0x48, 0x45, 0x52, 0x10, 0x0a, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x4f, 0x55, 0x42, 0x54, 0x46, 0x55, 0x4c, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x57, 0x49,
	0x4e, 0x47, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x57, 0x49,
	0x4e, 0x47, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x12,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x56, 0x4f, 0x54, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x46, 0x46, 0x45, 0x4e, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x15, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x46, 0x46, 0x45, 0x4e, 0x53, 0x49, 0x56, 0x45,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x17, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x46, 0x45, 0x4e,
	0x53, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x19, 0x12, 0x10, 0x0a,
	0x0c, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x1a, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x1b, 0x12, 0x0d,
	0x0a, 0x09, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x1c, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x1d, 0x12, 0x0a,
	0x0a, 0x06, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x50, 0x4c, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x21, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x55,
	0x41, 0x52, 0x44, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x44, 0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x44, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4d,
	0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x25, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x26,
	0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x27,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x28, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x29, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x2a, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x10, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x2c, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x4f, 0x55, 0x54, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x2d, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x10, 0x2e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x10, 0x2f, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x30, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4c, 0x49,
	0x45, 0x56, 0x45, 0x52, 0x10, 0x31, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x52, 0x5f, 0x47, 0x55, 0x59, 0x10, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x33, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x48, 0x49, 0x54, 0x54, 0x45, 0x52, 0x10, 0x34, 0x12, 0x11,
	0x0a, 0x0d, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x10,
	0x35, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x41, 0x43, 0x48, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x10, 0x36, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x41, 0x43, 0x48, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x37, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x41,
	0x43, 0x48, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x38, 0x12, 0x16,
	0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x44, 0x55, 0x54, 0x59, 0x10, 0x39, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x50, 0x54, 0x41, 0x49,
	0x4e, 0x10, 0x3a, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4b, 0x45,
	0x45, 0x50, 0x45, 0x52, 0x10, 0x3b, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x50, 0x54, 0x41, 0x49,
	0x4e, 0x5f, 0x57, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x45, 0x52, 0x10,
	0x3c, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x3d, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x3e, 0x12,
	0x0b, 0x0a, 0x07, 0x42, 0x41, 0x54, 0x53, 0x4d, 0x41, 0x4e, 0x10, 0x3f, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x4f, 0x57, 0x4c, 0x45, 0x52, 0x10, 0x40, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x50, 0x54,
	0x41, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4b,
	0x45, 0x45, 0x50, 0x45, 0x52, 0x10, 0x41, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x50, 0x54, 0x41,
	0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x45, 0x52, 0x10, 0x42, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x50, 0x54, 0x41, 0x49, 0x4e, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x53, 0x4d, 0x41, 0x4e, 0x10, 0x43, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x41, 0x50, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x42, 0x4f, 0x57,
	0x4c, 0x45, 0x52, 0x10, 0x44, 0x2a, 0x3d, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x58,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0xe7, 0x06, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x56, 0x53,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x4c, 0x45, 0x5f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x41, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x5f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x49, 0x58, 0x45, 0x44,
	0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x07, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x34, 0x30, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x53, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x34, 0x35, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x35, 0x30, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x10, 0x0b, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x5f, 0x32, 0x30, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x5f, 0x32,
	0x30, 0x5f, 0x49, 0x4e, 0x54, 0x4c, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x44, 0x49, 0x10,
	0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x44,
	0x41, 0x59, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x10, 0x12, 0x0a,
	0x0a, 0x06, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x41, 0x5f, 0x4f, 0x44, 0x49, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x35, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x10, 0x13, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x31, 0x30, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x10,
	0x14, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x33, 0x35, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x53, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x31,
	0x30, 0x30, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x53, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x33, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x34, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x35, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x19, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x36, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x1a, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x59, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x1b, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x43, 0x4c, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x50, 0x4c, 0x10, 0x1d,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x32, 0x5f, 0x44, 0x41, 0x59, 0x53,
	0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x33, 0x5f, 0x44, 0x41,
	0x59, 0x53, 0x10, 0x1f, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x34, 0x5f,
	0x44, 0x41, 0x59, 0x53, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x35, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x36, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x37, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x10, 0x23, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x38, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x10,
	0x24, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x39, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x53, 0x10, 0x25, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x36, 0x30,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x10, 0x26, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x4c, 0x59,
	0x5f, 0x54, 0x5f, 0x32, 0x30, 0x10, 0x27, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x41, 0x5f, 0x54, 0x5f, 0x32, 0x30, 0x10, 0x28, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x5f, 0x32, 0x30,
	0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x43, 0x55, 0x50, 0x10, 0x29, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x5f, 0x32, 0x30, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x46,
	0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x2a, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x5f, 0x32, 0x30, 0x5f,
	0x59, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x2b, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x4c, 0x59, 0x5f,
	0x4f, 0x44, 0x49, 0x10, 0x2c, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x44, 0x49, 0x5f, 0x57, 0x4f, 0x52,
	0x4c, 0x44, 0x5f, 0x43, 0x55, 0x50, 0x10, 0x2d, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x44, 0x49, 0x5f,
	0x59, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x2e, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x41, 0x5f, 0x4f, 0x44, 0x49, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x2f, 0x2a, 0x32,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x2a, 0xd5, 0x09, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49,
	0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x42,
	0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x55, 0x42, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41,
	0x52, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x41,
	0x4c, 0x54, 0x59, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x5f,
	0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x57, 0x4e,
	0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x48, 0x4f, 0x4f, 0x54,
	0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c,
	0x54, 0x59, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54,
	0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x45,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x47, 0x4f, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x0e, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x47, 0x4f, 0x41, 0x4c,
	0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x10, 0x10, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x10,
	0x11, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x45,
	0x4e, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x13, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x41, 0x52,
	0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x41, 0x57,
	0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x52, 0x4e, 0x45,
	0x52, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x43, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x19,
	0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x1a, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x41, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54,
	0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x57, 0x4f, 0x5f,
	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x55, 0x54, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53,
	0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x47, 0x4f,
	0x41, 0x4c, 0x10, 0x20, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x21, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x59,
	0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x23, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x52, 0x4f, 0x50, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x24, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x59, 0x5f, 0x47,
	0x4f, 0x41, 0x4c, 0x10, 0x25, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59,
	0x5f, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x47, 0x4f, 0x41, 0x4c, 0x10, 0x26, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x57, 0x45, 0x4e, 0x54, 0x59,
	0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x27, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x4f, 0x4c, 0x44, 0x45, 0x4e, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x28,
	0x12, 0x1d, 0x0a, 0x19, 0x47, 0x4f, 0x4c, 0x44, 0x45, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x29, 0x12,
	0x1e, 0x0a, 0x1a, 0x47, 0x4f, 0x4c, 0x44, 0x45, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x2a, 0x12,
	0x22, 0x0a, 0x1e, 0x54, 0x57, 0x45, 0x4e, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x2b, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x57, 0x4f, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54,
	0x45, 0x53, 0x5f, 0x42, 0x45, 0x4e, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x2c, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x2d, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x59, 0x5f, 0x47,
	0x4f, 0x41, 0x4c, 0x10, 0x2e, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c,
	0x10, 0x2f, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c,
	0x10, 0x30, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x59, 0x5f, 0x47, 0x4f, 0x41,
	0x4c, 0x10, 0x31, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10,
	0x32, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x54,
	0x57, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x33, 0x2a, 0xf6, 0x03, 0x0a, 0x06, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x45,
	0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x0a, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x41,
	0x52, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x0d, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x4f, 0x55, 0x52, 0x54, 0x48, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x0f, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x11,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4f, 0x55,
	0x52, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x10, 0x13, 0x2a, 0x2d, 0x0a, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x56,
	0x10, 0x02, 0x2a, 0xd9, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x53, 0x54, 0x50,
	0x4f, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x10, 0x0b, 0x2a, 0xcd,
	0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x45, 0x4e,
	0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x4f,
	0x4e, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x06, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x4f, 0x4c, 0x44, 0x45, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x4c,
	0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0a, 0x12,
	0x24, 0x0a, 0x20, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55,
	0x50, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0c, 0x12, 0x23, 0x0a,
	0x1f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f,
	0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x45, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x4f, 0x4c, 0x44,
	0x45, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x10,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x59, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x12, 0x12, 0x22,
	0x0a, 0x1e, 0x47, 0x4f, 0x4c, 0x44, 0x45, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x13, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f,
	0x55, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45,
	0x52, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x15, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x16, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x47, 0x4f, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x17, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x5f,
	0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x18, 0x12, 0x1b, 0x0a,
	0x17, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x55,
	0x44, 0x44, 0x45, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x1a, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x1b, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x1c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x1d, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x1f, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x20, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x54,
	0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x21, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x57, 0x41,
	0x52, 0x44, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x22, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x54, 0x31, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x54, 0x32, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x25, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x54, 0x33, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x26, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x54, 0x34, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x27, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x54, 0x35, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x28, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x45, 0x5f, 0x42,
	0x52, 0x45, 0x41, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x29, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x2a, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x2b, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x2c, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x4f, 0x55, 0x52, 0x54, 0x48, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x2d, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x2e,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x2f, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x48,
	0x49, 0x52, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x30, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x31, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x32, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f,
	0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x33, 0x12,
	0x18, 0x0a, 0x14, 0x46, 0x4f, 0x55, 0x52, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x34, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x56, 0x45,
	0x52, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x35, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x36, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10,
	0x37, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x42, 0x52, 0x45,
	0x41, 0x4b, 0x10, 0x38, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x41, 0x5f, 0x42, 0x52, 0x45, 0x41,
	0x4b, 0x10, 0x39, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x55, 0x4e, 0x43, 0x48, 0x10, 0x3a, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x55, 0x4d, 0x50, 0x53, 0x10, 0x3b, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x3c, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x55,
	0x53, 0x45, 0x10, 0x3d, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x53, 0x51, 0x55, 0x41, 0x4c, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3e, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41,
	0x4c, 0x4b, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x3f, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x50, 0x45,
	0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x40, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x41, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x42, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x43, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45,
	0x47, 0x49, 0x43, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x44, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x45, 0x12,
	0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x46, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x49, 0x46, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x47, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x58, 0x54, 0x48, 0x5f, 0x49,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x48, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x49, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x4a, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x49, 0x4e, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x4b, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x45, 0x4e, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x4c, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x49,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x4d, 0x2a, 0xc0,
	0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x54, 0x48, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x41, 0x43, 0x48, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10,
	0x06, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4d, 0x50, 0x49, 0x52, 0x45, 0x10, 0x07, 0x12, 0x10, 0x0a,
	0x0c, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x55, 0x4d, 0x50, 0x49, 0x52, 0x45, 0x10, 0x08, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x55, 0x4d, 0x50, 0x49, 0x52, 0x45,
	0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x56, 0x5f, 0x55, 0x4d, 0x50, 0x49, 0x52, 0x45, 0x10,
	0x0a, 0x2a, 0x47, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x86, 0x0a, 0x0a, 0x0f, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x48, 0x45, 0x4d, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4c, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x49,
	0x4e, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x49,
	0x4c, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x47, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x45, 0x52, 0x45, 0x4d, 0x4f, 0x4e, 0x59,
	0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x41, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x45, 0x52, 0x53, 0x45, 0x59, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x0a, 0x12,
	0x17, 0x0a, 0x13, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x42, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e,
	0x4a, 0x55, 0x52, 0x59, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x4a, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x41,
	0x57, 0x41, 0x59, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x4a, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x0f, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x48,
	0x4f, 0x4d, 0x45, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x45,
	0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x52, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x45,
	0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x4e,
	0x47, 0x45, 0x52, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x5f,
	0x41, 0x57, 0x41, 0x59, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52,
	0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x4e, 0x47, 0x45,
	0x52, 0x4f, 0x55, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59,
	0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x4f, 0x55, 0x53, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x1a, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x4f, 0x55, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f,
	0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x41, 0x4e, 0x47, 0x45, 0x52, 0x4f, 0x55, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49,
	0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x1c, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41, 0x46,
	0x45, 0x10, 0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x41, 0x57, 0x41, 0x59,
	0x10, 0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10,
	0x1f, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x48,
	0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x22, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x23, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x48, 0x4f, 0x54, 0x5f,
	0x57, 0x4f, 0x4f, 0x44, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x24, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x25, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x4f, 0x54, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x26, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x48,
	0x4f, 0x4d, 0x45, 0x10, 0x27, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x48, 0x52, 0x4f, 0x57, 0x5f, 0x49,
	0x4e, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x28, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x48, 0x52, 0x4f,
	0x57, 0x5f, 0x49, 0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x29, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x2a, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x10, 0x2b, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x55, 0x4c, 0x5f, 0x41, 0x57, 0x41, 0x59,
	0x10, 0x2c, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x55, 0x4c, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10,
	0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x46, 0x46, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x57, 0x41,
	0x59, 0x10, 0x2e, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x46, 0x46, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x48,
	0x4f, 0x4d, 0x45, 0x10, 0x2f, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x46,
	0x46, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x30, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x43, 0x4b,
	0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x31, 0x12, 0x12, 0x0a, 0x0e, 0x47,
	0x4f, 0x41, 0x4c, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x32, 0x12,
	0x12, 0x0a, 0x0e, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x10, 0x33, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x41, 0x57, 0x41, 0x59,
	0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x34, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x52, 0x45, 0x41, 0x4b,
	0x41, 0x57, 0x41, 0x59, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x36, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x37,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x10,
	0x38, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x52, 0x4e, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4d, 0x45,
	0x10, 0x39, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x52, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x57, 0x41,
	0x59, 0x10, 0x3a, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x43, 0x4f,
	0x52, 0x4e, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x3b, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x52, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x57, 0x41,
	0x59, 0x10, 0x3c, 0x2a, 0x9b, 0x03, 0x0a, 0x09, 0x50, 0x69, 0x74, 0x63, 0x68, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x52,
	0x4e, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4f, 0x52, 0x4e, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x52, 0x4e, 0x45, 0x52,
	0x5f, 0x41, 0x57, 0x41, 0x59, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x52, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b,
	0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x31, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x45,
	0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x32, 0x10, 0x06, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x5f, 0x33, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x52,
	0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x33, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b,
	0x49, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x34, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x35,
	0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f,
	0x41, 0x57, 0x41, 0x59, 0x5f, 0x31, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x45, 0x45,
	0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x5f, 0x32, 0x10, 0x0c, 0x12, 0x19,
	0x0a, 0x15, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59,
	0x5f, 0x33, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x52, 0x45,
	0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x5f, 0x33, 0x5f, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49,
	0x43, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x5f, 0x34, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x5f, 0x35, 0x10,
	0x10, 0x2a, 0x41, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f,
	0x0a, 0x0b, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x41, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x41, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x56, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e,
	0x41, 0x4c, 0x54, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x52, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x53, 0x10, 0x03, 0x2a, 0xf8, 0x18, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48,
	0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x07, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x08,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55,
	0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x0c, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x41, 0x46, 0x5f, 0x43,
	0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12,
	0x27, 0x0a, 0x23, 0x43, 0x41, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x46, 0x43, 0x5f,
	0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45,
	0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x46, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x46,
	0x43, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x46, 0x43, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x55, 0x50, 0x10, 0x12, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x49, 0x42, 0x45, 0x52, 0x54, 0x41, 0x44, 0x4f, 0x52,
	0x45, 0x53, 0x10, 0x13, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x49, 0x42,
	0x45, 0x52, 0x54, 0x41, 0x44, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x50,
	0x41, 0x5f, 0x53, 0x55, 0x44, 0x41, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x41, 0x10, 0x15,
	0x12, 0x18, 0x0a, 0x14, 0x4f, 0x46, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x16, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x46,
	0x43, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47,
	0x55, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x43, 0x41, 0x46, 0x5f, 0x43,
	0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10,
	0x18, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x46, 0x55, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x43, 0x48,
	0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x46, 0x43, 0x5f, 0x43, 0x55, 0x50, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x53,
	0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x53, 0x49, 0x41, 0x4e, 0x5f, 0x43, 0x55, 0x50, 0x10,
	0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x49, 0x41, 0x4e, 0x5f, 0x43, 0x55, 0x50, 0x10, 0x1c,
	0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53,
	0x5f, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x1d,
	0x12, 0x2c, 0x0a, 0x28, 0x46, 0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53,
	0x5f, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x34,
	0x0a, 0x30, 0x46, 0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43,
	0x41, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47,
	0x49, 0x56, 0x45, 0x53, 0x5f, 0x41, 0x46, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x20, 0x12, 0x26, 0x0a, 0x22, 0x46,
	0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x41, 0x46, 0x43, 0x5f,
	0x43, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x21, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49,
	0x56, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x49, 0x42, 0x45, 0x52, 0x54, 0x41,
	0x44, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x22, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x41, 0x5f, 0x43, 0x55,
	0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x50, 0x41, 0x5f, 0x53, 0x55, 0x44,
	0x41, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x41, 0x10, 0x23, 0x12, 0x33, 0x0a, 0x2f, 0x46,
	0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x41, 0x46, 0x43, 0x5f,
	0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x25,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53,
	0x5f, 0x41, 0x46, 0x43, 0x5f, 0x43, 0x55, 0x50, 0x10, 0x26, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x41,
	0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41,
	0x43, 0x41, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45,
	0x41, 0x47, 0x55, 0x45, 0x10, 0x27, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x41, 0x5f, 0x43, 0x55, 0x50,
	0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x45, 0x55, 0x52,
	0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x10,
	0x28, 0x12, 0x37, 0x0a, 0x33, 0x46, 0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45,
	0x53, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x41, 0x5f, 0x4c,
	0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x10, 0x29, 0x12, 0x30, 0x0a, 0x2c, 0x46, 0x41,
	0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x50, 0x41, 0x5f,
	0x4c, 0x49, 0x42, 0x45, 0x52, 0x54, 0x41, 0x44, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2a, 0x12, 0x42, 0x0a, 0x3e,
	0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x41, 0x46, 0x43, 0x5f,
	0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2b,
	0x12, 0x34, 0x0a, 0x30, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f,
	0x41, 0x46, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45,
	0x41, 0x47, 0x55, 0x45, 0x10, 0x2c, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49,
	0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f,
	0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x2d, 0x12, 0x34, 0x0a, 0x30, 0x43, 0x48, 0x41, 0x4d,
	0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46,
	0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2e, 0x12, 0x2d,
	0x0a, 0x29, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x45, 0x55,
	0x52, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x2f, 0x12, 0x3b, 0x0a,
	0x37, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x45, 0x55, 0x52,
	0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x30, 0x12, 0x42, 0x0a, 0x3e, 0x43, 0x48,
	0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x46, 0x5f, 0x43, 0x48,
	0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x31, 0x12, 0x43,
	0x0a, 0x3f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x41,
	0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x32, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56,
	0x45, 0x53, 0x5f, 0x41, 0x46, 0x43, 0x5f, 0x43, 0x55, 0x50, 0x10, 0x33, 0x12, 0x35, 0x0a, 0x31,
	0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x41, 0x46, 0x43, 0x5f,
	0x43, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x34, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56,
	0x45, 0x53, 0x5f, 0x41, 0x46, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x43, 0x55, 0x50, 0x10, 0x35, 0x12, 0x34, 0x0a, 0x30, 0x43, 0x48, 0x41, 0x4d, 0x50,
	0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46,
	0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x4f, 0x46, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x36, 0x12, 0x42, 0x0a,
	0x3e, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x4f, 0x46, 0x43,
	0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55,
	0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x37, 0x12, 0x39, 0x0a, 0x35, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49,
	0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53,
	0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x43, 0x41, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x38, 0x12, 0x35, 0x0a, 0x31,
	0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x46, 0x55, 0x5f,
	0x43, 0x4c, 0x55, 0x42, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49,
	0x50, 0x10, 0x39, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56,
	0x45, 0x53, 0x5f, 0x43, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x49, 0x42, 0x45, 0x52, 0x54, 0x41, 0x44,
	0x4f, 0x52, 0x45, 0x53, 0x10, 0x3a, 0x12, 0x3f, 0x0a, 0x3b, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49,
	0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f,
	0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x49, 0x42, 0x45, 0x52,
	0x54, 0x41, 0x44, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3b, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x48, 0x41, 0x4d, 0x50,
	0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46,
	0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x50, 0x41, 0x5f, 0x53, 0x55, 0x44, 0x41,
	0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x41, 0x10, 0x3c, 0x12, 0x3e, 0x0a, 0x3a, 0x43, 0x48,
	0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3d, 0x12, 0x30, 0x0a, 0x2c, 0x4c, 0x45,
	0x41, 0x47, 0x55, 0x45, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x45,
	0x55, 0x52, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3e, 0x12, 0x42, 0x0a, 0x3e,
	0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x57, 0x49, 0x4e, 0x4e, 0x45,
	0x52, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x45, 0x55,
	0x52, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x10, 0x3f,
	0x12, 0x35, 0x0a, 0x31, 0x43, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x49, 0x42, 0x45, 0x52, 0x54, 0x41,
	0x44, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49,
	0x56, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x50, 0x41, 0x5f, 0x53, 0x55, 0x44, 0x41, 0x4d, 0x45, 0x52,
	0x49, 0x43, 0x41, 0x4e, 0x41, 0x10, 0x40, 0x12, 0x36, 0x0a, 0x32, 0x43, 0x4f, 0x50, 0x41, 0x5f,
	0x4c, 0x49, 0x42, 0x45, 0x52, 0x54, 0x41, 0x44, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x41,
	0x5f, 0x4c, 0x49, 0x42, 0x45, 0x52, 0x54, 0x41, 0x44, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x41, 0x12,
	0x3a, 0x0a, 0x36, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x45, 0x55,
	0x52, 0x4f, 0x50, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x42, 0x12, 0x37, 0x0a, 0x33, 0x46,
	0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x45, 0x55, 0x52, 0x4f,
	0x50, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x45,
	0x41, 0x47, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x43, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x41, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x44,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x45, 0x12, 0x46,
	0x0a, 0x42, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x45, 0x55,
	0x52, 0x4f, 0x50, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x46, 0x12, 0x3b, 0x0a, 0x37, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45,
	0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x45, 0x55, 0x52, 0x4f, 0x50,
	0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x41,
	0x47, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x47, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x43, 0x55, 0x50,
	0x10, 0x48, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x49, 0x12, 0x23, 0x0a, 0x1f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54,
	0x45, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x53, 0x10, 0x4a, 0x12, 0x22, 0x0a, 0x1e, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x48, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x53, 0x10, 0x4b, 0x12,
	0x21, 0x0a, 0x1d, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4d,
	0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x4f, 0x46, 0x46,
	0x10, 0x4c, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x4f, 0x46, 0x46, 0x10, 0x4d, 0x2a, 0xe6, 0x03, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x4d, 0x49, 0x5f, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x41, 0x52, 0x54,
	0x45, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x5f,
	0x31, 0x5f, 0x38, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x5f, 0x31, 0x5f, 0x31, 0x36, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x5f, 0x31, 0x5f, 0x33, 0x32, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x5f,
	0x31, 0x5f, 0x36, 0x34, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x5f, 0x31, 0x5f, 0x31, 0x32, 0x38,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x09, 0x0a,
	0x05, 0x5f, 0x31, 0x5f, 0x39, 0x36, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x5f, 0x31, 0x5f, 0x34,
	0x38, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x5f, 0x31, 0x5f, 0x32, 0x34, 0x10, 0x0c, 0x12, 0x09,
	0x0a, 0x05, 0x5f, 0x31, 0x5f, 0x31, 0x32, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x5f, 0x31, 0x5f,
	0x36, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x5f, 0x31, 0x5f, 0x33, 0x10, 0x0f, 0x12, 0x09, 0x0a,
	0x05, 0x5f, 0x31, 0x5f, 0x32, 0x38, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x5f, 0x31, 0x5f, 0x31,
	0x34, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x5f, 0x31, 0x5f, 0x37, 0x10, 0x12, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x13, 0x12, 0x0a,
	0x0a, 0x06, 0x5f, 0x31, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x5f, 0x31,
	0x5f, 0x35, 0x31, 0x32, 0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x5f, 0x35, 0x5f, 0x36, 0x10, 0x16,
	0x12, 0x08, 0x0a, 0x04, 0x5f, 0x37, 0x5f, 0x38, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x5f, 0x39,
	0x5f, 0x31, 0x30, 0x10, 0x18, 0x12, 0x0a, 0x0a, 0x06, 0x5f, 0x31, 0x31, 0x5f, 0x31, 0x32, 0x10,
	0x19, 0x12, 0x08, 0x0a, 0x04, 0x5f, 0x35, 0x5f, 0x38, 0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x5f,
	0x31, 0x37, 0x5f, 0x32, 0x30, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x5f, 0x32, 0x31, 0x5f, 0x32,
	0x34, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x5f, 0x31, 0x37, 0x5f, 0x31, 0x38, 0x10, 0x1d, 0x12,
	0x0a, 0x0a, 0x06, 0x5f, 0x31, 0x39, 0x5f, 0x32, 0x30, 0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x5f,
	0x32, 0x31, 0x5f, 0x32, 0x32, 0x10, 0x1f, 0x12, 0x0a, 0x0a, 0x06, 0x5f, 0x32, 0x33, 0x5f, 0x32,
	0x34, 0x10, 0x20, 0x12, 0x0a, 0x0a, 0x06, 0x5f, 0x31, 0x32, 0x5f, 0x31, 0x33, 0x10, 0x21, 0x12,
	0x0a, 0x0a, 0x06, 0x5f, 0x31, 0x31, 0x5f, 0x31, 0x34, 0x10, 0x22, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x49, 0x54, 0x4c, 0x45, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x4f, 0x46, 0x46, 0x10, 0x24, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x25,
	0x2a, 0xc5, 0x02, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x42, 0x41, 0x54, 0x53, 0x4d, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x55, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x55,
	0x42, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x42, 0x4f, 0x57,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x44,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x49, 0x54, 0x5f, 0x57, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x54, 0x55, 0x4d, 0x50, 0x45,
	0x44, 0x5f, 0x53, 0x55, 0x42, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x10,
	0x07, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x54, 0x55, 0x4d, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x55, 0x42,
	0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x0b, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10,
	0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x41, 0x54,
	0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x0e,
	0x0a, 0x0a, 0x59, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x54, 0x10, 0x0f, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x10, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x42, 0x57, 0x10, 0x11, 0x2a, 0xbb, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x6c,
	0x6c, 0x42, 0x79, 0x42, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x41, 0x4c, 0x4c,
	0x5f, 0x42, 0x59, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x5f,
	0x52, 0x55, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x55, 0x52, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x49, 0x58, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59, 0x45, 0x10,
	0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x47, 0x5f, 0x42, 0x59, 0x45, 0x10, 0x06, 0x12, 0x08,
	0x0a, 0x04, 0x57, 0x49, 0x44, 0x45, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x42,
	0x41, 0x4c, 0x4c, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x09, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x0a, 0x12,
	0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f,
	0x42, 0x59, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x0b, 0x12,
	0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x5f,
	0x42, 0x59, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x0c, 0x12,
	0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x47, 0x5f, 0x42,
	0x59, 0x45, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x47, 0x5f, 0x42, 0x59, 0x45, 0x5f,
	0x4f, 0x55, 0x54, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x42, 0x41, 0x4c, 0x4c,
	0x5f, 0x42, 0x59, 0x45, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x59, 0x45, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x11, 0x2a, 0xbf, 0x04, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x44, 0x49, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x44, 0x49, 0x5f, 0x59, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41,
	0x5f, 0x4f, 0x44, 0x49, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x5f, 0x31, 0x30, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x5f, 0x32, 0x30, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x5f, 0x32, 0x30, 0x5f, 0x49, 0x4e, 0x54, 0x4c, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x59,
	0x4f, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x08, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x32, 0x5f, 0x44, 0x41,
	0x59, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x33, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x34, 0x5f,
	0x44, 0x41, 0x59, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x0e, 0x12, 0x17, 0x0a,
	0x13, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x35, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x36, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x10, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x35, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x31, 0x30, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x33, 0x35,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x13, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x34, 0x35, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x35, 0x30, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x31,
	0x30, 0x30, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10,
	0x16, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x5f, 0x32, 0x30, 0x5f, 0x59, 0x4f, 0x55, 0x54, 0x48, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x17, 0x2a, 0x1f, 0x0a, 0x0a, 0x54, 0x6f, 0x73, 0x73,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x54, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x4f, 0x57, 0x4c, 0x10, 0x01, 0x42, 0x2f, 0x50, 0x01, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x6c, 0x69, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData = file_enums_proto_rawDesc
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_enums_proto_rawDescData)
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 33)
var file_enums_proto_goTypes = []interface{}{
	(RpcResponseStatus)(0),    // 0: com.sts.rpclib.RpcResponseStatus
	(Teams)(0),                // 1: com.sts.rpclib.Teams
	(JerseyDesign)(0),         // 2: com.sts.rpclib.JerseyDesign
	(ScoutConnection)(0),      // 3: com.sts.rpclib.ScoutConnection
	(ElapsedType)(0),          // 4: com.sts.rpclib.ElapsedType
	(StatsType)(0),            // 5: com.sts.rpclib.StatsType
	(PitchConditions)(0),      // 6: com.sts.rpclib.PitchConditions
	(WeatherConditions)(0),    // 7: com.sts.rpclib.WeatherConditions
	(AttendanceConditions)(0), // 8: com.sts.rpclib.AttendanceConditions
	(ScoreType)(0),            // 9: com.sts.rpclib.ScoreType
	(CommentaryType)(0),       // 10: com.sts.rpclib.CommentaryType
	(MessageType)(0),          // 11: com.sts.rpclib.MessageType
	(ParticipantPosition)(0),  // 12: com.sts.rpclib.ParticipantPosition
	(Gender)(0),               // 13: com.sts.rpclib.Gender
	(EventType)(0),            // 14: com.sts.rpclib.EventType
	(UpdateAction)(0),         // 15: com.sts.rpclib.UpdateAction
	(IncidentType)(0),         // 16: com.sts.rpclib.IncidentType
	(Period)(0),               // 17: com.sts.rpclib.Period
	(Coverage)(0),             // 18: com.sts.rpclib.Coverage
	(MatchOverallStatus)(0),   // 19: com.sts.rpclib.MatchOverallStatus
	(MatchStatus)(0),          // 20: com.sts.rpclib.MatchStatus
	(ParticipantKind)(0),      // 21: com.sts.rpclib.ParticipantKind
	(ProviderConnection)(0),   // 22: com.sts.rpclib.ProviderConnection
	(WidgetEventType)(0),      // 23: com.sts.rpclib.WidgetEventType
	(PitchZone)(0),            // 24: com.sts.rpclib.PitchZone
	(VarStatus)(0),            // 25: com.sts.rpclib.VarStatus
	(VarReason)(0),            // 26: com.sts.rpclib.VarReason
	(StagePhases)(0),          // 27: com.sts.rpclib.StagePhases
	(RoundType)(0),            // 28: com.sts.rpclib.RoundType
	(BatsmanStatusType)(0),    // 29: com.sts.rpclib.BatsmanStatusType
	(BallByBallScoreType)(0),  // 30: com.sts.rpclib.BallByBallScoreType
	(EventFormat)(0),          // 31: com.sts.rpclib.EventFormat
	(TossChoice)(0),           // 32: com.sts.rpclib.TossChoice
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enums_proto_rawDesc,
			NumEnums:      33,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_rawDesc = nil
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
