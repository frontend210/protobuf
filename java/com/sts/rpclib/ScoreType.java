// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

package com.sts.rpclib;

/**
 * Protobuf enum {@code com.sts.rpclib.ScoreType}
 */
public enum ScoreType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN_SCORE = 0;</code>
   */
  UNKNOWN_SCORE(0),
  /**
   * <pre>
   * SOCCER
   * </pre>
   *
   * <code>RUNNING_SCORE = 1;</code>
   */
  RUNNING_SCORE(1),
  /**
   * <code>FIRST_HALF_SCORE = 2;</code>
   */
  FIRST_HALF_SCORE(2),
  /**
   * <code>HT_SCORE = 3;</code>
   */
  HT_SCORE(3),
  /**
   * <code>SECOND_HALF_SCORE = 4;</code>
   */
  SECOND_HALF_SCORE(4),
  /**
   * <code>FT_SCORE = 5;</code>
   */
  FT_SCORE(5),
  /**
   * <code>FIRST_EXTRA_TIME_SCORE = 6;</code>
   */
  FIRST_EXTRA_TIME_SCORE(6),
  /**
   * <code>SECOND_EXTRA_TIME_SCORE = 7;</code>
   */
  SECOND_EXTRA_TIME_SCORE(7),
  /**
   * <code>HT_EXTRA_TIME_SCORE = 8;</code>
   */
  HT_EXTRA_TIME_SCORE(8),
  /**
   * <code>PENALTY_SHOOTOUT_SCORE = 9;</code>
   */
  PENALTY_SHOOTOUT_SCORE(9),
  /**
   * <pre>
   * ICE HOCKEY
   * </pre>
   *
   * <code>PERIOD1_SCORE = 10;</code>
   */
  PERIOD1_SCORE(10),
  /**
   * <code>PERIOD2_SCORE = 11;</code>
   */
  PERIOD2_SCORE(11),
  /**
   * <code>PERIOD3_SCORE = 12;</code>
   */
  PERIOD3_SCORE(12),
  /**
   * <pre>
   * BASKET
   * </pre>
   *
   * <code>QUARTER1_SCORE = 13;</code>
   */
  QUARTER1_SCORE(13),
  /**
   * <code>QUARTER2_SCORE = 14;</code>
   */
  QUARTER2_SCORE(14),
  /**
   * <code>QUARTER3_SCORE = 15;</code>
   */
  QUARTER3_SCORE(15),
  /**
   * <code>QUARTER4_SCORE = 16;</code>
   */
  QUARTER4_SCORE(16),
  /**
   * <pre>
   * ICE/BASKET
   * </pre>
   *
   * <code>OVERTIME_SCORE = 17;</code>
   */
  OVERTIME_SCORE(17),
  /**
   * <pre>
   * TENNIS
   * </pre>
   *
   * <code>GAME_SCORE = 18;</code>
   */
  GAME_SCORE(18),
  /**
   * <code>SET1_SCORE = 19;</code>
   */
  SET1_SCORE(19),
  /**
   * <code>SET2_SCORE = 20;</code>
   */
  SET2_SCORE(20),
  /**
   * <code>SET3_SCORE = 21;</code>
   */
  SET3_SCORE(21),
  /**
   * <code>SET4_SCORE = 22;</code>
   */
  SET4_SCORE(22),
  /**
   * <code>SET5_SCORE = 23;</code>
   */
  SET5_SCORE(23),
  /**
   * <code>TIEBREAK1_SCORE = 24;</code>
   */
  TIEBREAK1_SCORE(24),
  /**
   * <code>TIEBREAK2_SCORE = 25;</code>
   */
  TIEBREAK2_SCORE(25),
  /**
   * <code>TIEBREAK3_SCORE = 26;</code>
   */
  TIEBREAK3_SCORE(26),
  /**
   * <code>TIEBREAK4_SCORE = 27;</code>
   */
  TIEBREAK4_SCORE(27),
  /**
   * <code>TIEBREAK5_SCORE = 28;</code>
   */
  TIEBREAK5_SCORE(28),
  /**
   * <pre>
   * CRICKET
   * </pre>
   *
   * <code>POINTS1_SCORE = 29;</code>
   */
  POINTS1_SCORE(29),
  /**
   * <code>POINTS2_SCORE = 30;</code>
   */
  POINTS2_SCORE(30),
  /**
   * <pre>
   * Float
   * </pre>
   *
   * <code>OVER1_SCORE = 31;</code>
   */
  OVER1_SCORE(31),
  /**
   * <pre>
   * Float
   * </pre>
   *
   * <code>OVER2_SCORE = 32;</code>
   */
  OVER2_SCORE(32),
  /**
   * <code>WICKETS1_SCORE = 33;</code>
   */
  WICKETS1_SCORE(33),
  /**
   * <code>WICKETS2_SCORE = 34;</code>
   */
  WICKETS2_SCORE(34),
  /**
   * <code>DECLARED1_SCORE = 35;</code>
   */
  DECLARED1_SCORE(35),
  /**
   * <code>DECLARED2_SCORE = 36;</code>
   */
  DECLARED2_SCORE(36),
  /**
   * <pre>
   * This soccer score type contains the total score value for the penalty shootout and the ordinary time score
   * this means that the ordinary time score needs to be subtracted
   * </pre>
   *
   * <code>PENALTY_SHOOTOUT_TOTAL_SCORE = 37;</code>
   */
  PENALTY_SHOOTOUT_TOTAL_SCORE(37),
  /**
   * <pre>
   * BASEBALL
   * </pre>
   *
   * <code>INNING_SCORES = 38;</code>
   */
  INNING_SCORES(38),
  /**
   * <code>EXTRA_INNING_SCORE = 39;</code>
   */
  EXTRA_INNING_SCORE(39),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN_SCORE = 0;</code>
   */
  public static final int UNKNOWN_SCORE_VALUE = 0;
  /**
   * <pre>
   * SOCCER
   * </pre>
   *
   * <code>RUNNING_SCORE = 1;</code>
   */
  public static final int RUNNING_SCORE_VALUE = 1;
  /**
   * <code>FIRST_HALF_SCORE = 2;</code>
   */
  public static final int FIRST_HALF_SCORE_VALUE = 2;
  /**
   * <code>HT_SCORE = 3;</code>
   */
  public static final int HT_SCORE_VALUE = 3;
  /**
   * <code>SECOND_HALF_SCORE = 4;</code>
   */
  public static final int SECOND_HALF_SCORE_VALUE = 4;
  /**
   * <code>FT_SCORE = 5;</code>
   */
  public static final int FT_SCORE_VALUE = 5;
  /**
   * <code>FIRST_EXTRA_TIME_SCORE = 6;</code>
   */
  public static final int FIRST_EXTRA_TIME_SCORE_VALUE = 6;
  /**
   * <code>SECOND_EXTRA_TIME_SCORE = 7;</code>
   */
  public static final int SECOND_EXTRA_TIME_SCORE_VALUE = 7;
  /**
   * <code>HT_EXTRA_TIME_SCORE = 8;</code>
   */
  public static final int HT_EXTRA_TIME_SCORE_VALUE = 8;
  /**
   * <code>PENALTY_SHOOTOUT_SCORE = 9;</code>
   */
  public static final int PENALTY_SHOOTOUT_SCORE_VALUE = 9;
  /**
   * <pre>
   * ICE HOCKEY
   * </pre>
   *
   * <code>PERIOD1_SCORE = 10;</code>
   */
  public static final int PERIOD1_SCORE_VALUE = 10;
  /**
   * <code>PERIOD2_SCORE = 11;</code>
   */
  public static final int PERIOD2_SCORE_VALUE = 11;
  /**
   * <code>PERIOD3_SCORE = 12;</code>
   */
  public static final int PERIOD3_SCORE_VALUE = 12;
  /**
   * <pre>
   * BASKET
   * </pre>
   *
   * <code>QUARTER1_SCORE = 13;</code>
   */
  public static final int QUARTER1_SCORE_VALUE = 13;
  /**
   * <code>QUARTER2_SCORE = 14;</code>
   */
  public static final int QUARTER2_SCORE_VALUE = 14;
  /**
   * <code>QUARTER3_SCORE = 15;</code>
   */
  public static final int QUARTER3_SCORE_VALUE = 15;
  /**
   * <code>QUARTER4_SCORE = 16;</code>
   */
  public static final int QUARTER4_SCORE_VALUE = 16;
  /**
   * <pre>
   * ICE/BASKET
   * </pre>
   *
   * <code>OVERTIME_SCORE = 17;</code>
   */
  public static final int OVERTIME_SCORE_VALUE = 17;
  /**
   * <pre>
   * TENNIS
   * </pre>
   *
   * <code>GAME_SCORE = 18;</code>
   */
  public static final int GAME_SCORE_VALUE = 18;
  /**
   * <code>SET1_SCORE = 19;</code>
   */
  public static final int SET1_SCORE_VALUE = 19;
  /**
   * <code>SET2_SCORE = 20;</code>
   */
  public static final int SET2_SCORE_VALUE = 20;
  /**
   * <code>SET3_SCORE = 21;</code>
   */
  public static final int SET3_SCORE_VALUE = 21;
  /**
   * <code>SET4_SCORE = 22;</code>
   */
  public static final int SET4_SCORE_VALUE = 22;
  /**
   * <code>SET5_SCORE = 23;</code>
   */
  public static final int SET5_SCORE_VALUE = 23;
  /**
   * <code>TIEBREAK1_SCORE = 24;</code>
   */
  public static final int TIEBREAK1_SCORE_VALUE = 24;
  /**
   * <code>TIEBREAK2_SCORE = 25;</code>
   */
  public static final int TIEBREAK2_SCORE_VALUE = 25;
  /**
   * <code>TIEBREAK3_SCORE = 26;</code>
   */
  public static final int TIEBREAK3_SCORE_VALUE = 26;
  /**
   * <code>TIEBREAK4_SCORE = 27;</code>
   */
  public static final int TIEBREAK4_SCORE_VALUE = 27;
  /**
   * <code>TIEBREAK5_SCORE = 28;</code>
   */
  public static final int TIEBREAK5_SCORE_VALUE = 28;
  /**
   * <pre>
   * CRICKET
   * </pre>
   *
   * <code>POINTS1_SCORE = 29;</code>
   */
  public static final int POINTS1_SCORE_VALUE = 29;
  /**
   * <code>POINTS2_SCORE = 30;</code>
   */
  public static final int POINTS2_SCORE_VALUE = 30;
  /**
   * <pre>
   * Float
   * </pre>
   *
   * <code>OVER1_SCORE = 31;</code>
   */
  public static final int OVER1_SCORE_VALUE = 31;
  /**
   * <pre>
   * Float
   * </pre>
   *
   * <code>OVER2_SCORE = 32;</code>
   */
  public static final int OVER2_SCORE_VALUE = 32;
  /**
   * <code>WICKETS1_SCORE = 33;</code>
   */
  public static final int WICKETS1_SCORE_VALUE = 33;
  /**
   * <code>WICKETS2_SCORE = 34;</code>
   */
  public static final int WICKETS2_SCORE_VALUE = 34;
  /**
   * <code>DECLARED1_SCORE = 35;</code>
   */
  public static final int DECLARED1_SCORE_VALUE = 35;
  /**
   * <code>DECLARED2_SCORE = 36;</code>
   */
  public static final int DECLARED2_SCORE_VALUE = 36;
  /**
   * <pre>
   * This soccer score type contains the total score value for the penalty shootout and the ordinary time score
   * this means that the ordinary time score needs to be subtracted
   * </pre>
   *
   * <code>PENALTY_SHOOTOUT_TOTAL_SCORE = 37;</code>
   */
  public static final int PENALTY_SHOOTOUT_TOTAL_SCORE_VALUE = 37;
  /**
   * <pre>
   * BASEBALL
   * </pre>
   *
   * <code>INNING_SCORES = 38;</code>
   */
  public static final int INNING_SCORES_VALUE = 38;
  /**
   * <code>EXTRA_INNING_SCORE = 39;</code>
   */
  public static final int EXTRA_INNING_SCORE_VALUE = 39;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ScoreType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ScoreType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_SCORE;
      case 1: return RUNNING_SCORE;
      case 2: return FIRST_HALF_SCORE;
      case 3: return HT_SCORE;
      case 4: return SECOND_HALF_SCORE;
      case 5: return FT_SCORE;
      case 6: return FIRST_EXTRA_TIME_SCORE;
      case 7: return SECOND_EXTRA_TIME_SCORE;
      case 8: return HT_EXTRA_TIME_SCORE;
      case 9: return PENALTY_SHOOTOUT_SCORE;
      case 10: return PERIOD1_SCORE;
      case 11: return PERIOD2_SCORE;
      case 12: return PERIOD3_SCORE;
      case 13: return QUARTER1_SCORE;
      case 14: return QUARTER2_SCORE;
      case 15: return QUARTER3_SCORE;
      case 16: return QUARTER4_SCORE;
      case 17: return OVERTIME_SCORE;
      case 18: return GAME_SCORE;
      case 19: return SET1_SCORE;
      case 20: return SET2_SCORE;
      case 21: return SET3_SCORE;
      case 22: return SET4_SCORE;
      case 23: return SET5_SCORE;
      case 24: return TIEBREAK1_SCORE;
      case 25: return TIEBREAK2_SCORE;
      case 26: return TIEBREAK3_SCORE;
      case 27: return TIEBREAK4_SCORE;
      case 28: return TIEBREAK5_SCORE;
      case 29: return POINTS1_SCORE;
      case 30: return POINTS2_SCORE;
      case 31: return OVER1_SCORE;
      case 32: return OVER2_SCORE;
      case 33: return WICKETS1_SCORE;
      case 34: return WICKETS2_SCORE;
      case 35: return DECLARED1_SCORE;
      case 36: return DECLARED2_SCORE;
      case 37: return PENALTY_SHOOTOUT_TOTAL_SCORE;
      case 38: return INNING_SCORES;
      case 39: return EXTRA_INNING_SCORE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ScoreType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ScoreType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ScoreType>() {
          public ScoreType findValueByNumber(int number) {
            return ScoreType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.sts.rpclib.Enums.getDescriptor().getEnumTypes().get(9);
  }

  private static final ScoreType[] VALUES = values();

  public static ScoreType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ScoreType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.sts.rpclib.ScoreType)
}

