// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

package com.sts.rpclib;

/**
 * Protobuf enum {@code com.sts.rpclib.EventFormat}
 */
public enum EventFormat
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN_EVENT_FORMAT = 0;</code>
   */
  UNKNOWN_EVENT_FORMAT(0),
  /**
   * <code>ODI_FORMAT = 1;</code>
   */
  ODI_FORMAT(1),
  /**
   * <code>ODI_YOUTH_FORMAT = 2;</code>
   */
  ODI_YOUTH_FORMAT(2),
  /**
   * <code>LIST_A_ODI_FORMAT = 3;</code>
   */
  LIST_A_ODI_FORMAT(3),
  /**
   * <code>T_10_FORMAT = 4;</code>
   */
  T_10_FORMAT(4),
  /**
   * <code>T_20_FORMAT = 5;</code>
   */
  T_20_FORMAT(5),
  /**
   * <code>T_20_INTL_FORMAT = 6;</code>
   */
  T_20_INTL_FORMAT(6),
  /**
   * <code>TEST_FORMAT = 7;</code>
   */
  TEST_FORMAT(7),
  /**
   * <code>TEST_YOUTH_FORMAT = 8;</code>
   */
  TEST_YOUTH_FORMAT(8),
  /**
   * <code>FIRST_CLASS_FORMAT = 9;</code>
   */
  FIRST_CLASS_FORMAT(9),
  /**
   * <code>LIST_A_FORMAT = 10;</code>
   */
  LIST_A_FORMAT(10),
  /**
   * <code>MATCH_ONE_DAY_FORMAT = 11;</code>
   */
  MATCH_ONE_DAY_FORMAT(11),
  /**
   * <code>MATCH_2_DAYS_FORMAT = 12;</code>
   */
  MATCH_2_DAYS_FORMAT(12),
  /**
   * <code>MATCH_3_DAYS_FORMAT = 13;</code>
   */
  MATCH_3_DAYS_FORMAT(13),
  /**
   * <code>MATCH_4_DAYS_FORMAT = 14;</code>
   */
  MATCH_4_DAYS_FORMAT(14),
  /**
   * <code>MATCH_5_DAYS_FORMAT = 15;</code>
   */
  MATCH_5_DAYS_FORMAT(15),
  /**
   * <code>MATCH_6_DAYS_FORMAT = 16;</code>
   */
  MATCH_6_DAYS_FORMAT(16),
  /**
   * <code>MATCH_5_OVERS_FORMAT = 17;</code>
   */
  MATCH_5_OVERS_FORMAT(17),
  /**
   * <code>MATCH_10_OVERS_FORMAT = 18;</code>
   */
  MATCH_10_OVERS_FORMAT(18),
  /**
   * <code>MATCH_35_OVERS_FORMAT = 19;</code>
   */
  MATCH_35_OVERS_FORMAT(19),
  /**
   * <code>MATCH_45_OVERS_FORMAT = 20;</code>
   */
  MATCH_45_OVERS_FORMAT(20),
  /**
   * <code>MATCH_50_OVERS_FORMAT = 21;</code>
   */
  MATCH_50_OVERS_FORMAT(21),
  /**
   * <code>MATCH_100_BALLS_FORMAT = 22;</code>
   */
  MATCH_100_BALLS_FORMAT(22),
  /**
   * <code>T_20_YOUTH_FORMAT = 23;</code>
   */
  T_20_YOUTH_FORMAT(23),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN_EVENT_FORMAT = 0;</code>
   */
  public static final int UNKNOWN_EVENT_FORMAT_VALUE = 0;
  /**
   * <code>ODI_FORMAT = 1;</code>
   */
  public static final int ODI_FORMAT_VALUE = 1;
  /**
   * <code>ODI_YOUTH_FORMAT = 2;</code>
   */
  public static final int ODI_YOUTH_FORMAT_VALUE = 2;
  /**
   * <code>LIST_A_ODI_FORMAT = 3;</code>
   */
  public static final int LIST_A_ODI_FORMAT_VALUE = 3;
  /**
   * <code>T_10_FORMAT = 4;</code>
   */
  public static final int T_10_FORMAT_VALUE = 4;
  /**
   * <code>T_20_FORMAT = 5;</code>
   */
  public static final int T_20_FORMAT_VALUE = 5;
  /**
   * <code>T_20_INTL_FORMAT = 6;</code>
   */
  public static final int T_20_INTL_FORMAT_VALUE = 6;
  /**
   * <code>TEST_FORMAT = 7;</code>
   */
  public static final int TEST_FORMAT_VALUE = 7;
  /**
   * <code>TEST_YOUTH_FORMAT = 8;</code>
   */
  public static final int TEST_YOUTH_FORMAT_VALUE = 8;
  /**
   * <code>FIRST_CLASS_FORMAT = 9;</code>
   */
  public static final int FIRST_CLASS_FORMAT_VALUE = 9;
  /**
   * <code>LIST_A_FORMAT = 10;</code>
   */
  public static final int LIST_A_FORMAT_VALUE = 10;
  /**
   * <code>MATCH_ONE_DAY_FORMAT = 11;</code>
   */
  public static final int MATCH_ONE_DAY_FORMAT_VALUE = 11;
  /**
   * <code>MATCH_2_DAYS_FORMAT = 12;</code>
   */
  public static final int MATCH_2_DAYS_FORMAT_VALUE = 12;
  /**
   * <code>MATCH_3_DAYS_FORMAT = 13;</code>
   */
  public static final int MATCH_3_DAYS_FORMAT_VALUE = 13;
  /**
   * <code>MATCH_4_DAYS_FORMAT = 14;</code>
   */
  public static final int MATCH_4_DAYS_FORMAT_VALUE = 14;
  /**
   * <code>MATCH_5_DAYS_FORMAT = 15;</code>
   */
  public static final int MATCH_5_DAYS_FORMAT_VALUE = 15;
  /**
   * <code>MATCH_6_DAYS_FORMAT = 16;</code>
   */
  public static final int MATCH_6_DAYS_FORMAT_VALUE = 16;
  /**
   * <code>MATCH_5_OVERS_FORMAT = 17;</code>
   */
  public static final int MATCH_5_OVERS_FORMAT_VALUE = 17;
  /**
   * <code>MATCH_10_OVERS_FORMAT = 18;</code>
   */
  public static final int MATCH_10_OVERS_FORMAT_VALUE = 18;
  /**
   * <code>MATCH_35_OVERS_FORMAT = 19;</code>
   */
  public static final int MATCH_35_OVERS_FORMAT_VALUE = 19;
  /**
   * <code>MATCH_45_OVERS_FORMAT = 20;</code>
   */
  public static final int MATCH_45_OVERS_FORMAT_VALUE = 20;
  /**
   * <code>MATCH_50_OVERS_FORMAT = 21;</code>
   */
  public static final int MATCH_50_OVERS_FORMAT_VALUE = 21;
  /**
   * <code>MATCH_100_BALLS_FORMAT = 22;</code>
   */
  public static final int MATCH_100_BALLS_FORMAT_VALUE = 22;
  /**
   * <code>T_20_YOUTH_FORMAT = 23;</code>
   */
  public static final int T_20_YOUTH_FORMAT_VALUE = 23;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EventFormat valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static EventFormat forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_EVENT_FORMAT;
      case 1: return ODI_FORMAT;
      case 2: return ODI_YOUTH_FORMAT;
      case 3: return LIST_A_ODI_FORMAT;
      case 4: return T_10_FORMAT;
      case 5: return T_20_FORMAT;
      case 6: return T_20_INTL_FORMAT;
      case 7: return TEST_FORMAT;
      case 8: return TEST_YOUTH_FORMAT;
      case 9: return FIRST_CLASS_FORMAT;
      case 10: return LIST_A_FORMAT;
      case 11: return MATCH_ONE_DAY_FORMAT;
      case 12: return MATCH_2_DAYS_FORMAT;
      case 13: return MATCH_3_DAYS_FORMAT;
      case 14: return MATCH_4_DAYS_FORMAT;
      case 15: return MATCH_5_DAYS_FORMAT;
      case 16: return MATCH_6_DAYS_FORMAT;
      case 17: return MATCH_5_OVERS_FORMAT;
      case 18: return MATCH_10_OVERS_FORMAT;
      case 19: return MATCH_35_OVERS_FORMAT;
      case 20: return MATCH_45_OVERS_FORMAT;
      case 21: return MATCH_50_OVERS_FORMAT;
      case 22: return MATCH_100_BALLS_FORMAT;
      case 23: return T_20_YOUTH_FORMAT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EventFormat>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EventFormat> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EventFormat>() {
          public EventFormat findValueByNumber(int number) {
            return EventFormat.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.sts.rpclib.Enums.getDescriptor().getEnumTypes().get(31);
  }

  private static final EventFormat[] VALUES = values();

  public static EventFormat valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EventFormat(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.sts.rpclib.EventFormat)
}

