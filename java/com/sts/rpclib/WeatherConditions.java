// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

package com.sts.rpclib;

/**
 * Protobuf enum {@code com.sts.rpclib.WeatherConditions}
 */
public enum WeatherConditions
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN_WEATHER_CONDITION = 0;</code>
   */
  UNKNOWN_WEATHER_CONDITION(0),
  /**
   * <code>GOOD_WEATHER = 1;</code>
   */
  GOOD_WEATHER(1),
  /**
   * <code>WINDY = 2;</code>
   */
  WINDY(2),
  /**
   * <code>STORMY = 3;</code>
   */
  STORMY(3),
  /**
   * <code>RAIN = 4;</code>
   */
  RAIN(4),
  /**
   * <code>SNOWFALL = 5;</code>
   */
  SNOWFALL(5),
  /**
   * <code>VERY_HOT = 6;</code>
   */
  VERY_HOT(6),
  /**
   * <code>HEAVY_RAIN = 7;</code>
   */
  HEAVY_RAIN(7),
  /**
   * <code>LIGHT_RAIN = 8;</code>
   */
  LIGHT_RAIN(8),
  /**
   * <code>CLOUDY = 9;</code>
   */
  CLOUDY(9),
  /**
   * <code>HEAVY_SNOWFALL = 10;</code>
   */
  HEAVY_SNOWFALL(10),
  /**
   * <code>LIGHT_SNOWFALL = 11;</code>
   */
  LIGHT_SNOWFALL(11),
  /**
   * <code>HAIL = 12;</code>
   */
  HAIL(12),
  /**
   * <code>STRONG_WIND = 13;</code>
   */
  STRONG_WIND(13),
  /**
   * <code>LIGHT_WIND = 14;</code>
   */
  LIGHT_WIND(14),
  /**
   * <code>SUN = 15;</code>
   */
  SUN(15),
  /**
   * <code>HOT = 16;</code>
   */
  HOT(16),
  /**
   * <code>MILD = 17;</code>
   */
  MILD(17),
  /**
   * <code>COLD = 18;</code>
   */
  COLD(18),
  /**
   * <code>FOG = 19;</code>
   */
  FOG(19),
  /**
   * <code>THUNDERSTORM = 20;</code>
   */
  THUNDERSTORM(20),
  /**
   * <code>INDOOR_VENUE = 21;</code>
   */
  INDOOR_VENUE(21),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN_WEATHER_CONDITION = 0;</code>
   */
  public static final int UNKNOWN_WEATHER_CONDITION_VALUE = 0;
  /**
   * <code>GOOD_WEATHER = 1;</code>
   */
  public static final int GOOD_WEATHER_VALUE = 1;
  /**
   * <code>WINDY = 2;</code>
   */
  public static final int WINDY_VALUE = 2;
  /**
   * <code>STORMY = 3;</code>
   */
  public static final int STORMY_VALUE = 3;
  /**
   * <code>RAIN = 4;</code>
   */
  public static final int RAIN_VALUE = 4;
  /**
   * <code>SNOWFALL = 5;</code>
   */
  public static final int SNOWFALL_VALUE = 5;
  /**
   * <code>VERY_HOT = 6;</code>
   */
  public static final int VERY_HOT_VALUE = 6;
  /**
   * <code>HEAVY_RAIN = 7;</code>
   */
  public static final int HEAVY_RAIN_VALUE = 7;
  /**
   * <code>LIGHT_RAIN = 8;</code>
   */
  public static final int LIGHT_RAIN_VALUE = 8;
  /**
   * <code>CLOUDY = 9;</code>
   */
  public static final int CLOUDY_VALUE = 9;
  /**
   * <code>HEAVY_SNOWFALL = 10;</code>
   */
  public static final int HEAVY_SNOWFALL_VALUE = 10;
  /**
   * <code>LIGHT_SNOWFALL = 11;</code>
   */
  public static final int LIGHT_SNOWFALL_VALUE = 11;
  /**
   * <code>HAIL = 12;</code>
   */
  public static final int HAIL_VALUE = 12;
  /**
   * <code>STRONG_WIND = 13;</code>
   */
  public static final int STRONG_WIND_VALUE = 13;
  /**
   * <code>LIGHT_WIND = 14;</code>
   */
  public static final int LIGHT_WIND_VALUE = 14;
  /**
   * <code>SUN = 15;</code>
   */
  public static final int SUN_VALUE = 15;
  /**
   * <code>HOT = 16;</code>
   */
  public static final int HOT_VALUE = 16;
  /**
   * <code>MILD = 17;</code>
   */
  public static final int MILD_VALUE = 17;
  /**
   * <code>COLD = 18;</code>
   */
  public static final int COLD_VALUE = 18;
  /**
   * <code>FOG = 19;</code>
   */
  public static final int FOG_VALUE = 19;
  /**
   * <code>THUNDERSTORM = 20;</code>
   */
  public static final int THUNDERSTORM_VALUE = 20;
  /**
   * <code>INDOOR_VENUE = 21;</code>
   */
  public static final int INDOOR_VENUE_VALUE = 21;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static WeatherConditions valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static WeatherConditions forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_WEATHER_CONDITION;
      case 1: return GOOD_WEATHER;
      case 2: return WINDY;
      case 3: return STORMY;
      case 4: return RAIN;
      case 5: return SNOWFALL;
      case 6: return VERY_HOT;
      case 7: return HEAVY_RAIN;
      case 8: return LIGHT_RAIN;
      case 9: return CLOUDY;
      case 10: return HEAVY_SNOWFALL;
      case 11: return LIGHT_SNOWFALL;
      case 12: return HAIL;
      case 13: return STRONG_WIND;
      case 14: return LIGHT_WIND;
      case 15: return SUN;
      case 16: return HOT;
      case 17: return MILD;
      case 18: return COLD;
      case 19: return FOG;
      case 20: return THUNDERSTORM;
      case 21: return INDOOR_VENUE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<WeatherConditions>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      WeatherConditions> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<WeatherConditions>() {
          public WeatherConditions findValueByNumber(int number) {
            return WeatherConditions.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.sts.rpclib.Enums.getDescriptor().getEnumTypes().get(7);
  }

  private static final WeatherConditions[] VALUES = values();

  public static WeatherConditions valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private WeatherConditions(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.sts.rpclib.WeatherConditions)
}

